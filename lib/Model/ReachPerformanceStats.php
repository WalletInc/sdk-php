<?php
/**
 * ReachPerformanceStats
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReachPerformanceStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReachPerformanceStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReachPerformanceStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sent_count' => 'int',
        'delivered_count' => 'int',
        'failed_count' => 'int',
        'undelivered_count' => 'int',
        'viewed_count' => 'int',
        'redemptions_count' => 'int',
        'value_claimed' => 'int',
        'revenue_generated' => 'int',
        'refunds_count' => 'int',
        'value_refunded' => 'int',
        'revenue_lost' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sent_count' => 'int32',
        'delivered_count' => 'int32',
        'failed_count' => 'int32',
        'undelivered_count' => 'int32',
        'viewed_count' => 'int32',
        'redemptions_count' => 'int32',
        'value_claimed' => 'int32',
        'revenue_generated' => 'int32',
        'refunds_count' => 'int32',
        'value_refunded' => 'int32',
        'revenue_lost' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sent_count' => false,
        'delivered_count' => false,
        'failed_count' => false,
        'undelivered_count' => false,
        'viewed_count' => false,
        'redemptions_count' => false,
        'value_claimed' => false,
        'revenue_generated' => false,
        'refunds_count' => false,
        'value_refunded' => false,
        'revenue_lost' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sent_count' => 'sentCount',
        'delivered_count' => 'deliveredCount',
        'failed_count' => 'failedCount',
        'undelivered_count' => 'undeliveredCount',
        'viewed_count' => 'viewedCount',
        'redemptions_count' => 'redemptionsCount',
        'value_claimed' => 'valueClaimed',
        'revenue_generated' => 'revenueGenerated',
        'refunds_count' => 'refundsCount',
        'value_refunded' => 'valueRefunded',
        'revenue_lost' => 'revenueLost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sent_count' => 'setSentCount',
        'delivered_count' => 'setDeliveredCount',
        'failed_count' => 'setFailedCount',
        'undelivered_count' => 'setUndeliveredCount',
        'viewed_count' => 'setViewedCount',
        'redemptions_count' => 'setRedemptionsCount',
        'value_claimed' => 'setValueClaimed',
        'revenue_generated' => 'setRevenueGenerated',
        'refunds_count' => 'setRefundsCount',
        'value_refunded' => 'setValueRefunded',
        'revenue_lost' => 'setRevenueLost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sent_count' => 'getSentCount',
        'delivered_count' => 'getDeliveredCount',
        'failed_count' => 'getFailedCount',
        'undelivered_count' => 'getUndeliveredCount',
        'viewed_count' => 'getViewedCount',
        'redemptions_count' => 'getRedemptionsCount',
        'value_claimed' => 'getValueClaimed',
        'revenue_generated' => 'getRevenueGenerated',
        'refunds_count' => 'getRefundsCount',
        'value_refunded' => 'getValueRefunded',
        'revenue_lost' => 'getRevenueLost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sent_count', $data ?? [], null);
        $this->setIfExists('delivered_count', $data ?? [], null);
        $this->setIfExists('failed_count', $data ?? [], null);
        $this->setIfExists('undelivered_count', $data ?? [], null);
        $this->setIfExists('viewed_count', $data ?? [], null);
        $this->setIfExists('redemptions_count', $data ?? [], null);
        $this->setIfExists('value_claimed', $data ?? [], null);
        $this->setIfExists('revenue_generated', $data ?? [], null);
        $this->setIfExists('refunds_count', $data ?? [], null);
        $this->setIfExists('value_refunded', $data ?? [], null);
        $this->setIfExists('revenue_lost', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sent_count'] === null) {
            $invalidProperties[] = "'sent_count' can't be null";
        }
        if (($this->container['sent_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'sent_count', must be bigger than or equal to 0.";
        }

        if ($this->container['delivered_count'] === null) {
            $invalidProperties[] = "'delivered_count' can't be null";
        }
        if (($this->container['delivered_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'delivered_count', must be bigger than or equal to 0.";
        }

        if ($this->container['failed_count'] === null) {
            $invalidProperties[] = "'failed_count' can't be null";
        }
        if (($this->container['failed_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'failed_count', must be bigger than or equal to 0.";
        }

        if ($this->container['undelivered_count'] === null) {
            $invalidProperties[] = "'undelivered_count' can't be null";
        }
        if (($this->container['undelivered_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'undelivered_count', must be bigger than or equal to 0.";
        }

        if ($this->container['viewed_count'] === null) {
            $invalidProperties[] = "'viewed_count' can't be null";
        }
        if (($this->container['viewed_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'viewed_count', must be bigger than or equal to 0.";
        }

        if ($this->container['redemptions_count'] === null) {
            $invalidProperties[] = "'redemptions_count' can't be null";
        }
        if (($this->container['redemptions_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'redemptions_count', must be bigger than or equal to 0.";
        }

        if ($this->container['value_claimed'] === null) {
            $invalidProperties[] = "'value_claimed' can't be null";
        }
        if (($this->container['value_claimed'] < 0)) {
            $invalidProperties[] = "invalid value for 'value_claimed', must be bigger than or equal to 0.";
        }

        if ($this->container['revenue_generated'] === null) {
            $invalidProperties[] = "'revenue_generated' can't be null";
        }
        if (($this->container['revenue_generated'] < 0)) {
            $invalidProperties[] = "invalid value for 'revenue_generated', must be bigger than or equal to 0.";
        }

        if ($this->container['refunds_count'] === null) {
            $invalidProperties[] = "'refunds_count' can't be null";
        }
        if (($this->container['refunds_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'refunds_count', must be bigger than or equal to 0.";
        }

        if ($this->container['value_refunded'] === null) {
            $invalidProperties[] = "'value_refunded' can't be null";
        }
        if (($this->container['value_refunded'] < 0)) {
            $invalidProperties[] = "invalid value for 'value_refunded', must be bigger than or equal to 0.";
        }

        if ($this->container['revenue_lost'] === null) {
            $invalidProperties[] = "'revenue_lost' can't be null";
        }
        if (($this->container['revenue_lost'] < 0)) {
            $invalidProperties[] = "invalid value for 'revenue_lost', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sent_count
     *
     * @return int
     */
    public function getSentCount()
    {
        return $this->container['sent_count'];
    }

    /**
     * Sets sent_count
     *
     * @param int $sent_count Denotes the number of SMSes sent
     *
     * @return self
     */
    public function setSentCount($sent_count)
    {
        if (is_null($sent_count)) {
            throw new \InvalidArgumentException('non-nullable sent_count cannot be null');
        }

        if (($sent_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $sent_count when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['sent_count'] = $sent_count;

        return $this;
    }

    /**
     * Gets delivered_count
     *
     * @return int
     */
    public function getDeliveredCount()
    {
        return $this->container['delivered_count'];
    }

    /**
     * Sets delivered_count
     *
     * @param int $delivered_count Denotes the number of SMSes delivered
     *
     * @return self
     */
    public function setDeliveredCount($delivered_count)
    {
        if (is_null($delivered_count)) {
            throw new \InvalidArgumentException('non-nullable delivered_count cannot be null');
        }

        if (($delivered_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $delivered_count when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['delivered_count'] = $delivered_count;

        return $this;
    }

    /**
     * Gets failed_count
     *
     * @return int
     */
    public function getFailedCount()
    {
        return $this->container['failed_count'];
    }

    /**
     * Sets failed_count
     *
     * @param int $failed_count Denotes the number of SMSes that have failed to deliver
     *
     * @return self
     */
    public function setFailedCount($failed_count)
    {
        if (is_null($failed_count)) {
            throw new \InvalidArgumentException('non-nullable failed_count cannot be null');
        }

        if (($failed_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $failed_count when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['failed_count'] = $failed_count;

        return $this;
    }

    /**
     * Gets undelivered_count
     *
     * @return int
     */
    public function getUndeliveredCount()
    {
        return $this->container['undelivered_count'];
    }

    /**
     * Sets undelivered_count
     *
     * @param int $undelivered_count Denotes the number of SMSes that were undelivered
     *
     * @return self
     */
    public function setUndeliveredCount($undelivered_count)
    {
        if (is_null($undelivered_count)) {
            throw new \InvalidArgumentException('non-nullable undelivered_count cannot be null');
        }

        if (($undelivered_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $undelivered_count when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['undelivered_count'] = $undelivered_count;

        return $this;
    }

    /**
     * Gets viewed_count
     *
     * @return int
     */
    public function getViewedCount()
    {
        return $this->container['viewed_count'];
    }

    /**
     * Sets viewed_count
     *
     * @param int $viewed_count Denotes the count of SMSes viewed (by clicking on the link sent as part of the SMS)
     *
     * @return self
     */
    public function setViewedCount($viewed_count)
    {
        if (is_null($viewed_count)) {
            throw new \InvalidArgumentException('non-nullable viewed_count cannot be null');
        }

        if (($viewed_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $viewed_count when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['viewed_count'] = $viewed_count;

        return $this;
    }

    /**
     * Gets redemptions_count
     *
     * @return int
     */
    public function getRedemptionsCount()
    {
        return $this->container['redemptions_count'];
    }

    /**
     * Sets redemptions_count
     *
     * @param int $redemptions_count Denotes the count of redemptions
     *
     * @return self
     */
    public function setRedemptionsCount($redemptions_count)
    {
        if (is_null($redemptions_count)) {
            throw new \InvalidArgumentException('non-nullable redemptions_count cannot be null');
        }

        if (($redemptions_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $redemptions_count when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['redemptions_count'] = $redemptions_count;

        return $this;
    }

    /**
     * Gets value_claimed
     *
     * @return int
     */
    public function getValueClaimed()
    {
        return $this->container['value_claimed'];
    }

    /**
     * Sets value_claimed
     *
     * @param int $value_claimed Denotes the total value claimed as discounts (in cents)
     *
     * @return self
     */
    public function setValueClaimed($value_claimed)
    {
        if (is_null($value_claimed)) {
            throw new \InvalidArgumentException('non-nullable value_claimed cannot be null');
        }

        if (($value_claimed < 0)) {
            throw new \InvalidArgumentException('invalid value for $value_claimed when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['value_claimed'] = $value_claimed;

        return $this;
    }

    /**
     * Gets revenue_generated
     *
     * @return int
     */
    public function getRevenueGenerated()
    {
        return $this->container['revenue_generated'];
    }

    /**
     * Sets revenue_generated
     *
     * @param int $revenue_generated Denotes the total revenue generated for the business by using various payment objects (in cents)
     *
     * @return self
     */
    public function setRevenueGenerated($revenue_generated)
    {
        if (is_null($revenue_generated)) {
            throw new \InvalidArgumentException('non-nullable revenue_generated cannot be null');
        }

        if (($revenue_generated < 0)) {
            throw new \InvalidArgumentException('invalid value for $revenue_generated when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['revenue_generated'] = $revenue_generated;

        return $this;
    }

    /**
     * Gets refunds_count
     *
     * @return int
     */
    public function getRefundsCount()
    {
        return $this->container['refunds_count'];
    }

    /**
     * Sets refunds_count
     *
     * @param int $refunds_count Denotes the count of refunds
     *
     * @return self
     */
    public function setRefundsCount($refunds_count)
    {
        if (is_null($refunds_count)) {
            throw new \InvalidArgumentException('non-nullable refunds_count cannot be null');
        }

        if (($refunds_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $refunds_count when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['refunds_count'] = $refunds_count;

        return $this;
    }

    /**
     * Gets value_refunded
     *
     * @return int
     */
    public function getValueRefunded()
    {
        return $this->container['value_refunded'];
    }

    /**
     * Sets value_refunded
     *
     * @param int $value_refunded Denotes the total value refunded (in the form of discounts, in cents)
     *
     * @return self
     */
    public function setValueRefunded($value_refunded)
    {
        if (is_null($value_refunded)) {
            throw new \InvalidArgumentException('non-nullable value_refunded cannot be null');
        }

        if (($value_refunded < 0)) {
            throw new \InvalidArgumentException('invalid value for $value_refunded when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['value_refunded'] = $value_refunded;

        return $this;
    }

    /**
     * Gets revenue_lost
     *
     * @return int
     */
    public function getRevenueLost()
    {
        return $this->container['revenue_lost'];
    }

    /**
     * Sets revenue_lost
     *
     * @param int $revenue_lost Denotes the total revenue lost for the business on account of refunds (in cents)
     *
     * @return self
     */
    public function setRevenueLost($revenue_lost)
    {
        if (is_null($revenue_lost)) {
            throw new \InvalidArgumentException('non-nullable revenue_lost cannot be null');
        }

        if (($revenue_lost < 0)) {
            throw new \InvalidArgumentException('invalid value for $revenue_lost when calling ReachPerformanceStats., must be bigger than or equal to 0.');
        }

        $this->container['revenue_lost'] = $revenue_lost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


