<?php
/**
 * PhoneNumber
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PhoneNumber Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PhoneNumber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PhoneNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message_footer' => 'string',
        'help_response' => 'string',
        'stop_response' => 'string',
        'company_name' => 'string',
        'privacy_policy_url' => 'string',
        'terms_of_service_url' => 'string',
        'help_desk_keyword' => 'string',
        'help_desk_queue_response' => 'string',
        'is_connected_to_watson' => 'bool',
        'watson_conversation_workplace_id' => 'string',
        'watson_username' => 'string',
        'watson_password' => 'string',
        'mobile_number' => 'string',
        'is_short_code' => 'bool',
        'twilio_sid' => 'string',
        'twilio_account_sid' => 'string',
        'id' => '\OpenAPI\Client\Model\WTWalletPageViewId',
        'merchant_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'is_active' => 'bool',
        'is_approved' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message_footer' => null,
        'help_response' => null,
        'stop_response' => null,
        'company_name' => null,
        'privacy_policy_url' => null,
        'terms_of_service_url' => null,
        'help_desk_keyword' => null,
        'help_desk_queue_response' => null,
        'is_connected_to_watson' => null,
        'watson_conversation_workplace_id' => null,
        'watson_username' => null,
        'watson_password' => null,
        'mobile_number' => null,
        'is_short_code' => null,
        'twilio_sid' => null,
        'twilio_account_sid' => null,
        'id' => null,
        'merchant_id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'is_active' => null,
        'is_approved' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'message_footer' => false,
        'help_response' => false,
        'stop_response' => false,
        'company_name' => false,
        'privacy_policy_url' => false,
        'terms_of_service_url' => false,
        'help_desk_keyword' => false,
        'help_desk_queue_response' => false,
        'is_connected_to_watson' => false,
        'watson_conversation_workplace_id' => false,
        'watson_username' => false,
        'watson_password' => false,
        'mobile_number' => false,
        'is_short_code' => false,
        'twilio_sid' => false,
        'twilio_account_sid' => false,
        'id' => false,
        'merchant_id' => false,
        'created_at' => false,
        'updated_at' => false,
        'is_active' => false,
        'is_approved' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_footer' => 'messageFooter',
        'help_response' => 'helpResponse',
        'stop_response' => 'stopResponse',
        'company_name' => 'companyName',
        'privacy_policy_url' => 'privacyPolicyURL',
        'terms_of_service_url' => 'termsOfServiceURL',
        'help_desk_keyword' => 'helpDeskKeyword',
        'help_desk_queue_response' => 'helpDeskQueueResponse',
        'is_connected_to_watson' => 'isConnectedToWatson',
        'watson_conversation_workplace_id' => 'watsonConversationWorkplaceID',
        'watson_username' => 'watsonUsername',
        'watson_password' => 'watsonPassword',
        'mobile_number' => 'mobileNumber',
        'is_short_code' => 'isShortCode',
        'twilio_sid' => 'twilioSID',
        'twilio_account_sid' => 'twilioAccountSID',
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'is_active' => 'isActive',
        'is_approved' => 'isApproved'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_footer' => 'setMessageFooter',
        'help_response' => 'setHelpResponse',
        'stop_response' => 'setStopResponse',
        'company_name' => 'setCompanyName',
        'privacy_policy_url' => 'setPrivacyPolicyUrl',
        'terms_of_service_url' => 'setTermsOfServiceUrl',
        'help_desk_keyword' => 'setHelpDeskKeyword',
        'help_desk_queue_response' => 'setHelpDeskQueueResponse',
        'is_connected_to_watson' => 'setIsConnectedToWatson',
        'watson_conversation_workplace_id' => 'setWatsonConversationWorkplaceId',
        'watson_username' => 'setWatsonUsername',
        'watson_password' => 'setWatsonPassword',
        'mobile_number' => 'setMobileNumber',
        'is_short_code' => 'setIsShortCode',
        'twilio_sid' => 'setTwilioSid',
        'twilio_account_sid' => 'setTwilioAccountSid',
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'is_active' => 'setIsActive',
        'is_approved' => 'setIsApproved'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_footer' => 'getMessageFooter',
        'help_response' => 'getHelpResponse',
        'stop_response' => 'getStopResponse',
        'company_name' => 'getCompanyName',
        'privacy_policy_url' => 'getPrivacyPolicyUrl',
        'terms_of_service_url' => 'getTermsOfServiceUrl',
        'help_desk_keyword' => 'getHelpDeskKeyword',
        'help_desk_queue_response' => 'getHelpDeskQueueResponse',
        'is_connected_to_watson' => 'getIsConnectedToWatson',
        'watson_conversation_workplace_id' => 'getWatsonConversationWorkplaceId',
        'watson_username' => 'getWatsonUsername',
        'watson_password' => 'getWatsonPassword',
        'mobile_number' => 'getMobileNumber',
        'is_short_code' => 'getIsShortCode',
        'twilio_sid' => 'getTwilioSid',
        'twilio_account_sid' => 'getTwilioAccountSid',
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'is_active' => 'getIsActive',
        'is_approved' => 'getIsApproved'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('message_footer', $data ?? [], null);
        $this->setIfExists('help_response', $data ?? [], null);
        $this->setIfExists('stop_response', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('privacy_policy_url', $data ?? [], null);
        $this->setIfExists('terms_of_service_url', $data ?? [], null);
        $this->setIfExists('help_desk_keyword', $data ?? [], null);
        $this->setIfExists('help_desk_queue_response', $data ?? [], null);
        $this->setIfExists('is_connected_to_watson', $data ?? [], null);
        $this->setIfExists('watson_conversation_workplace_id', $data ?? [], null);
        $this->setIfExists('watson_username', $data ?? [], null);
        $this->setIfExists('watson_password', $data ?? [], null);
        $this->setIfExists('mobile_number', $data ?? [], null);
        $this->setIfExists('is_short_code', $data ?? [], null);
        $this->setIfExists('twilio_sid', $data ?? [], null);
        $this->setIfExists('twilio_account_sid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('is_approved', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['message_footer'] === null) {
            $invalidProperties[] = "'message_footer' can't be null";
        }
        if ((mb_strlen($this->container['message_footer']) < 1)) {
            $invalidProperties[] = "invalid value for 'message_footer', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['help_response'] === null) {
            $invalidProperties[] = "'help_response' can't be null";
        }
        if ($this->container['stop_response'] === null) {
            $invalidProperties[] = "'stop_response' can't be null";
        }
        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ((mb_strlen($this->container['company_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['privacy_policy_url'] === null) {
            $invalidProperties[] = "'privacy_policy_url' can't be null";
        }
        if ($this->container['terms_of_service_url'] === null) {
            $invalidProperties[] = "'terms_of_service_url' can't be null";
        }
        if ($this->container['help_desk_keyword'] === null) {
            $invalidProperties[] = "'help_desk_keyword' can't be null";
        }
        if ($this->container['help_desk_queue_response'] === null) {
            $invalidProperties[] = "'help_desk_queue_response' can't be null";
        }
        if ($this->container['is_connected_to_watson'] === null) {
            $invalidProperties[] = "'is_connected_to_watson' can't be null";
        }
        if ($this->container['watson_conversation_workplace_id'] === null) {
            $invalidProperties[] = "'watson_conversation_workplace_id' can't be null";
        }
        if ($this->container['watson_username'] === null) {
            $invalidProperties[] = "'watson_username' can't be null";
        }
        if ($this->container['watson_password'] === null) {
            $invalidProperties[] = "'watson_password' can't be null";
        }
        if ($this->container['mobile_number'] === null) {
            $invalidProperties[] = "'mobile_number' can't be null";
        }
        if ($this->container['is_short_code'] === null) {
            $invalidProperties[] = "'is_short_code' can't be null";
        }
        if ($this->container['twilio_sid'] === null) {
            $invalidProperties[] = "'twilio_sid' can't be null";
        }
        if ($this->container['twilio_account_sid'] === null) {
            $invalidProperties[] = "'twilio_account_sid' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ((mb_strlen($this->container['merchant_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['merchant_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['merchant_id'])) {
            $invalidProperties[] = "invalid value for 'merchant_id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['is_approved'] === null) {
            $invalidProperties[] = "'is_approved' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_footer
     *
     * @return string
     */
    public function getMessageFooter()
    {
        return $this->container['message_footer'];
    }

    /**
     * Sets message_footer
     *
     * @param string $message_footer message_footer
     *
     * @return self
     */
    public function setMessageFooter($message_footer)
    {
        if (is_null($message_footer)) {
            throw new \InvalidArgumentException('non-nullable message_footer cannot be null');
        }

        if ((mb_strlen($message_footer) < 1)) {
            throw new \InvalidArgumentException('invalid length for $message_footer when calling PhoneNumber., must be bigger than or equal to 1.');
        }

        $this->container['message_footer'] = $message_footer;

        return $this;
    }

    /**
     * Gets help_response
     *
     * @return string
     */
    public function getHelpResponse()
    {
        return $this->container['help_response'];
    }

    /**
     * Sets help_response
     *
     * @param string $help_response help_response
     *
     * @return self
     */
    public function setHelpResponse($help_response)
    {
        if (is_null($help_response)) {
            throw new \InvalidArgumentException('non-nullable help_response cannot be null');
        }
        $this->container['help_response'] = $help_response;

        return $this;
    }

    /**
     * Gets stop_response
     *
     * @return string
     */
    public function getStopResponse()
    {
        return $this->container['stop_response'];
    }

    /**
     * Sets stop_response
     *
     * @param string $stop_response stop_response
     *
     * @return self
     */
    public function setStopResponse($stop_response)
    {
        if (is_null($stop_response)) {
            throw new \InvalidArgumentException('non-nullable stop_response cannot be null');
        }
        $this->container['stop_response'] = $stop_response;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }

        if ((mb_strlen($company_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling PhoneNumber., must be bigger than or equal to 1.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets privacy_policy_url
     *
     * @return string
     */
    public function getPrivacyPolicyUrl()
    {
        return $this->container['privacy_policy_url'];
    }

    /**
     * Sets privacy_policy_url
     *
     * @param string $privacy_policy_url privacy_policy_url
     *
     * @return self
     */
    public function setPrivacyPolicyUrl($privacy_policy_url)
    {
        if (is_null($privacy_policy_url)) {
            throw new \InvalidArgumentException('non-nullable privacy_policy_url cannot be null');
        }
        $this->container['privacy_policy_url'] = $privacy_policy_url;

        return $this;
    }

    /**
     * Gets terms_of_service_url
     *
     * @return string
     */
    public function getTermsOfServiceUrl()
    {
        return $this->container['terms_of_service_url'];
    }

    /**
     * Sets terms_of_service_url
     *
     * @param string $terms_of_service_url terms_of_service_url
     *
     * @return self
     */
    public function setTermsOfServiceUrl($terms_of_service_url)
    {
        if (is_null($terms_of_service_url)) {
            throw new \InvalidArgumentException('non-nullable terms_of_service_url cannot be null');
        }
        $this->container['terms_of_service_url'] = $terms_of_service_url;

        return $this;
    }

    /**
     * Gets help_desk_keyword
     *
     * @return string
     */
    public function getHelpDeskKeyword()
    {
        return $this->container['help_desk_keyword'];
    }

    /**
     * Sets help_desk_keyword
     *
     * @param string $help_desk_keyword help_desk_keyword
     *
     * @return self
     */
    public function setHelpDeskKeyword($help_desk_keyword)
    {
        if (is_null($help_desk_keyword)) {
            throw new \InvalidArgumentException('non-nullable help_desk_keyword cannot be null');
        }
        $this->container['help_desk_keyword'] = $help_desk_keyword;

        return $this;
    }

    /**
     * Gets help_desk_queue_response
     *
     * @return string
     */
    public function getHelpDeskQueueResponse()
    {
        return $this->container['help_desk_queue_response'];
    }

    /**
     * Sets help_desk_queue_response
     *
     * @param string $help_desk_queue_response help_desk_queue_response
     *
     * @return self
     */
    public function setHelpDeskQueueResponse($help_desk_queue_response)
    {
        if (is_null($help_desk_queue_response)) {
            throw new \InvalidArgumentException('non-nullable help_desk_queue_response cannot be null');
        }
        $this->container['help_desk_queue_response'] = $help_desk_queue_response;

        return $this;
    }

    /**
     * Gets is_connected_to_watson
     *
     * @return bool
     */
    public function getIsConnectedToWatson()
    {
        return $this->container['is_connected_to_watson'];
    }

    /**
     * Sets is_connected_to_watson
     *
     * @param bool $is_connected_to_watson is_connected_to_watson
     *
     * @return self
     */
    public function setIsConnectedToWatson($is_connected_to_watson)
    {
        if (is_null($is_connected_to_watson)) {
            throw new \InvalidArgumentException('non-nullable is_connected_to_watson cannot be null');
        }
        $this->container['is_connected_to_watson'] = $is_connected_to_watson;

        return $this;
    }

    /**
     * Gets watson_conversation_workplace_id
     *
     * @return string
     */
    public function getWatsonConversationWorkplaceId()
    {
        return $this->container['watson_conversation_workplace_id'];
    }

    /**
     * Sets watson_conversation_workplace_id
     *
     * @param string $watson_conversation_workplace_id watson_conversation_workplace_id
     *
     * @return self
     */
    public function setWatsonConversationWorkplaceId($watson_conversation_workplace_id)
    {
        if (is_null($watson_conversation_workplace_id)) {
            throw new \InvalidArgumentException('non-nullable watson_conversation_workplace_id cannot be null');
        }
        $this->container['watson_conversation_workplace_id'] = $watson_conversation_workplace_id;

        return $this;
    }

    /**
     * Gets watson_username
     *
     * @return string
     */
    public function getWatsonUsername()
    {
        return $this->container['watson_username'];
    }

    /**
     * Sets watson_username
     *
     * @param string $watson_username watson_username
     *
     * @return self
     */
    public function setWatsonUsername($watson_username)
    {
        if (is_null($watson_username)) {
            throw new \InvalidArgumentException('non-nullable watson_username cannot be null');
        }
        $this->container['watson_username'] = $watson_username;

        return $this;
    }

    /**
     * Gets watson_password
     *
     * @return string
     */
    public function getWatsonPassword()
    {
        return $this->container['watson_password'];
    }

    /**
     * Sets watson_password
     *
     * @param string $watson_password watson_password
     *
     * @return self
     */
    public function setWatsonPassword($watson_password)
    {
        if (is_null($watson_password)) {
            throw new \InvalidArgumentException('non-nullable watson_password cannot be null');
        }
        $this->container['watson_password'] = $watson_password;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string $mobile_number mobile_number
     *
     * @return self
     */
    public function setMobileNumber($mobile_number)
    {
        if (is_null($mobile_number)) {
            throw new \InvalidArgumentException('non-nullable mobile_number cannot be null');
        }
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets is_short_code
     *
     * @return bool
     */
    public function getIsShortCode()
    {
        return $this->container['is_short_code'];
    }

    /**
     * Sets is_short_code
     *
     * @param bool $is_short_code is_short_code
     *
     * @return self
     */
    public function setIsShortCode($is_short_code)
    {
        if (is_null($is_short_code)) {
            throw new \InvalidArgumentException('non-nullable is_short_code cannot be null');
        }
        $this->container['is_short_code'] = $is_short_code;

        return $this;
    }

    /**
     * Gets twilio_sid
     *
     * @return string
     */
    public function getTwilioSid()
    {
        return $this->container['twilio_sid'];
    }

    /**
     * Sets twilio_sid
     *
     * @param string $twilio_sid twilio_sid
     *
     * @return self
     */
    public function setTwilioSid($twilio_sid)
    {
        if (is_null($twilio_sid)) {
            throw new \InvalidArgumentException('non-nullable twilio_sid cannot be null');
        }
        $this->container['twilio_sid'] = $twilio_sid;

        return $this;
    }

    /**
     * Gets twilio_account_sid
     *
     * @return string
     */
    public function getTwilioAccountSid()
    {
        return $this->container['twilio_account_sid'];
    }

    /**
     * Sets twilio_account_sid
     *
     * @param string $twilio_account_sid twilio_account_sid
     *
     * @return self
     */
    public function setTwilioAccountSid($twilio_account_sid)
    {
        if (is_null($twilio_account_sid)) {
            throw new \InvalidArgumentException('non-nullable twilio_account_sid cannot be null');
        }
        $this->container['twilio_account_sid'] = $twilio_account_sid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \OpenAPI\Client\Model\WTWalletPageViewId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \OpenAPI\Client\Model\WTWalletPageViewId $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        if ((mb_strlen($merchant_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling PhoneNumber., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($merchant_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling PhoneNumber., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($merchant_id)))) {
            throw new \InvalidArgumentException("invalid value for \$merchant_id when calling PhoneNumber., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_approved
     *
     * @return bool
     */
    public function getIsApproved()
    {
        return $this->container['is_approved'];
    }

    /**
     * Sets is_approved
     *
     * @param bool $is_approved is_approved
     *
     * @return self
     */
    public function setIsApproved($is_approved)
    {
        if (is_null($is_approved)) {
            throw new \InvalidArgumentException('non-nullable is_approved cannot be null');
        }
        $this->container['is_approved'] = $is_approved;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


