<?php
/**
 * WalletPageView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WalletPageView Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WalletPageView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WalletPageView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ip' => 'string',
        'wallet_object_id' => 'string',
        'wallet_object_prefix' => 'string',
        'parent_object_id' => 'string',
        'parent_object_prefix' => 'string',
        'session_id' => 'string',
        'navigator_agent' => 'string',
        'browser_name' => 'string',
        'browser_version' => 'string',
        'engine_name' => 'string',
        'engine_version' => 'string',
        'o_s_name' => 'string',
        'o_s_version' => 'string',
        'is_mobile' => 'bool',
        'device_vendor' => 'string',
        'device_model' => 'string',
        'device_type' => 'string',
        'phone_verification_token' => 'string',
        'referring_domain' => 'string',
        'referrer' => 'string',
        'id' => '\OpenAPI\Client\Model\WTWalletPageViewId',
        'status' => 'string',
        'country' => 'string',
        'country_code' => 'string',
        'region' => 'string',
        'region_name' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'timezone' => 'string',
        'isp' => 'string',
        'org' => 'string',
        'asn' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'merchant_id' => 'string',
        'is_active' => 'bool',
        'geo_point' => '\OpenAPI\Client\Model\WTWalletPageViewGeoPoint'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ip' => null,
        'wallet_object_id' => null,
        'wallet_object_prefix' => null,
        'parent_object_id' => null,
        'parent_object_prefix' => null,
        'session_id' => null,
        'navigator_agent' => null,
        'browser_name' => null,
        'browser_version' => null,
        'engine_name' => null,
        'engine_version' => null,
        'o_s_name' => null,
        'o_s_version' => null,
        'is_mobile' => null,
        'device_vendor' => null,
        'device_model' => null,
        'device_type' => null,
        'phone_verification_token' => null,
        'referring_domain' => null,
        'referrer' => null,
        'id' => null,
        'status' => null,
        'country' => null,
        'country_code' => null,
        'region' => null,
        'region_name' => null,
        'city' => null,
        'zip' => null,
        'latitude' => 'double',
        'longitude' => 'double',
        'timezone' => null,
        'isp' => null,
        'org' => null,
        'asn' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'merchant_id' => null,
        'is_active' => null,
        'geo_point' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ip' => false,
        'wallet_object_id' => false,
        'wallet_object_prefix' => false,
        'parent_object_id' => false,
        'parent_object_prefix' => false,
        'session_id' => false,
        'navigator_agent' => false,
        'browser_name' => false,
        'browser_version' => false,
        'engine_name' => false,
        'engine_version' => false,
        'o_s_name' => false,
        'o_s_version' => false,
        'is_mobile' => false,
        'device_vendor' => false,
        'device_model' => false,
        'device_type' => false,
        'phone_verification_token' => false,
        'referring_domain' => false,
        'referrer' => false,
        'id' => false,
        'status' => false,
        'country' => false,
        'country_code' => false,
        'region' => false,
        'region_name' => false,
        'city' => false,
        'zip' => false,
        'latitude' => false,
        'longitude' => false,
        'timezone' => false,
        'isp' => false,
        'org' => false,
        'asn' => false,
        'created_at' => false,
        'updated_at' => false,
        'merchant_id' => false,
        'is_active' => false,
        'geo_point' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip' => 'ip',
        'wallet_object_id' => 'walletObjectID',
        'wallet_object_prefix' => 'walletObjectPrefix',
        'parent_object_id' => 'parentObjectID',
        'parent_object_prefix' => 'parentObjectPrefix',
        'session_id' => 'sessionID',
        'navigator_agent' => 'navigatorAgent',
        'browser_name' => 'browserName',
        'browser_version' => 'browserVersion',
        'engine_name' => 'engineName',
        'engine_version' => 'engineVersion',
        'o_s_name' => 'oSName',
        'o_s_version' => 'oSVersion',
        'is_mobile' => 'isMobile',
        'device_vendor' => 'deviceVendor',
        'device_model' => 'deviceModel',
        'device_type' => 'deviceType',
        'phone_verification_token' => 'phoneVerificationToken',
        'referring_domain' => 'referringDomain',
        'referrer' => 'referrer',
        'id' => 'id',
        'status' => 'status',
        'country' => 'country',
        'country_code' => 'countryCode',
        'region' => 'region',
        'region_name' => 'regionName',
        'city' => 'city',
        'zip' => 'zip',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'timezone' => 'timezone',
        'isp' => 'isp',
        'org' => 'org',
        'asn' => 'asn',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'merchant_id' => 'merchantID',
        'is_active' => 'isActive',
        'geo_point' => 'geoPoint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip' => 'setIp',
        'wallet_object_id' => 'setWalletObjectId',
        'wallet_object_prefix' => 'setWalletObjectPrefix',
        'parent_object_id' => 'setParentObjectId',
        'parent_object_prefix' => 'setParentObjectPrefix',
        'session_id' => 'setSessionId',
        'navigator_agent' => 'setNavigatorAgent',
        'browser_name' => 'setBrowserName',
        'browser_version' => 'setBrowserVersion',
        'engine_name' => 'setEngineName',
        'engine_version' => 'setEngineVersion',
        'o_s_name' => 'setOSName',
        'o_s_version' => 'setOSVersion',
        'is_mobile' => 'setIsMobile',
        'device_vendor' => 'setDeviceVendor',
        'device_model' => 'setDeviceModel',
        'device_type' => 'setDeviceType',
        'phone_verification_token' => 'setPhoneVerificationToken',
        'referring_domain' => 'setReferringDomain',
        'referrer' => 'setReferrer',
        'id' => 'setId',
        'status' => 'setStatus',
        'country' => 'setCountry',
        'country_code' => 'setCountryCode',
        'region' => 'setRegion',
        'region_name' => 'setRegionName',
        'city' => 'setCity',
        'zip' => 'setZip',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'timezone' => 'setTimezone',
        'isp' => 'setIsp',
        'org' => 'setOrg',
        'asn' => 'setAsn',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'merchant_id' => 'setMerchantId',
        'is_active' => 'setIsActive',
        'geo_point' => 'setGeoPoint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip' => 'getIp',
        'wallet_object_id' => 'getWalletObjectId',
        'wallet_object_prefix' => 'getWalletObjectPrefix',
        'parent_object_id' => 'getParentObjectId',
        'parent_object_prefix' => 'getParentObjectPrefix',
        'session_id' => 'getSessionId',
        'navigator_agent' => 'getNavigatorAgent',
        'browser_name' => 'getBrowserName',
        'browser_version' => 'getBrowserVersion',
        'engine_name' => 'getEngineName',
        'engine_version' => 'getEngineVersion',
        'o_s_name' => 'getOSName',
        'o_s_version' => 'getOSVersion',
        'is_mobile' => 'getIsMobile',
        'device_vendor' => 'getDeviceVendor',
        'device_model' => 'getDeviceModel',
        'device_type' => 'getDeviceType',
        'phone_verification_token' => 'getPhoneVerificationToken',
        'referring_domain' => 'getReferringDomain',
        'referrer' => 'getReferrer',
        'id' => 'getId',
        'status' => 'getStatus',
        'country' => 'getCountry',
        'country_code' => 'getCountryCode',
        'region' => 'getRegion',
        'region_name' => 'getRegionName',
        'city' => 'getCity',
        'zip' => 'getZip',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'timezone' => 'getTimezone',
        'isp' => 'getIsp',
        'org' => 'getOrg',
        'asn' => 'getAsn',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'merchant_id' => 'getMerchantId',
        'is_active' => 'getIsActive',
        'geo_point' => 'getGeoPoint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('wallet_object_id', $data ?? [], null);
        $this->setIfExists('wallet_object_prefix', $data ?? [], null);
        $this->setIfExists('parent_object_id', $data ?? [], null);
        $this->setIfExists('parent_object_prefix', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('navigator_agent', $data ?? [], null);
        $this->setIfExists('browser_name', $data ?? [], null);
        $this->setIfExists('browser_version', $data ?? [], null);
        $this->setIfExists('engine_name', $data ?? [], null);
        $this->setIfExists('engine_version', $data ?? [], null);
        $this->setIfExists('o_s_name', $data ?? [], null);
        $this->setIfExists('o_s_version', $data ?? [], null);
        $this->setIfExists('is_mobile', $data ?? [], null);
        $this->setIfExists('device_vendor', $data ?? [], null);
        $this->setIfExists('device_model', $data ?? [], null);
        $this->setIfExists('device_type', $data ?? [], null);
        $this->setIfExists('phone_verification_token', $data ?? [], null);
        $this->setIfExists('referring_domain', $data ?? [], null);
        $this->setIfExists('referrer', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('region_name', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('isp', $data ?? [], null);
        $this->setIfExists('org', $data ?? [], null);
        $this->setIfExists('asn', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('geo_point', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ip'] === null) {
            $invalidProperties[] = "'ip' can't be null";
        }
        if ($this->container['wallet_object_id'] === null) {
            $invalidProperties[] = "'wallet_object_id' can't be null";
        }
        if ($this->container['wallet_object_prefix'] === null) {
            $invalidProperties[] = "'wallet_object_prefix' can't be null";
        }
        if ($this->container['parent_object_id'] === null) {
            $invalidProperties[] = "'parent_object_id' can't be null";
        }
        if ($this->container['parent_object_prefix'] === null) {
            $invalidProperties[] = "'parent_object_prefix' can't be null";
        }
        if ($this->container['session_id'] === null) {
            $invalidProperties[] = "'session_id' can't be null";
        }
        if ($this->container['navigator_agent'] === null) {
            $invalidProperties[] = "'navigator_agent' can't be null";
        }
        if ($this->container['browser_name'] === null) {
            $invalidProperties[] = "'browser_name' can't be null";
        }
        if ($this->container['browser_version'] === null) {
            $invalidProperties[] = "'browser_version' can't be null";
        }
        if ($this->container['engine_name'] === null) {
            $invalidProperties[] = "'engine_name' can't be null";
        }
        if ($this->container['engine_version'] === null) {
            $invalidProperties[] = "'engine_version' can't be null";
        }
        if ($this->container['o_s_name'] === null) {
            $invalidProperties[] = "'o_s_name' can't be null";
        }
        if ($this->container['o_s_version'] === null) {
            $invalidProperties[] = "'o_s_version' can't be null";
        }
        if ($this->container['is_mobile'] === null) {
            $invalidProperties[] = "'is_mobile' can't be null";
        }
        if ($this->container['device_vendor'] === null) {
            $invalidProperties[] = "'device_vendor' can't be null";
        }
        if ($this->container['device_model'] === null) {
            $invalidProperties[] = "'device_model' can't be null";
        }
        if ($this->container['device_type'] === null) {
            $invalidProperties[] = "'device_type' can't be null";
        }
        if ($this->container['phone_verification_token'] === null) {
            $invalidProperties[] = "'phone_verification_token' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        if ($this->container['region_name'] === null) {
            $invalidProperties[] = "'region_name' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['isp'] === null) {
            $invalidProperties[] = "'isp' can't be null";
        }
        if ($this->container['org'] === null) {
            $invalidProperties[] = "'org' can't be null";
        }
        if ($this->container['asn'] === null) {
            $invalidProperties[] = "'asn' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ((mb_strlen($this->container['merchant_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['merchant_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['merchant_id'])) {
            $invalidProperties[] = "invalid value for 'merchant_id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['geo_point'] === null) {
            $invalidProperties[] = "'geo_point' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets wallet_object_id
     *
     * @return string
     */
    public function getWalletObjectId()
    {
        return $this->container['wallet_object_id'];
    }

    /**
     * Sets wallet_object_id
     *
     * @param string $wallet_object_id wallet_object_id
     *
     * @return self
     */
    public function setWalletObjectId($wallet_object_id)
    {
        if (is_null($wallet_object_id)) {
            throw new \InvalidArgumentException('non-nullable wallet_object_id cannot be null');
        }
        $this->container['wallet_object_id'] = $wallet_object_id;

        return $this;
    }

    /**
     * Gets wallet_object_prefix
     *
     * @return string
     */
    public function getWalletObjectPrefix()
    {
        return $this->container['wallet_object_prefix'];
    }

    /**
     * Sets wallet_object_prefix
     *
     * @param string $wallet_object_prefix wallet_object_prefix
     *
     * @return self
     */
    public function setWalletObjectPrefix($wallet_object_prefix)
    {
        if (is_null($wallet_object_prefix)) {
            throw new \InvalidArgumentException('non-nullable wallet_object_prefix cannot be null');
        }
        $this->container['wallet_object_prefix'] = $wallet_object_prefix;

        return $this;
    }

    /**
     * Gets parent_object_id
     *
     * @return string
     */
    public function getParentObjectId()
    {
        return $this->container['parent_object_id'];
    }

    /**
     * Sets parent_object_id
     *
     * @param string $parent_object_id parent_object_id
     *
     * @return self
     */
    public function setParentObjectId($parent_object_id)
    {
        if (is_null($parent_object_id)) {
            throw new \InvalidArgumentException('non-nullable parent_object_id cannot be null');
        }
        $this->container['parent_object_id'] = $parent_object_id;

        return $this;
    }

    /**
     * Gets parent_object_prefix
     *
     * @return string
     */
    public function getParentObjectPrefix()
    {
        return $this->container['parent_object_prefix'];
    }

    /**
     * Sets parent_object_prefix
     *
     * @param string $parent_object_prefix parent_object_prefix
     *
     * @return self
     */
    public function setParentObjectPrefix($parent_object_prefix)
    {
        if (is_null($parent_object_prefix)) {
            throw new \InvalidArgumentException('non-nullable parent_object_prefix cannot be null');
        }
        $this->container['parent_object_prefix'] = $parent_object_prefix;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets navigator_agent
     *
     * @return string
     */
    public function getNavigatorAgent()
    {
        return $this->container['navigator_agent'];
    }

    /**
     * Sets navigator_agent
     *
     * @param string $navigator_agent navigator_agent
     *
     * @return self
     */
    public function setNavigatorAgent($navigator_agent)
    {
        if (is_null($navigator_agent)) {
            throw new \InvalidArgumentException('non-nullable navigator_agent cannot be null');
        }
        $this->container['navigator_agent'] = $navigator_agent;

        return $this;
    }

    /**
     * Gets browser_name
     *
     * @return string
     */
    public function getBrowserName()
    {
        return $this->container['browser_name'];
    }

    /**
     * Sets browser_name
     *
     * @param string $browser_name browser_name
     *
     * @return self
     */
    public function setBrowserName($browser_name)
    {
        if (is_null($browser_name)) {
            throw new \InvalidArgumentException('non-nullable browser_name cannot be null');
        }
        $this->container['browser_name'] = $browser_name;

        return $this;
    }

    /**
     * Gets browser_version
     *
     * @return string
     */
    public function getBrowserVersion()
    {
        return $this->container['browser_version'];
    }

    /**
     * Sets browser_version
     *
     * @param string $browser_version browser_version
     *
     * @return self
     */
    public function setBrowserVersion($browser_version)
    {
        if (is_null($browser_version)) {
            throw new \InvalidArgumentException('non-nullable browser_version cannot be null');
        }
        $this->container['browser_version'] = $browser_version;

        return $this;
    }

    /**
     * Gets engine_name
     *
     * @return string
     */
    public function getEngineName()
    {
        return $this->container['engine_name'];
    }

    /**
     * Sets engine_name
     *
     * @param string $engine_name engine_name
     *
     * @return self
     */
    public function setEngineName($engine_name)
    {
        if (is_null($engine_name)) {
            throw new \InvalidArgumentException('non-nullable engine_name cannot be null');
        }
        $this->container['engine_name'] = $engine_name;

        return $this;
    }

    /**
     * Gets engine_version
     *
     * @return string
     */
    public function getEngineVersion()
    {
        return $this->container['engine_version'];
    }

    /**
     * Sets engine_version
     *
     * @param string $engine_version engine_version
     *
     * @return self
     */
    public function setEngineVersion($engine_version)
    {
        if (is_null($engine_version)) {
            throw new \InvalidArgumentException('non-nullable engine_version cannot be null');
        }
        $this->container['engine_version'] = $engine_version;

        return $this;
    }

    /**
     * Gets o_s_name
     *
     * @return string
     */
    public function getOSName()
    {
        return $this->container['o_s_name'];
    }

    /**
     * Sets o_s_name
     *
     * @param string $o_s_name o_s_name
     *
     * @return self
     */
    public function setOSName($o_s_name)
    {
        if (is_null($o_s_name)) {
            throw new \InvalidArgumentException('non-nullable o_s_name cannot be null');
        }
        $this->container['o_s_name'] = $o_s_name;

        return $this;
    }

    /**
     * Gets o_s_version
     *
     * @return string
     */
    public function getOSVersion()
    {
        return $this->container['o_s_version'];
    }

    /**
     * Sets o_s_version
     *
     * @param string $o_s_version o_s_version
     *
     * @return self
     */
    public function setOSVersion($o_s_version)
    {
        if (is_null($o_s_version)) {
            throw new \InvalidArgumentException('non-nullable o_s_version cannot be null');
        }
        $this->container['o_s_version'] = $o_s_version;

        return $this;
    }

    /**
     * Gets is_mobile
     *
     * @return bool
     */
    public function getIsMobile()
    {
        return $this->container['is_mobile'];
    }

    /**
     * Sets is_mobile
     *
     * @param bool $is_mobile is_mobile
     *
     * @return self
     */
    public function setIsMobile($is_mobile)
    {
        if (is_null($is_mobile)) {
            throw new \InvalidArgumentException('non-nullable is_mobile cannot be null');
        }
        $this->container['is_mobile'] = $is_mobile;

        return $this;
    }

    /**
     * Gets device_vendor
     *
     * @return string
     */
    public function getDeviceVendor()
    {
        return $this->container['device_vendor'];
    }

    /**
     * Sets device_vendor
     *
     * @param string $device_vendor device_vendor
     *
     * @return self
     */
    public function setDeviceVendor($device_vendor)
    {
        if (is_null($device_vendor)) {
            throw new \InvalidArgumentException('non-nullable device_vendor cannot be null');
        }
        $this->container['device_vendor'] = $device_vendor;

        return $this;
    }

    /**
     * Gets device_model
     *
     * @return string
     */
    public function getDeviceModel()
    {
        return $this->container['device_model'];
    }

    /**
     * Sets device_model
     *
     * @param string $device_model device_model
     *
     * @return self
     */
    public function setDeviceModel($device_model)
    {
        if (is_null($device_model)) {
            throw new \InvalidArgumentException('non-nullable device_model cannot be null');
        }
        $this->container['device_model'] = $device_model;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string $device_type device_type
     *
     * @return self
     */
    public function setDeviceType($device_type)
    {
        if (is_null($device_type)) {
            throw new \InvalidArgumentException('non-nullable device_type cannot be null');
        }
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets phone_verification_token
     *
     * @return string
     */
    public function getPhoneVerificationToken()
    {
        return $this->container['phone_verification_token'];
    }

    /**
     * Sets phone_verification_token
     *
     * @param string $phone_verification_token phone_verification_token
     *
     * @return self
     */
    public function setPhoneVerificationToken($phone_verification_token)
    {
        if (is_null($phone_verification_token)) {
            throw new \InvalidArgumentException('non-nullable phone_verification_token cannot be null');
        }
        $this->container['phone_verification_token'] = $phone_verification_token;

        return $this;
    }

    /**
     * Gets referring_domain
     *
     * @return string|null
     */
    public function getReferringDomain()
    {
        return $this->container['referring_domain'];
    }

    /**
     * Sets referring_domain
     *
     * @param string|null $referring_domain referring_domain
     *
     * @return self
     */
    public function setReferringDomain($referring_domain)
    {
        if (is_null($referring_domain)) {
            throw new \InvalidArgumentException('non-nullable referring_domain cannot be null');
        }
        $this->container['referring_domain'] = $referring_domain;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return string|null
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param string|null $referrer referrer
     *
     * @return self
     */
    public function setReferrer($referrer)
    {
        if (is_null($referrer)) {
            throw new \InvalidArgumentException('non-nullable referrer cannot be null');
        }
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \OpenAPI\Client\Model\WTWalletPageViewId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \OpenAPI\Client\Model\WTWalletPageViewId $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets region_name
     *
     * @return string
     */
    public function getRegionName()
    {
        return $this->container['region_name'];
    }

    /**
     * Sets region_name
     *
     * @param string $region_name region_name
     *
     * @return self
     */
    public function setRegionName($region_name)
    {
        if (is_null($region_name)) {
            throw new \InvalidArgumentException('non-nullable region_name cannot be null');
        }
        $this->container['region_name'] = $region_name;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets isp
     *
     * @return string
     */
    public function getIsp()
    {
        return $this->container['isp'];
    }

    /**
     * Sets isp
     *
     * @param string $isp isp
     *
     * @return self
     */
    public function setIsp($isp)
    {
        if (is_null($isp)) {
            throw new \InvalidArgumentException('non-nullable isp cannot be null');
        }
        $this->container['isp'] = $isp;

        return $this;
    }

    /**
     * Gets org
     *
     * @return string
     */
    public function getOrg()
    {
        return $this->container['org'];
    }

    /**
     * Sets org
     *
     * @param string $org org
     *
     * @return self
     */
    public function setOrg($org)
    {
        if (is_null($org)) {
            throw new \InvalidArgumentException('non-nullable org cannot be null');
        }
        $this->container['org'] = $org;

        return $this;
    }

    /**
     * Gets asn
     *
     * @return string
     */
    public function getAsn()
    {
        return $this->container['asn'];
    }

    /**
     * Sets asn
     *
     * @param string $asn asn
     *
     * @return self
     */
    public function setAsn($asn)
    {
        if (is_null($asn)) {
            throw new \InvalidArgumentException('non-nullable asn cannot be null');
        }
        $this->container['asn'] = $asn;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        if ((mb_strlen($merchant_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling WalletPageView., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($merchant_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling WalletPageView., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($merchant_id)))) {
            throw new \InvalidArgumentException("invalid value for \$merchant_id when calling WalletPageView., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Denotes if this resource is active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets geo_point
     *
     * @return \OpenAPI\Client\Model\WTWalletPageViewGeoPoint
     */
    public function getGeoPoint()
    {
        return $this->container['geo_point'];
    }

    /**
     * Sets geo_point
     *
     * @param \OpenAPI\Client\Model\WTWalletPageViewGeoPoint $geo_point geo_point
     *
     * @return self
     */
    public function setGeoPoint($geo_point)
    {
        if (is_null($geo_point)) {
            throw new \InvalidArgumentException('non-nullable geo_point cannot be null');
        }
        $this->container['geo_point'] = $geo_point;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


