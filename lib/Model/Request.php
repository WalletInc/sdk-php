<?php
/**
 * Request
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Request Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Request implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'auth_amount' => 'float',
        'server_emp_id' => 'string',
        'module_invoked' => 'mixed',
        'cashier_emp_id' => 'string',
        'routing_id' => 'string',
        'auth_account_num' => 'float',
        'more_records_count' => 'float',
        'payment_method_id' => 'string',
        'tag_data' => 'mixed',
        'total_auth_amount' => 'float',
        'refund_flag' => 'mixed',
        'close_time' => '\DateTime',
        'client_id' => 'string',
        'change_amount' => 'float',
        'employee_id' => 'string',
        'training_mode_flag' => 'mixed',
        'source_property_id' => 'string',
        'associated_check_number' => 'string',
        'post_to_property_id' => 'string',
        'unique_posting_id' => 'string',
        'expire_date' => '\DateTime',
        'by_name_flag' => 'mixed',
        'payment_slip_id' => 'string',
        'financial_bin_detail' => 'mixed',
        'cvv2' => 'string',
        'employee_grat_tip' => 'float',
        'card_swipe_track1' => 'mixed',
        'card_swipe_track2' => 'mixed',
        'check_number' => 'string',
        'more_records_key' => 'mixed',
        'tip_amount' => 'float',
        'input_data' => 'mixed',
        'profit_center_id' => 'string',
        'invoice_number' => 'string',
        'receipt_text_image' => 'mixed',
        'brokerage_amount' => 'float',
        'amount' => 'float',
        'cover_count' => 'float',
        'more_records_flag' => 'mixed',
        'account_num' => 'string',
        'max_record_count' => 'float',
        'incremental_auth_amount' => 'float',
        'extra_data' => 'mixed',
        'check_type_id' => 'string',
        'posting_id' => 'string',
        'destination_property_id' => 'string',
        'account_detail' => 'mixed',
        'payment_amount' => 'float',
        'register_id' => 'string',
        'tndr_account_object' => 'mixed',
        'meal_period_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'auth_amount' => 'double',
        'server_emp_id' => null,
        'module_invoked' => null,
        'cashier_emp_id' => null,
        'routing_id' => null,
        'auth_account_num' => 'double',
        'more_records_count' => 'double',
        'payment_method_id' => null,
        'tag_data' => null,
        'total_auth_amount' => 'double',
        'refund_flag' => null,
        'close_time' => 'date-time',
        'client_id' => null,
        'change_amount' => 'double',
        'employee_id' => null,
        'training_mode_flag' => null,
        'source_property_id' => null,
        'associated_check_number' => null,
        'post_to_property_id' => null,
        'unique_posting_id' => null,
        'expire_date' => 'date-time',
        'by_name_flag' => null,
        'payment_slip_id' => null,
        'financial_bin_detail' => null,
        'cvv2' => null,
        'employee_grat_tip' => 'double',
        'card_swipe_track1' => null,
        'card_swipe_track2' => null,
        'check_number' => null,
        'more_records_key' => null,
        'tip_amount' => 'double',
        'input_data' => null,
        'profit_center_id' => null,
        'invoice_number' => null,
        'receipt_text_image' => null,
        'brokerage_amount' => 'double',
        'amount' => 'double',
        'cover_count' => 'double',
        'more_records_flag' => null,
        'account_num' => null,
        'max_record_count' => 'double',
        'incremental_auth_amount' => 'double',
        'extra_data' => null,
        'check_type_id' => null,
        'posting_id' => null,
        'destination_property_id' => null,
        'account_detail' => null,
        'payment_amount' => 'double',
        'register_id' => null,
        'tndr_account_object' => null,
        'meal_period_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_at' => false,
        'updated_at' => false,
        'auth_amount' => false,
        'server_emp_id' => false,
        'module_invoked' => true,
        'cashier_emp_id' => false,
        'routing_id' => false,
        'auth_account_num' => false,
        'more_records_count' => false,
        'payment_method_id' => false,
        'tag_data' => true,
        'total_auth_amount' => false,
        'refund_flag' => true,
        'close_time' => false,
        'client_id' => false,
        'change_amount' => false,
        'employee_id' => false,
        'training_mode_flag' => true,
        'source_property_id' => false,
        'associated_check_number' => false,
        'post_to_property_id' => false,
        'unique_posting_id' => false,
        'expire_date' => false,
        'by_name_flag' => true,
        'payment_slip_id' => false,
        'financial_bin_detail' => true,
        'cvv2' => false,
        'employee_grat_tip' => false,
        'card_swipe_track1' => true,
        'card_swipe_track2' => true,
        'check_number' => false,
        'more_records_key' => true,
        'tip_amount' => false,
        'input_data' => true,
        'profit_center_id' => false,
        'invoice_number' => false,
        'receipt_text_image' => true,
        'brokerage_amount' => false,
        'amount' => false,
        'cover_count' => false,
        'more_records_flag' => true,
        'account_num' => false,
        'max_record_count' => false,
        'incremental_auth_amount' => false,
        'extra_data' => true,
        'check_type_id' => false,
        'posting_id' => false,
        'destination_property_id' => false,
        'account_detail' => true,
        'payment_amount' => false,
        'register_id' => false,
        'tndr_account_object' => true,
        'meal_period_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'auth_amount' => 'authAmount',
        'server_emp_id' => 'serverEmpID',
        'module_invoked' => 'moduleInvoked',
        'cashier_emp_id' => 'cashierEmpID',
        'routing_id' => 'routingID',
        'auth_account_num' => 'authAccountNum',
        'more_records_count' => 'moreRecordsCount',
        'payment_method_id' => 'paymentMethodID',
        'tag_data' => 'tagData',
        'total_auth_amount' => 'totalAuthAmount',
        'refund_flag' => 'refundFlag',
        'close_time' => 'closeTime',
        'client_id' => 'clientID',
        'change_amount' => 'changeAmount',
        'employee_id' => 'employeeID',
        'training_mode_flag' => 'trainingModeFlag',
        'source_property_id' => 'sourcePropertyID',
        'associated_check_number' => 'associatedCheckNumber',
        'post_to_property_id' => 'postToPropertyID',
        'unique_posting_id' => 'uniquePostingID',
        'expire_date' => 'expireDate',
        'by_name_flag' => 'byNameFlag',
        'payment_slip_id' => 'paymentSlipID',
        'financial_bin_detail' => 'financialBinDetail',
        'cvv2' => 'cvv2',
        'employee_grat_tip' => 'employeeGratTip',
        'card_swipe_track1' => 'cardSwipeTrack1',
        'card_swipe_track2' => 'cardSwipeTrack2',
        'check_number' => 'checkNumber',
        'more_records_key' => 'moreRecordsKey',
        'tip_amount' => 'tipAmount',
        'input_data' => 'inputData',
        'profit_center_id' => 'profitCenterID',
        'invoice_number' => 'invoiceNumber',
        'receipt_text_image' => 'receiptTextImage',
        'brokerage_amount' => 'brokerageAmount',
        'amount' => 'amount',
        'cover_count' => 'coverCount',
        'more_records_flag' => 'moreRecordsFlag',
        'account_num' => 'accountNum',
        'max_record_count' => 'maxRecordCount',
        'incremental_auth_amount' => 'incrementalAuthAmount',
        'extra_data' => 'extraData',
        'check_type_id' => 'checkTypeID',
        'posting_id' => 'postingID',
        'destination_property_id' => 'destinationPropertyID',
        'account_detail' => 'accountDetail',
        'payment_amount' => 'paymentAmount',
        'register_id' => 'registerID',
        'tndr_account_object' => 'tndrAccountObject',
        'meal_period_id' => 'mealPeriodID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'auth_amount' => 'setAuthAmount',
        'server_emp_id' => 'setServerEmpId',
        'module_invoked' => 'setModuleInvoked',
        'cashier_emp_id' => 'setCashierEmpId',
        'routing_id' => 'setRoutingId',
        'auth_account_num' => 'setAuthAccountNum',
        'more_records_count' => 'setMoreRecordsCount',
        'payment_method_id' => 'setPaymentMethodId',
        'tag_data' => 'setTagData',
        'total_auth_amount' => 'setTotalAuthAmount',
        'refund_flag' => 'setRefundFlag',
        'close_time' => 'setCloseTime',
        'client_id' => 'setClientId',
        'change_amount' => 'setChangeAmount',
        'employee_id' => 'setEmployeeId',
        'training_mode_flag' => 'setTrainingModeFlag',
        'source_property_id' => 'setSourcePropertyId',
        'associated_check_number' => 'setAssociatedCheckNumber',
        'post_to_property_id' => 'setPostToPropertyId',
        'unique_posting_id' => 'setUniquePostingId',
        'expire_date' => 'setExpireDate',
        'by_name_flag' => 'setByNameFlag',
        'payment_slip_id' => 'setPaymentSlipId',
        'financial_bin_detail' => 'setFinancialBinDetail',
        'cvv2' => 'setCvv2',
        'employee_grat_tip' => 'setEmployeeGratTip',
        'card_swipe_track1' => 'setCardSwipeTrack1',
        'card_swipe_track2' => 'setCardSwipeTrack2',
        'check_number' => 'setCheckNumber',
        'more_records_key' => 'setMoreRecordsKey',
        'tip_amount' => 'setTipAmount',
        'input_data' => 'setInputData',
        'profit_center_id' => 'setProfitCenterId',
        'invoice_number' => 'setInvoiceNumber',
        'receipt_text_image' => 'setReceiptTextImage',
        'brokerage_amount' => 'setBrokerageAmount',
        'amount' => 'setAmount',
        'cover_count' => 'setCoverCount',
        'more_records_flag' => 'setMoreRecordsFlag',
        'account_num' => 'setAccountNum',
        'max_record_count' => 'setMaxRecordCount',
        'incremental_auth_amount' => 'setIncrementalAuthAmount',
        'extra_data' => 'setExtraData',
        'check_type_id' => 'setCheckTypeId',
        'posting_id' => 'setPostingId',
        'destination_property_id' => 'setDestinationPropertyId',
        'account_detail' => 'setAccountDetail',
        'payment_amount' => 'setPaymentAmount',
        'register_id' => 'setRegisterId',
        'tndr_account_object' => 'setTndrAccountObject',
        'meal_period_id' => 'setMealPeriodId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'auth_amount' => 'getAuthAmount',
        'server_emp_id' => 'getServerEmpId',
        'module_invoked' => 'getModuleInvoked',
        'cashier_emp_id' => 'getCashierEmpId',
        'routing_id' => 'getRoutingId',
        'auth_account_num' => 'getAuthAccountNum',
        'more_records_count' => 'getMoreRecordsCount',
        'payment_method_id' => 'getPaymentMethodId',
        'tag_data' => 'getTagData',
        'total_auth_amount' => 'getTotalAuthAmount',
        'refund_flag' => 'getRefundFlag',
        'close_time' => 'getCloseTime',
        'client_id' => 'getClientId',
        'change_amount' => 'getChangeAmount',
        'employee_id' => 'getEmployeeId',
        'training_mode_flag' => 'getTrainingModeFlag',
        'source_property_id' => 'getSourcePropertyId',
        'associated_check_number' => 'getAssociatedCheckNumber',
        'post_to_property_id' => 'getPostToPropertyId',
        'unique_posting_id' => 'getUniquePostingId',
        'expire_date' => 'getExpireDate',
        'by_name_flag' => 'getByNameFlag',
        'payment_slip_id' => 'getPaymentSlipId',
        'financial_bin_detail' => 'getFinancialBinDetail',
        'cvv2' => 'getCvv2',
        'employee_grat_tip' => 'getEmployeeGratTip',
        'card_swipe_track1' => 'getCardSwipeTrack1',
        'card_swipe_track2' => 'getCardSwipeTrack2',
        'check_number' => 'getCheckNumber',
        'more_records_key' => 'getMoreRecordsKey',
        'tip_amount' => 'getTipAmount',
        'input_data' => 'getInputData',
        'profit_center_id' => 'getProfitCenterId',
        'invoice_number' => 'getInvoiceNumber',
        'receipt_text_image' => 'getReceiptTextImage',
        'brokerage_amount' => 'getBrokerageAmount',
        'amount' => 'getAmount',
        'cover_count' => 'getCoverCount',
        'more_records_flag' => 'getMoreRecordsFlag',
        'account_num' => 'getAccountNum',
        'max_record_count' => 'getMaxRecordCount',
        'incremental_auth_amount' => 'getIncrementalAuthAmount',
        'extra_data' => 'getExtraData',
        'check_type_id' => 'getCheckTypeId',
        'posting_id' => 'getPostingId',
        'destination_property_id' => 'getDestinationPropertyId',
        'account_detail' => 'getAccountDetail',
        'payment_amount' => 'getPaymentAmount',
        'register_id' => 'getRegisterId',
        'tndr_account_object' => 'getTndrAccountObject',
        'meal_period_id' => 'getMealPeriodId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('auth_amount', $data ?? [], null);
        $this->setIfExists('server_emp_id', $data ?? [], null);
        $this->setIfExists('module_invoked', $data ?? [], null);
        $this->setIfExists('cashier_emp_id', $data ?? [], null);
        $this->setIfExists('routing_id', $data ?? [], null);
        $this->setIfExists('auth_account_num', $data ?? [], null);
        $this->setIfExists('more_records_count', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('tag_data', $data ?? [], null);
        $this->setIfExists('total_auth_amount', $data ?? [], null);
        $this->setIfExists('refund_flag', $data ?? [], null);
        $this->setIfExists('close_time', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('change_amount', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('training_mode_flag', $data ?? [], null);
        $this->setIfExists('source_property_id', $data ?? [], null);
        $this->setIfExists('associated_check_number', $data ?? [], null);
        $this->setIfExists('post_to_property_id', $data ?? [], null);
        $this->setIfExists('unique_posting_id', $data ?? [], null);
        $this->setIfExists('expire_date', $data ?? [], null);
        $this->setIfExists('by_name_flag', $data ?? [], null);
        $this->setIfExists('payment_slip_id', $data ?? [], null);
        $this->setIfExists('financial_bin_detail', $data ?? [], null);
        $this->setIfExists('cvv2', $data ?? [], null);
        $this->setIfExists('employee_grat_tip', $data ?? [], null);
        $this->setIfExists('card_swipe_track1', $data ?? [], null);
        $this->setIfExists('card_swipe_track2', $data ?? [], null);
        $this->setIfExists('check_number', $data ?? [], null);
        $this->setIfExists('more_records_key', $data ?? [], null);
        $this->setIfExists('tip_amount', $data ?? [], null);
        $this->setIfExists('input_data', $data ?? [], null);
        $this->setIfExists('profit_center_id', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('receipt_text_image', $data ?? [], null);
        $this->setIfExists('brokerage_amount', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('cover_count', $data ?? [], null);
        $this->setIfExists('more_records_flag', $data ?? [], null);
        $this->setIfExists('account_num', $data ?? [], null);
        $this->setIfExists('max_record_count', $data ?? [], null);
        $this->setIfExists('incremental_auth_amount', $data ?? [], null);
        $this->setIfExists('extra_data', $data ?? [], null);
        $this->setIfExists('check_type_id', $data ?? [], null);
        $this->setIfExists('posting_id', $data ?? [], null);
        $this->setIfExists('destination_property_id', $data ?? [], null);
        $this->setIfExists('account_detail', $data ?? [], null);
        $this->setIfExists('payment_amount', $data ?? [], null);
        $this->setIfExists('register_id', $data ?? [], null);
        $this->setIfExists('tndr_account_object', $data ?? [], null);
        $this->setIfExists('meal_period_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 10)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['id']) < 10)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['auth_amount'] === null) {
            $invalidProperties[] = "'auth_amount' can't be null";
        }
        if ($this->container['server_emp_id'] === null) {
            $invalidProperties[] = "'server_emp_id' can't be null";
        }
        if ($this->container['module_invoked'] === null) {
            $invalidProperties[] = "'module_invoked' can't be null";
        }
        if ($this->container['cashier_emp_id'] === null) {
            $invalidProperties[] = "'cashier_emp_id' can't be null";
        }
        if ($this->container['routing_id'] === null) {
            $invalidProperties[] = "'routing_id' can't be null";
        }
        if ($this->container['auth_account_num'] === null) {
            $invalidProperties[] = "'auth_account_num' can't be null";
        }
        if ($this->container['more_records_count'] === null) {
            $invalidProperties[] = "'more_records_count' can't be null";
        }
        if ($this->container['payment_method_id'] === null) {
            $invalidProperties[] = "'payment_method_id' can't be null";
        }
        if ($this->container['tag_data'] === null) {
            $invalidProperties[] = "'tag_data' can't be null";
        }
        if ($this->container['total_auth_amount'] === null) {
            $invalidProperties[] = "'total_auth_amount' can't be null";
        }
        if ($this->container['refund_flag'] === null) {
            $invalidProperties[] = "'refund_flag' can't be null";
        }
        if ($this->container['close_time'] === null) {
            $invalidProperties[] = "'close_time' can't be null";
        }
        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['change_amount'] === null) {
            $invalidProperties[] = "'change_amount' can't be null";
        }
        if ($this->container['employee_id'] === null) {
            $invalidProperties[] = "'employee_id' can't be null";
        }
        if ((mb_strlen($this->container['employee_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['employee_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['employee_id'])) {
            $invalidProperties[] = "invalid value for 'employee_id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['training_mode_flag'] === null) {
            $invalidProperties[] = "'training_mode_flag' can't be null";
        }
        if ($this->container['source_property_id'] === null) {
            $invalidProperties[] = "'source_property_id' can't be null";
        }
        if ($this->container['associated_check_number'] === null) {
            $invalidProperties[] = "'associated_check_number' can't be null";
        }
        if ($this->container['post_to_property_id'] === null) {
            $invalidProperties[] = "'post_to_property_id' can't be null";
        }
        if ($this->container['unique_posting_id'] === null) {
            $invalidProperties[] = "'unique_posting_id' can't be null";
        }
        if ($this->container['expire_date'] === null) {
            $invalidProperties[] = "'expire_date' can't be null";
        }
        if ($this->container['by_name_flag'] === null) {
            $invalidProperties[] = "'by_name_flag' can't be null";
        }
        if ($this->container['payment_slip_id'] === null) {
            $invalidProperties[] = "'payment_slip_id' can't be null";
        }
        if ($this->container['financial_bin_detail'] === null) {
            $invalidProperties[] = "'financial_bin_detail' can't be null";
        }
        if ($this->container['cvv2'] === null) {
            $invalidProperties[] = "'cvv2' can't be null";
        }
        if ($this->container['employee_grat_tip'] === null) {
            $invalidProperties[] = "'employee_grat_tip' can't be null";
        }
        if ($this->container['card_swipe_track1'] === null) {
            $invalidProperties[] = "'card_swipe_track1' can't be null";
        }
        if ($this->container['card_swipe_track2'] === null) {
            $invalidProperties[] = "'card_swipe_track2' can't be null";
        }
        if ($this->container['check_number'] === null) {
            $invalidProperties[] = "'check_number' can't be null";
        }
        if ($this->container['more_records_key'] === null) {
            $invalidProperties[] = "'more_records_key' can't be null";
        }
        if ($this->container['tip_amount'] === null) {
            $invalidProperties[] = "'tip_amount' can't be null";
        }
        if ($this->container['input_data'] === null) {
            $invalidProperties[] = "'input_data' can't be null";
        }
        if ($this->container['profit_center_id'] === null) {
            $invalidProperties[] = "'profit_center_id' can't be null";
        }
        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        if ($this->container['receipt_text_image'] === null) {
            $invalidProperties[] = "'receipt_text_image' can't be null";
        }
        if ($this->container['brokerage_amount'] === null) {
            $invalidProperties[] = "'brokerage_amount' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['cover_count'] === null) {
            $invalidProperties[] = "'cover_count' can't be null";
        }
        if ($this->container['more_records_flag'] === null) {
            $invalidProperties[] = "'more_records_flag' can't be null";
        }
        if ($this->container['account_num'] === null) {
            $invalidProperties[] = "'account_num' can't be null";
        }
        if ($this->container['max_record_count'] === null) {
            $invalidProperties[] = "'max_record_count' can't be null";
        }
        if ($this->container['incremental_auth_amount'] === null) {
            $invalidProperties[] = "'incremental_auth_amount' can't be null";
        }
        if ($this->container['extra_data'] === null) {
            $invalidProperties[] = "'extra_data' can't be null";
        }
        if ($this->container['check_type_id'] === null) {
            $invalidProperties[] = "'check_type_id' can't be null";
        }
        if ($this->container['posting_id'] === null) {
            $invalidProperties[] = "'posting_id' can't be null";
        }
        if ($this->container['destination_property_id'] === null) {
            $invalidProperties[] = "'destination_property_id' can't be null";
        }
        if ($this->container['account_detail'] === null) {
            $invalidProperties[] = "'account_detail' can't be null";
        }
        if ($this->container['payment_amount'] === null) {
            $invalidProperties[] = "'payment_amount' can't be null";
        }
        if ($this->container['register_id'] === null) {
            $invalidProperties[] = "'register_id' can't be null";
        }
        if ($this->container['tndr_account_object'] === null) {
            $invalidProperties[] = "'tndr_account_object' can't be null";
        }
        if ($this->container['meal_period_id'] === null) {
            $invalidProperties[] = "'meal_period_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if ((mb_strlen($id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Request., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Request., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling Request., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets auth_amount
     *
     * @return float
     */
    public function getAuthAmount()
    {
        return $this->container['auth_amount'];
    }

    /**
     * Sets auth_amount
     *
     * @param float $auth_amount auth_amount
     *
     * @return self
     */
    public function setAuthAmount($auth_amount)
    {
        if (is_null($auth_amount)) {
            throw new \InvalidArgumentException('non-nullable auth_amount cannot be null');
        }
        $this->container['auth_amount'] = $auth_amount;

        return $this;
    }

    /**
     * Gets server_emp_id
     *
     * @return string
     */
    public function getServerEmpId()
    {
        return $this->container['server_emp_id'];
    }

    /**
     * Sets server_emp_id
     *
     * @param string $server_emp_id server_emp_id
     *
     * @return self
     */
    public function setServerEmpId($server_emp_id)
    {
        if (is_null($server_emp_id)) {
            throw new \InvalidArgumentException('non-nullable server_emp_id cannot be null');
        }
        $this->container['server_emp_id'] = $server_emp_id;

        return $this;
    }

    /**
     * Gets module_invoked
     *
     * @return mixed
     */
    public function getModuleInvoked()
    {
        return $this->container['module_invoked'];
    }

    /**
     * Sets module_invoked
     *
     * @param mixed $module_invoked module_invoked
     *
     * @return self
     */
    public function setModuleInvoked($module_invoked)
    {
        if (is_null($module_invoked)) {
            array_push($this->openAPINullablesSetToNull, 'module_invoked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('module_invoked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['module_invoked'] = $module_invoked;

        return $this;
    }

    /**
     * Gets cashier_emp_id
     *
     * @return string
     */
    public function getCashierEmpId()
    {
        return $this->container['cashier_emp_id'];
    }

    /**
     * Sets cashier_emp_id
     *
     * @param string $cashier_emp_id cashier_emp_id
     *
     * @return self
     */
    public function setCashierEmpId($cashier_emp_id)
    {
        if (is_null($cashier_emp_id)) {
            throw new \InvalidArgumentException('non-nullable cashier_emp_id cannot be null');
        }
        $this->container['cashier_emp_id'] = $cashier_emp_id;

        return $this;
    }

    /**
     * Gets routing_id
     *
     * @return string
     */
    public function getRoutingId()
    {
        return $this->container['routing_id'];
    }

    /**
     * Sets routing_id
     *
     * @param string $routing_id routing_id
     *
     * @return self
     */
    public function setRoutingId($routing_id)
    {
        if (is_null($routing_id)) {
            throw new \InvalidArgumentException('non-nullable routing_id cannot be null');
        }
        $this->container['routing_id'] = $routing_id;

        return $this;
    }

    /**
     * Gets auth_account_num
     *
     * @return float
     */
    public function getAuthAccountNum()
    {
        return $this->container['auth_account_num'];
    }

    /**
     * Sets auth_account_num
     *
     * @param float $auth_account_num auth_account_num
     *
     * @return self
     */
    public function setAuthAccountNum($auth_account_num)
    {
        if (is_null($auth_account_num)) {
            throw new \InvalidArgumentException('non-nullable auth_account_num cannot be null');
        }
        $this->container['auth_account_num'] = $auth_account_num;

        return $this;
    }

    /**
     * Gets more_records_count
     *
     * @return float
     */
    public function getMoreRecordsCount()
    {
        return $this->container['more_records_count'];
    }

    /**
     * Sets more_records_count
     *
     * @param float $more_records_count more_records_count
     *
     * @return self
     */
    public function setMoreRecordsCount($more_records_count)
    {
        if (is_null($more_records_count)) {
            throw new \InvalidArgumentException('non-nullable more_records_count cannot be null');
        }
        $this->container['more_records_count'] = $more_records_count;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets tag_data
     *
     * @return mixed
     */
    public function getTagData()
    {
        return $this->container['tag_data'];
    }

    /**
     * Sets tag_data
     *
     * @param mixed $tag_data tag_data
     *
     * @return self
     */
    public function setTagData($tag_data)
    {
        if (is_null($tag_data)) {
            array_push($this->openAPINullablesSetToNull, 'tag_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tag_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tag_data'] = $tag_data;

        return $this;
    }

    /**
     * Gets total_auth_amount
     *
     * @return float
     */
    public function getTotalAuthAmount()
    {
        return $this->container['total_auth_amount'];
    }

    /**
     * Sets total_auth_amount
     *
     * @param float $total_auth_amount total_auth_amount
     *
     * @return self
     */
    public function setTotalAuthAmount($total_auth_amount)
    {
        if (is_null($total_auth_amount)) {
            throw new \InvalidArgumentException('non-nullable total_auth_amount cannot be null');
        }
        $this->container['total_auth_amount'] = $total_auth_amount;

        return $this;
    }

    /**
     * Gets refund_flag
     *
     * @return mixed
     */
    public function getRefundFlag()
    {
        return $this->container['refund_flag'];
    }

    /**
     * Sets refund_flag
     *
     * @param mixed $refund_flag refund_flag
     *
     * @return self
     */
    public function setRefundFlag($refund_flag)
    {
        if (is_null($refund_flag)) {
            array_push($this->openAPINullablesSetToNull, 'refund_flag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_flag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_flag'] = $refund_flag;

        return $this;
    }

    /**
     * Gets close_time
     *
     * @return \DateTime
     */
    public function getCloseTime()
    {
        return $this->container['close_time'];
    }

    /**
     * Sets close_time
     *
     * @param \DateTime $close_time close_time
     *
     * @return self
     */
    public function setCloseTime($close_time)
    {
        if (is_null($close_time)) {
            throw new \InvalidArgumentException('non-nullable close_time cannot be null');
        }
        $this->container['close_time'] = $close_time;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets change_amount
     *
     * @return float
     */
    public function getChangeAmount()
    {
        return $this->container['change_amount'];
    }

    /**
     * Sets change_amount
     *
     * @param float $change_amount change_amount
     *
     * @return self
     */
    public function setChangeAmount($change_amount)
    {
        if (is_null($change_amount)) {
            throw new \InvalidArgumentException('non-nullable change_amount cannot be null');
        }
        $this->container['change_amount'] = $change_amount;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        if ((mb_strlen($employee_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling Request., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($employee_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling Request., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($employee_id)))) {
            throw new \InvalidArgumentException("invalid value for \$employee_id when calling Request., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets training_mode_flag
     *
     * @return mixed
     */
    public function getTrainingModeFlag()
    {
        return $this->container['training_mode_flag'];
    }

    /**
     * Sets training_mode_flag
     *
     * @param mixed $training_mode_flag training_mode_flag
     *
     * @return self
     */
    public function setTrainingModeFlag($training_mode_flag)
    {
        if (is_null($training_mode_flag)) {
            array_push($this->openAPINullablesSetToNull, 'training_mode_flag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('training_mode_flag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['training_mode_flag'] = $training_mode_flag;

        return $this;
    }

    /**
     * Gets source_property_id
     *
     * @return string
     */
    public function getSourcePropertyId()
    {
        return $this->container['source_property_id'];
    }

    /**
     * Sets source_property_id
     *
     * @param string $source_property_id source_property_id
     *
     * @return self
     */
    public function setSourcePropertyId($source_property_id)
    {
        if (is_null($source_property_id)) {
            throw new \InvalidArgumentException('non-nullable source_property_id cannot be null');
        }
        $this->container['source_property_id'] = $source_property_id;

        return $this;
    }

    /**
     * Gets associated_check_number
     *
     * @return string
     */
    public function getAssociatedCheckNumber()
    {
        return $this->container['associated_check_number'];
    }

    /**
     * Sets associated_check_number
     *
     * @param string $associated_check_number associated_check_number
     *
     * @return self
     */
    public function setAssociatedCheckNumber($associated_check_number)
    {
        if (is_null($associated_check_number)) {
            throw new \InvalidArgumentException('non-nullable associated_check_number cannot be null');
        }
        $this->container['associated_check_number'] = $associated_check_number;

        return $this;
    }

    /**
     * Gets post_to_property_id
     *
     * @return string
     */
    public function getPostToPropertyId()
    {
        return $this->container['post_to_property_id'];
    }

    /**
     * Sets post_to_property_id
     *
     * @param string $post_to_property_id post_to_property_id
     *
     * @return self
     */
    public function setPostToPropertyId($post_to_property_id)
    {
        if (is_null($post_to_property_id)) {
            throw new \InvalidArgumentException('non-nullable post_to_property_id cannot be null');
        }
        $this->container['post_to_property_id'] = $post_to_property_id;

        return $this;
    }

    /**
     * Gets unique_posting_id
     *
     * @return string
     */
    public function getUniquePostingId()
    {
        return $this->container['unique_posting_id'];
    }

    /**
     * Sets unique_posting_id
     *
     * @param string $unique_posting_id unique_posting_id
     *
     * @return self
     */
    public function setUniquePostingId($unique_posting_id)
    {
        if (is_null($unique_posting_id)) {
            throw new \InvalidArgumentException('non-nullable unique_posting_id cannot be null');
        }
        $this->container['unique_posting_id'] = $unique_posting_id;

        return $this;
    }

    /**
     * Gets expire_date
     *
     * @return \DateTime
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     *
     * @param \DateTime $expire_date expire_date
     *
     * @return self
     */
    public function setExpireDate($expire_date)
    {
        if (is_null($expire_date)) {
            throw new \InvalidArgumentException('non-nullable expire_date cannot be null');
        }
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets by_name_flag
     *
     * @return mixed
     */
    public function getByNameFlag()
    {
        return $this->container['by_name_flag'];
    }

    /**
     * Sets by_name_flag
     *
     * @param mixed $by_name_flag by_name_flag
     *
     * @return self
     */
    public function setByNameFlag($by_name_flag)
    {
        if (is_null($by_name_flag)) {
            array_push($this->openAPINullablesSetToNull, 'by_name_flag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('by_name_flag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['by_name_flag'] = $by_name_flag;

        return $this;
    }

    /**
     * Gets payment_slip_id
     *
     * @return string
     */
    public function getPaymentSlipId()
    {
        return $this->container['payment_slip_id'];
    }

    /**
     * Sets payment_slip_id
     *
     * @param string $payment_slip_id payment_slip_id
     *
     * @return self
     */
    public function setPaymentSlipId($payment_slip_id)
    {
        if (is_null($payment_slip_id)) {
            throw new \InvalidArgumentException('non-nullable payment_slip_id cannot be null');
        }
        $this->container['payment_slip_id'] = $payment_slip_id;

        return $this;
    }

    /**
     * Gets financial_bin_detail
     *
     * @return mixed
     */
    public function getFinancialBinDetail()
    {
        return $this->container['financial_bin_detail'];
    }

    /**
     * Sets financial_bin_detail
     *
     * @param mixed $financial_bin_detail financial_bin_detail
     *
     * @return self
     */
    public function setFinancialBinDetail($financial_bin_detail)
    {
        if (is_null($financial_bin_detail)) {
            array_push($this->openAPINullablesSetToNull, 'financial_bin_detail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('financial_bin_detail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['financial_bin_detail'] = $financial_bin_detail;

        return $this;
    }

    /**
     * Gets cvv2
     *
     * @return string
     */
    public function getCvv2()
    {
        return $this->container['cvv2'];
    }

    /**
     * Sets cvv2
     *
     * @param string $cvv2 cvv2
     *
     * @return self
     */
    public function setCvv2($cvv2)
    {
        if (is_null($cvv2)) {
            throw new \InvalidArgumentException('non-nullable cvv2 cannot be null');
        }
        $this->container['cvv2'] = $cvv2;

        return $this;
    }

    /**
     * Gets employee_grat_tip
     *
     * @return float
     */
    public function getEmployeeGratTip()
    {
        return $this->container['employee_grat_tip'];
    }

    /**
     * Sets employee_grat_tip
     *
     * @param float $employee_grat_tip employee_grat_tip
     *
     * @return self
     */
    public function setEmployeeGratTip($employee_grat_tip)
    {
        if (is_null($employee_grat_tip)) {
            throw new \InvalidArgumentException('non-nullable employee_grat_tip cannot be null');
        }
        $this->container['employee_grat_tip'] = $employee_grat_tip;

        return $this;
    }

    /**
     * Gets card_swipe_track1
     *
     * @return mixed
     */
    public function getCardSwipeTrack1()
    {
        return $this->container['card_swipe_track1'];
    }

    /**
     * Sets card_swipe_track1
     *
     * @param mixed $card_swipe_track1 card_swipe_track1
     *
     * @return self
     */
    public function setCardSwipeTrack1($card_swipe_track1)
    {
        if (is_null($card_swipe_track1)) {
            array_push($this->openAPINullablesSetToNull, 'card_swipe_track1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_swipe_track1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_swipe_track1'] = $card_swipe_track1;

        return $this;
    }

    /**
     * Gets card_swipe_track2
     *
     * @return mixed
     */
    public function getCardSwipeTrack2()
    {
        return $this->container['card_swipe_track2'];
    }

    /**
     * Sets card_swipe_track2
     *
     * @param mixed $card_swipe_track2 card_swipe_track2
     *
     * @return self
     */
    public function setCardSwipeTrack2($card_swipe_track2)
    {
        if (is_null($card_swipe_track2)) {
            array_push($this->openAPINullablesSetToNull, 'card_swipe_track2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_swipe_track2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_swipe_track2'] = $card_swipe_track2;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return string
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param string $check_number check_number
     *
     * @return self
     */
    public function setCheckNumber($check_number)
    {
        if (is_null($check_number)) {
            throw new \InvalidArgumentException('non-nullable check_number cannot be null');
        }
        $this->container['check_number'] = $check_number;

        return $this;
    }

    /**
     * Gets more_records_key
     *
     * @return mixed
     */
    public function getMoreRecordsKey()
    {
        return $this->container['more_records_key'];
    }

    /**
     * Sets more_records_key
     *
     * @param mixed $more_records_key more_records_key
     *
     * @return self
     */
    public function setMoreRecordsKey($more_records_key)
    {
        if (is_null($more_records_key)) {
            array_push($this->openAPINullablesSetToNull, 'more_records_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('more_records_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['more_records_key'] = $more_records_key;

        return $this;
    }

    /**
     * Gets tip_amount
     *
     * @return float
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     *
     * @param float $tip_amount tip_amount
     *
     * @return self
     */
    public function setTipAmount($tip_amount)
    {
        if (is_null($tip_amount)) {
            throw new \InvalidArgumentException('non-nullable tip_amount cannot be null');
        }
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets input_data
     *
     * @return mixed
     */
    public function getInputData()
    {
        return $this->container['input_data'];
    }

    /**
     * Sets input_data
     *
     * @param mixed $input_data input_data
     *
     * @return self
     */
    public function setInputData($input_data)
    {
        if (is_null($input_data)) {
            array_push($this->openAPINullablesSetToNull, 'input_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_data'] = $input_data;

        return $this;
    }

    /**
     * Gets profit_center_id
     *
     * @return string
     */
    public function getProfitCenterId()
    {
        return $this->container['profit_center_id'];
    }

    /**
     * Sets profit_center_id
     *
     * @param string $profit_center_id profit_center_id
     *
     * @return self
     */
    public function setProfitCenterId($profit_center_id)
    {
        if (is_null($profit_center_id)) {
            throw new \InvalidArgumentException('non-nullable profit_center_id cannot be null');
        }
        $this->container['profit_center_id'] = $profit_center_id;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice_number
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets receipt_text_image
     *
     * @return mixed
     */
    public function getReceiptTextImage()
    {
        return $this->container['receipt_text_image'];
    }

    /**
     * Sets receipt_text_image
     *
     * @param mixed $receipt_text_image receipt_text_image
     *
     * @return self
     */
    public function setReceiptTextImage($receipt_text_image)
    {
        if (is_null($receipt_text_image)) {
            array_push($this->openAPINullablesSetToNull, 'receipt_text_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receipt_text_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receipt_text_image'] = $receipt_text_image;

        return $this;
    }

    /**
     * Gets brokerage_amount
     *
     * @return float
     */
    public function getBrokerageAmount()
    {
        return $this->container['brokerage_amount'];
    }

    /**
     * Sets brokerage_amount
     *
     * @param float $brokerage_amount brokerage_amount
     *
     * @return self
     */
    public function setBrokerageAmount($brokerage_amount)
    {
        if (is_null($brokerage_amount)) {
            throw new \InvalidArgumentException('non-nullable brokerage_amount cannot be null');
        }
        $this->container['brokerage_amount'] = $brokerage_amount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets cover_count
     *
     * @return float
     */
    public function getCoverCount()
    {
        return $this->container['cover_count'];
    }

    /**
     * Sets cover_count
     *
     * @param float $cover_count cover_count
     *
     * @return self
     */
    public function setCoverCount($cover_count)
    {
        if (is_null($cover_count)) {
            throw new \InvalidArgumentException('non-nullable cover_count cannot be null');
        }
        $this->container['cover_count'] = $cover_count;

        return $this;
    }

    /**
     * Gets more_records_flag
     *
     * @return mixed
     */
    public function getMoreRecordsFlag()
    {
        return $this->container['more_records_flag'];
    }

    /**
     * Sets more_records_flag
     *
     * @param mixed $more_records_flag more_records_flag
     *
     * @return self
     */
    public function setMoreRecordsFlag($more_records_flag)
    {
        if (is_null($more_records_flag)) {
            array_push($this->openAPINullablesSetToNull, 'more_records_flag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('more_records_flag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['more_records_flag'] = $more_records_flag;

        return $this;
    }

    /**
     * Gets account_num
     *
     * @return string
     */
    public function getAccountNum()
    {
        return $this->container['account_num'];
    }

    /**
     * Sets account_num
     *
     * @param string $account_num account_num
     *
     * @return self
     */
    public function setAccountNum($account_num)
    {
        if (is_null($account_num)) {
            throw new \InvalidArgumentException('non-nullable account_num cannot be null');
        }
        $this->container['account_num'] = $account_num;

        return $this;
    }

    /**
     * Gets max_record_count
     *
     * @return float
     */
    public function getMaxRecordCount()
    {
        return $this->container['max_record_count'];
    }

    /**
     * Sets max_record_count
     *
     * @param float $max_record_count max_record_count
     *
     * @return self
     */
    public function setMaxRecordCount($max_record_count)
    {
        if (is_null($max_record_count)) {
            throw new \InvalidArgumentException('non-nullable max_record_count cannot be null');
        }
        $this->container['max_record_count'] = $max_record_count;

        return $this;
    }

    /**
     * Gets incremental_auth_amount
     *
     * @return float
     */
    public function getIncrementalAuthAmount()
    {
        return $this->container['incremental_auth_amount'];
    }

    /**
     * Sets incremental_auth_amount
     *
     * @param float $incremental_auth_amount incremental_auth_amount
     *
     * @return self
     */
    public function setIncrementalAuthAmount($incremental_auth_amount)
    {
        if (is_null($incremental_auth_amount)) {
            throw new \InvalidArgumentException('non-nullable incremental_auth_amount cannot be null');
        }
        $this->container['incremental_auth_amount'] = $incremental_auth_amount;

        return $this;
    }

    /**
     * Gets extra_data
     *
     * @return mixed
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     *
     * @param mixed $extra_data extra_data
     *
     * @return self
     */
    public function setExtraData($extra_data)
    {
        if (is_null($extra_data)) {
            array_push($this->openAPINullablesSetToNull, 'extra_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extra_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extra_data'] = $extra_data;

        return $this;
    }

    /**
     * Gets check_type_id
     *
     * @return string
     */
    public function getCheckTypeId()
    {
        return $this->container['check_type_id'];
    }

    /**
     * Sets check_type_id
     *
     * @param string $check_type_id check_type_id
     *
     * @return self
     */
    public function setCheckTypeId($check_type_id)
    {
        if (is_null($check_type_id)) {
            throw new \InvalidArgumentException('non-nullable check_type_id cannot be null');
        }
        $this->container['check_type_id'] = $check_type_id;

        return $this;
    }

    /**
     * Gets posting_id
     *
     * @return string
     */
    public function getPostingId()
    {
        return $this->container['posting_id'];
    }

    /**
     * Sets posting_id
     *
     * @param string $posting_id posting_id
     *
     * @return self
     */
    public function setPostingId($posting_id)
    {
        if (is_null($posting_id)) {
            throw new \InvalidArgumentException('non-nullable posting_id cannot be null');
        }
        $this->container['posting_id'] = $posting_id;

        return $this;
    }

    /**
     * Gets destination_property_id
     *
     * @return string
     */
    public function getDestinationPropertyId()
    {
        return $this->container['destination_property_id'];
    }

    /**
     * Sets destination_property_id
     *
     * @param string $destination_property_id destination_property_id
     *
     * @return self
     */
    public function setDestinationPropertyId($destination_property_id)
    {
        if (is_null($destination_property_id)) {
            throw new \InvalidArgumentException('non-nullable destination_property_id cannot be null');
        }
        $this->container['destination_property_id'] = $destination_property_id;

        return $this;
    }

    /**
     * Gets account_detail
     *
     * @return mixed
     */
    public function getAccountDetail()
    {
        return $this->container['account_detail'];
    }

    /**
     * Sets account_detail
     *
     * @param mixed $account_detail account_detail
     *
     * @return self
     */
    public function setAccountDetail($account_detail)
    {
        if (is_null($account_detail)) {
            array_push($this->openAPINullablesSetToNull, 'account_detail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_detail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_detail'] = $account_detail;

        return $this;
    }

    /**
     * Gets payment_amount
     *
     * @return float
     */
    public function getPaymentAmount()
    {
        return $this->container['payment_amount'];
    }

    /**
     * Sets payment_amount
     *
     * @param float $payment_amount payment_amount
     *
     * @return self
     */
    public function setPaymentAmount($payment_amount)
    {
        if (is_null($payment_amount)) {
            throw new \InvalidArgumentException('non-nullable payment_amount cannot be null');
        }
        $this->container['payment_amount'] = $payment_amount;

        return $this;
    }

    /**
     * Gets register_id
     *
     * @return string
     */
    public function getRegisterId()
    {
        return $this->container['register_id'];
    }

    /**
     * Sets register_id
     *
     * @param string $register_id register_id
     *
     * @return self
     */
    public function setRegisterId($register_id)
    {
        if (is_null($register_id)) {
            throw new \InvalidArgumentException('non-nullable register_id cannot be null');
        }
        $this->container['register_id'] = $register_id;

        return $this;
    }

    /**
     * Gets tndr_account_object
     *
     * @return mixed
     */
    public function getTndrAccountObject()
    {
        return $this->container['tndr_account_object'];
    }

    /**
     * Sets tndr_account_object
     *
     * @param mixed $tndr_account_object tndr_account_object
     *
     * @return self
     */
    public function setTndrAccountObject($tndr_account_object)
    {
        if (is_null($tndr_account_object)) {
            array_push($this->openAPINullablesSetToNull, 'tndr_account_object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tndr_account_object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tndr_account_object'] = $tndr_account_object;

        return $this;
    }

    /**
     * Gets meal_period_id
     *
     * @return string
     */
    public function getMealPeriodId()
    {
        return $this->container['meal_period_id'];
    }

    /**
     * Sets meal_period_id
     *
     * @param string $meal_period_id meal_period_id
     *
     * @return self
     */
    public function setMealPeriodId($meal_period_id)
    {
        if (is_null($meal_period_id)) {
            throw new \InvalidArgumentException('non-nullable meal_period_id cannot be null');
        }
        $this->container['meal_period_id'] = $meal_period_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


