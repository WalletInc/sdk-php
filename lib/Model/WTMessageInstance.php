<?php
/**
 * WTMessageInstance
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WTMessageInstance Class Doc Comment
 *
 * @category Class
 * @description tsoaModel
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WTMessageInstance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WTMessageInstance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subresource_uris' => 'object',
        'api_version' => 'string',
        'price_unit' => 'string',
        'error_code' => 'float',
        'date_created' => '\DateTime',
        'date_sent' => '\DateTime',
        'sid' => 'string',
        'messaging_service_sid' => 'string',
        'status' => '\OpenAPI\Client\Model\MessageStatus',
        'num_media' => 'string',
        'account_sid' => 'string',
        'uri' => 'string',
        'error_message' => 'string',
        'price' => 'string',
        'date_updated' => '\DateTime',
        'to' => 'string',
        'from' => 'string',
        'direction' => '\OpenAPI\Client\Model\MessageDirection',
        'num_segments' => 'string',
        'body' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subresource_uris' => null,
        'api_version' => null,
        'price_unit' => null,
        'error_code' => 'double',
        'date_created' => 'date-time',
        'date_sent' => 'date-time',
        'sid' => null,
        'messaging_service_sid' => null,
        'status' => null,
        'num_media' => null,
        'account_sid' => null,
        'uri' => null,
        'error_message' => null,
        'price' => null,
        'date_updated' => 'date-time',
        'to' => null,
        'from' => null,
        'direction' => null,
        'num_segments' => null,
        'body' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subresource_uris' => false,
        'api_version' => false,
        'price_unit' => false,
        'error_code' => false,
        'date_created' => false,
        'date_sent' => false,
        'sid' => false,
        'messaging_service_sid' => false,
        'status' => false,
        'num_media' => false,
        'account_sid' => false,
        'uri' => false,
        'error_message' => false,
        'price' => false,
        'date_updated' => false,
        'to' => false,
        'from' => false,
        'direction' => false,
        'num_segments' => false,
        'body' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subresource_uris' => 'subresourceUris',
        'api_version' => 'apiVersion',
        'price_unit' => 'priceUnit',
        'error_code' => 'errorCode',
        'date_created' => 'dateCreated',
        'date_sent' => 'dateSent',
        'sid' => 'sid',
        'messaging_service_sid' => 'messagingServiceSid',
        'status' => 'status',
        'num_media' => 'numMedia',
        'account_sid' => 'accountSid',
        'uri' => 'uri',
        'error_message' => 'errorMessage',
        'price' => 'price',
        'date_updated' => 'dateUpdated',
        'to' => 'to',
        'from' => 'from',
        'direction' => 'direction',
        'num_segments' => 'numSegments',
        'body' => 'body'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subresource_uris' => 'setSubresourceUris',
        'api_version' => 'setApiVersion',
        'price_unit' => 'setPriceUnit',
        'error_code' => 'setErrorCode',
        'date_created' => 'setDateCreated',
        'date_sent' => 'setDateSent',
        'sid' => 'setSid',
        'messaging_service_sid' => 'setMessagingServiceSid',
        'status' => 'setStatus',
        'num_media' => 'setNumMedia',
        'account_sid' => 'setAccountSid',
        'uri' => 'setUri',
        'error_message' => 'setErrorMessage',
        'price' => 'setPrice',
        'date_updated' => 'setDateUpdated',
        'to' => 'setTo',
        'from' => 'setFrom',
        'direction' => 'setDirection',
        'num_segments' => 'setNumSegments',
        'body' => 'setBody'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subresource_uris' => 'getSubresourceUris',
        'api_version' => 'getApiVersion',
        'price_unit' => 'getPriceUnit',
        'error_code' => 'getErrorCode',
        'date_created' => 'getDateCreated',
        'date_sent' => 'getDateSent',
        'sid' => 'getSid',
        'messaging_service_sid' => 'getMessagingServiceSid',
        'status' => 'getStatus',
        'num_media' => 'getNumMedia',
        'account_sid' => 'getAccountSid',
        'uri' => 'getUri',
        'error_message' => 'getErrorMessage',
        'price' => 'getPrice',
        'date_updated' => 'getDateUpdated',
        'to' => 'getTo',
        'from' => 'getFrom',
        'direction' => 'getDirection',
        'num_segments' => 'getNumSegments',
        'body' => 'getBody'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('subresource_uris', $data ?? [], null);
        $this->setIfExists('api_version', $data ?? [], null);
        $this->setIfExists('price_unit', $data ?? [], null);
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_sent', $data ?? [], null);
        $this->setIfExists('sid', $data ?? [], null);
        $this->setIfExists('messaging_service_sid', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('num_media', $data ?? [], null);
        $this->setIfExists('account_sid', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('date_updated', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('num_segments', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subresource_uris'] === null) {
            $invalidProperties[] = "'subresource_uris' can't be null";
        }
        if ($this->container['api_version'] === null) {
            $invalidProperties[] = "'api_version' can't be null";
        }
        if ($this->container['price_unit'] === null) {
            $invalidProperties[] = "'price_unit' can't be null";
        }
        if ($this->container['error_code'] === null) {
            $invalidProperties[] = "'error_code' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['date_sent'] === null) {
            $invalidProperties[] = "'date_sent' can't be null";
        }
        if ($this->container['sid'] === null) {
            $invalidProperties[] = "'sid' can't be null";
        }
        if ($this->container['messaging_service_sid'] === null) {
            $invalidProperties[] = "'messaging_service_sid' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['num_media'] === null) {
            $invalidProperties[] = "'num_media' can't be null";
        }
        if ($this->container['account_sid'] === null) {
            $invalidProperties[] = "'account_sid' can't be null";
        }
        if ($this->container['uri'] === null) {
            $invalidProperties[] = "'uri' can't be null";
        }
        if ($this->container['error_message'] === null) {
            $invalidProperties[] = "'error_message' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['date_updated'] === null) {
            $invalidProperties[] = "'date_updated' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['direction'] === null) {
            $invalidProperties[] = "'direction' can't be null";
        }
        if ($this->container['num_segments'] === null) {
            $invalidProperties[] = "'num_segments' can't be null";
        }
        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subresource_uris
     *
     * @return object
     */
    public function getSubresourceUris()
    {
        return $this->container['subresource_uris'];
    }

    /**
     * Sets subresource_uris
     *
     * @param object $subresource_uris Construct a type with a set of properties K of type T
     *
     * @return self
     */
    public function setSubresourceUris($subresource_uris)
    {
        if (is_null($subresource_uris)) {
            throw new \InvalidArgumentException('non-nullable subresource_uris cannot be null');
        }
        $this->container['subresource_uris'] = $subresource_uris;

        return $this;
    }

    /**
     * Gets api_version
     *
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     *
     * @param string $api_version api_version
     *
     * @return self
     */
    public function setApiVersion($api_version)
    {
        if (is_null($api_version)) {
            throw new \InvalidArgumentException('non-nullable api_version cannot be null');
        }
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets price_unit
     *
     * @return string
     */
    public function getPriceUnit()
    {
        return $this->container['price_unit'];
    }

    /**
     * Sets price_unit
     *
     * @param string $price_unit price_unit
     *
     * @return self
     */
    public function setPriceUnit($price_unit)
    {
        if (is_null($price_unit)) {
            throw new \InvalidArgumentException('non-nullable price_unit cannot be null');
        }
        $this->container['price_unit'] = $price_unit;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return float
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param float $error_code error_code
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        if (is_null($error_code)) {
            throw new \InvalidArgumentException('non-nullable error_code cannot be null');
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_sent
     *
     * @return \DateTime
     */
    public function getDateSent()
    {
        return $this->container['date_sent'];
    }

    /**
     * Sets date_sent
     *
     * @param \DateTime $date_sent date_sent
     *
     * @return self
     */
    public function setDateSent($date_sent)
    {
        if (is_null($date_sent)) {
            throw new \InvalidArgumentException('non-nullable date_sent cannot be null');
        }
        $this->container['date_sent'] = $date_sent;

        return $this;
    }

    /**
     * Gets sid
     *
     * @return string
     */
    public function getSid()
    {
        return $this->container['sid'];
    }

    /**
     * Sets sid
     *
     * @param string $sid sid
     *
     * @return self
     */
    public function setSid($sid)
    {
        if (is_null($sid)) {
            throw new \InvalidArgumentException('non-nullable sid cannot be null');
        }
        $this->container['sid'] = $sid;

        return $this;
    }

    /**
     * Gets messaging_service_sid
     *
     * @return string
     */
    public function getMessagingServiceSid()
    {
        return $this->container['messaging_service_sid'];
    }

    /**
     * Sets messaging_service_sid
     *
     * @param string $messaging_service_sid messaging_service_sid
     *
     * @return self
     */
    public function setMessagingServiceSid($messaging_service_sid)
    {
        if (is_null($messaging_service_sid)) {
            throw new \InvalidArgumentException('non-nullable messaging_service_sid cannot be null');
        }
        $this->container['messaging_service_sid'] = $messaging_service_sid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\MessageStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\MessageStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets num_media
     *
     * @return string
     */
    public function getNumMedia()
    {
        return $this->container['num_media'];
    }

    /**
     * Sets num_media
     *
     * @param string $num_media num_media
     *
     * @return self
     */
    public function setNumMedia($num_media)
    {
        if (is_null($num_media)) {
            throw new \InvalidArgumentException('non-nullable num_media cannot be null');
        }
        $this->container['num_media'] = $num_media;

        return $this;
    }

    /**
     * Gets account_sid
     *
     * @return string
     */
    public function getAccountSid()
    {
        return $this->container['account_sid'];
    }

    /**
     * Sets account_sid
     *
     * @param string $account_sid account_sid
     *
     * @return self
     */
    public function setAccountSid($account_sid)
    {
        if (is_null($account_sid)) {
            throw new \InvalidArgumentException('non-nullable account_sid cannot be null');
        }
        $this->container['account_sid'] = $account_sid;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri uri
     *
     * @return self
     */
    public function setUri($uri)
    {
        if (is_null($uri)) {
            throw new \InvalidArgumentException('non-nullable uri cannot be null');
        }
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            throw new \InvalidArgumentException('non-nullable error_message cannot be null');
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime $date_updated date_updated
     *
     * @return self
     */
    public function setDateUpdated($date_updated)
    {
        if (is_null($date_updated)) {
            throw new \InvalidArgumentException('non-nullable date_updated cannot be null');
        }
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return \OpenAPI\Client\Model\MessageDirection
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param \OpenAPI\Client\Model\MessageDirection $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets num_segments
     *
     * @return string
     */
    public function getNumSegments()
    {
        return $this->container['num_segments'];
    }

    /**
     * Sets num_segments
     *
     * @param string $num_segments num_segments
     *
     * @return self
     */
    public function setNumSegments($num_segments)
    {
        if (is_null($num_segments)) {
            throw new \InvalidArgumentException('non-nullable num_segments cannot be null');
        }
        $this->container['num_segments'] = $num_segments;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


