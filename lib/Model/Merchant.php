<?php
/**
 * Merchant
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Merchant Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Merchant implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Merchant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'company_name' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'country' => 'string',
        'phone_number' => 'string',
        'zip' => 'string',
        'currency_abbreviation' => 'string',
        'id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'industry' => 'string',
        'industry_name' => 'string',
        'info_genesis_property_id' => 'string',
        'is_frozen' => 'bool',
        'billing_contact_employee_id' => 'string',
        'marketing_contact_employee_id' => 'string',
        'technical_contact_employee_id' => 'string',
        'customer_service_contact_employee_id' => 'string',
        'stripe_customer_id' => 'string',
        'is_payment_method_provided' => 'bool',
        'plan_nickname' => 'string',
        'max_sms_count' => 'float',
        'is_sms_agreement' => 'bool',
        'is_white_labeled' => 'bool',
        'is_featured' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'company_name' => null,
        'address1' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'country' => null,
        'phone_number' => null,
        'zip' => null,
        'currency_abbreviation' => null,
        'id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'industry' => null,
        'industry_name' => null,
        'info_genesis_property_id' => null,
        'is_frozen' => null,
        'billing_contact_employee_id' => null,
        'marketing_contact_employee_id' => null,
        'technical_contact_employee_id' => null,
        'customer_service_contact_employee_id' => null,
        'stripe_customer_id' => null,
        'is_payment_method_provided' => null,
        'plan_nickname' => null,
        'max_sms_count' => 'double',
        'is_sms_agreement' => null,
        'is_white_labeled' => null,
        'is_featured' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'company_name' => false,
        'address1' => false,
        'address2' => false,
        'city' => false,
        'state' => false,
        'country' => false,
        'phone_number' => false,
        'zip' => false,
        'currency_abbreviation' => false,
        'id' => false,
        'created_at' => false,
        'updated_at' => false,
        'industry' => false,
        'industry_name' => false,
        'info_genesis_property_id' => false,
        'is_frozen' => false,
        'billing_contact_employee_id' => false,
        'marketing_contact_employee_id' => false,
        'technical_contact_employee_id' => false,
        'customer_service_contact_employee_id' => false,
        'stripe_customer_id' => false,
        'is_payment_method_provided' => false,
        'plan_nickname' => false,
        'max_sms_count' => false,
        'is_sms_agreement' => false,
        'is_white_labeled' => false,
        'is_featured' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_name' => 'companyName',
        'address1' => 'address1',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'country' => 'country',
        'phone_number' => 'phoneNumber',
        'zip' => 'zip',
        'currency_abbreviation' => 'currencyAbbreviation',
        'id' => 'id',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'industry' => 'industry',
        'industry_name' => 'industryName',
        'info_genesis_property_id' => 'infoGenesisPropertyID',
        'is_frozen' => 'isFrozen',
        'billing_contact_employee_id' => 'billingContactEmployeeID',
        'marketing_contact_employee_id' => 'marketingContactEmployeeID',
        'technical_contact_employee_id' => 'technicalContactEmployeeID',
        'customer_service_contact_employee_id' => 'customerServiceContactEmployeeID',
        'stripe_customer_id' => 'stripeCustomerID',
        'is_payment_method_provided' => 'isPaymentMethodProvided',
        'plan_nickname' => 'planNickname',
        'max_sms_count' => 'maxSMSCount',
        'is_sms_agreement' => 'isSmsAgreement',
        'is_white_labeled' => 'isWhiteLabeled',
        'is_featured' => 'isFeatured'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_name' => 'setCompanyName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'country' => 'setCountry',
        'phone_number' => 'setPhoneNumber',
        'zip' => 'setZip',
        'currency_abbreviation' => 'setCurrencyAbbreviation',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'industry' => 'setIndustry',
        'industry_name' => 'setIndustryName',
        'info_genesis_property_id' => 'setInfoGenesisPropertyId',
        'is_frozen' => 'setIsFrozen',
        'billing_contact_employee_id' => 'setBillingContactEmployeeId',
        'marketing_contact_employee_id' => 'setMarketingContactEmployeeId',
        'technical_contact_employee_id' => 'setTechnicalContactEmployeeId',
        'customer_service_contact_employee_id' => 'setCustomerServiceContactEmployeeId',
        'stripe_customer_id' => 'setStripeCustomerId',
        'is_payment_method_provided' => 'setIsPaymentMethodProvided',
        'plan_nickname' => 'setPlanNickname',
        'max_sms_count' => 'setMaxSmsCount',
        'is_sms_agreement' => 'setIsSmsAgreement',
        'is_white_labeled' => 'setIsWhiteLabeled',
        'is_featured' => 'setIsFeatured'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_name' => 'getCompanyName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'country' => 'getCountry',
        'phone_number' => 'getPhoneNumber',
        'zip' => 'getZip',
        'currency_abbreviation' => 'getCurrencyAbbreviation',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'industry' => 'getIndustry',
        'industry_name' => 'getIndustryName',
        'info_genesis_property_id' => 'getInfoGenesisPropertyId',
        'is_frozen' => 'getIsFrozen',
        'billing_contact_employee_id' => 'getBillingContactEmployeeId',
        'marketing_contact_employee_id' => 'getMarketingContactEmployeeId',
        'technical_contact_employee_id' => 'getTechnicalContactEmployeeId',
        'customer_service_contact_employee_id' => 'getCustomerServiceContactEmployeeId',
        'stripe_customer_id' => 'getStripeCustomerId',
        'is_payment_method_provided' => 'getIsPaymentMethodProvided',
        'plan_nickname' => 'getPlanNickname',
        'max_sms_count' => 'getMaxSmsCount',
        'is_sms_agreement' => 'getIsSmsAgreement',
        'is_white_labeled' => 'getIsWhiteLabeled',
        'is_featured' => 'getIsFeatured'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('currency_abbreviation', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('industry', $data ?? [], null);
        $this->setIfExists('industry_name', $data ?? [], null);
        $this->setIfExists('info_genesis_property_id', $data ?? [], null);
        $this->setIfExists('is_frozen', $data ?? [], null);
        $this->setIfExists('billing_contact_employee_id', $data ?? [], null);
        $this->setIfExists('marketing_contact_employee_id', $data ?? [], null);
        $this->setIfExists('technical_contact_employee_id', $data ?? [], null);
        $this->setIfExists('customer_service_contact_employee_id', $data ?? [], null);
        $this->setIfExists('stripe_customer_id', $data ?? [], null);
        $this->setIfExists('is_payment_method_provided', $data ?? [], null);
        $this->setIfExists('plan_nickname', $data ?? [], null);
        $this->setIfExists('max_sms_count', $data ?? [], null);
        $this->setIfExists('is_sms_agreement', $data ?? [], null);
        $this->setIfExists('is_white_labeled', $data ?? [], null);
        $this->setIfExists('is_featured', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ($this->container['address1'] === null) {
            $invalidProperties[] = "'address1' can't be null";
        }
        if ($this->container['address2'] === null) {
            $invalidProperties[] = "'address2' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 10)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['id']) < 10)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['industry'] === null) {
            $invalidProperties[] = "'industry' can't be null";
        }
        if ($this->container['industry_name'] === null) {
            $invalidProperties[] = "'industry_name' can't be null";
        }
        if ($this->container['info_genesis_property_id'] === null) {
            $invalidProperties[] = "'info_genesis_property_id' can't be null";
        }
        if ($this->container['is_frozen'] === null) {
            $invalidProperties[] = "'is_frozen' can't be null";
        }
        if ($this->container['billing_contact_employee_id'] === null) {
            $invalidProperties[] = "'billing_contact_employee_id' can't be null";
        }
        if ($this->container['marketing_contact_employee_id'] === null) {
            $invalidProperties[] = "'marketing_contact_employee_id' can't be null";
        }
        if ($this->container['technical_contact_employee_id'] === null) {
            $invalidProperties[] = "'technical_contact_employee_id' can't be null";
        }
        if ($this->container['customer_service_contact_employee_id'] === null) {
            $invalidProperties[] = "'customer_service_contact_employee_id' can't be null";
        }
        if ($this->container['stripe_customer_id'] === null) {
            $invalidProperties[] = "'stripe_customer_id' can't be null";
        }
        if ($this->container['is_payment_method_provided'] === null) {
            $invalidProperties[] = "'is_payment_method_provided' can't be null";
        }
        if ($this->container['plan_nickname'] === null) {
            $invalidProperties[] = "'plan_nickname' can't be null";
        }
        if ($this->container['max_sms_count'] === null) {
            $invalidProperties[] = "'max_sms_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 address1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (is_null($address1)) {
            throw new \InvalidArgumentException('non-nullable address1 cannot be null');
        }
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 address2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (is_null($address2)) {
            throw new \InvalidArgumentException('non-nullable address2 cannot be null');
        }
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets currency_abbreviation
     *
     * @return string|null
     */
    public function getCurrencyAbbreviation()
    {
        return $this->container['currency_abbreviation'];
    }

    /**
     * Sets currency_abbreviation
     *
     * @param string|null $currency_abbreviation currency_abbreviation
     *
     * @return self
     */
    public function setCurrencyAbbreviation($currency_abbreviation)
    {
        if (is_null($currency_abbreviation)) {
            throw new \InvalidArgumentException('non-nullable currency_abbreviation cannot be null');
        }
        $this->container['currency_abbreviation'] = $currency_abbreviation;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if ((mb_strlen($id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Merchant., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Merchant., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling Merchant., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string $industry industry
     *
     * @return self
     */
    public function setIndustry($industry)
    {
        if (is_null($industry)) {
            throw new \InvalidArgumentException('non-nullable industry cannot be null');
        }
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets industry_name
     *
     * @return string
     */
    public function getIndustryName()
    {
        return $this->container['industry_name'];
    }

    /**
     * Sets industry_name
     *
     * @param string $industry_name industry_name
     *
     * @return self
     */
    public function setIndustryName($industry_name)
    {
        if (is_null($industry_name)) {
            throw new \InvalidArgumentException('non-nullable industry_name cannot be null');
        }
        $this->container['industry_name'] = $industry_name;

        return $this;
    }

    /**
     * Gets info_genesis_property_id
     *
     * @return string
     */
    public function getInfoGenesisPropertyId()
    {
        return $this->container['info_genesis_property_id'];
    }

    /**
     * Sets info_genesis_property_id
     *
     * @param string $info_genesis_property_id info_genesis_property_id
     *
     * @return self
     */
    public function setInfoGenesisPropertyId($info_genesis_property_id)
    {
        if (is_null($info_genesis_property_id)) {
            throw new \InvalidArgumentException('non-nullable info_genesis_property_id cannot be null');
        }
        $this->container['info_genesis_property_id'] = $info_genesis_property_id;

        return $this;
    }

    /**
     * Gets is_frozen
     *
     * @return bool
     */
    public function getIsFrozen()
    {
        return $this->container['is_frozen'];
    }

    /**
     * Sets is_frozen
     *
     * @param bool $is_frozen is_frozen
     *
     * @return self
     */
    public function setIsFrozen($is_frozen)
    {
        if (is_null($is_frozen)) {
            throw new \InvalidArgumentException('non-nullable is_frozen cannot be null');
        }
        $this->container['is_frozen'] = $is_frozen;

        return $this;
    }

    /**
     * Gets billing_contact_employee_id
     *
     * @return string
     */
    public function getBillingContactEmployeeId()
    {
        return $this->container['billing_contact_employee_id'];
    }

    /**
     * Sets billing_contact_employee_id
     *
     * @param string $billing_contact_employee_id billing_contact_employee_id
     *
     * @return self
     */
    public function setBillingContactEmployeeId($billing_contact_employee_id)
    {
        if (is_null($billing_contact_employee_id)) {
            throw new \InvalidArgumentException('non-nullable billing_contact_employee_id cannot be null');
        }
        $this->container['billing_contact_employee_id'] = $billing_contact_employee_id;

        return $this;
    }

    /**
     * Gets marketing_contact_employee_id
     *
     * @return string
     */
    public function getMarketingContactEmployeeId()
    {
        return $this->container['marketing_contact_employee_id'];
    }

    /**
     * Sets marketing_contact_employee_id
     *
     * @param string $marketing_contact_employee_id marketing_contact_employee_id
     *
     * @return self
     */
    public function setMarketingContactEmployeeId($marketing_contact_employee_id)
    {
        if (is_null($marketing_contact_employee_id)) {
            throw new \InvalidArgumentException('non-nullable marketing_contact_employee_id cannot be null');
        }
        $this->container['marketing_contact_employee_id'] = $marketing_contact_employee_id;

        return $this;
    }

    /**
     * Gets technical_contact_employee_id
     *
     * @return string
     */
    public function getTechnicalContactEmployeeId()
    {
        return $this->container['technical_contact_employee_id'];
    }

    /**
     * Sets technical_contact_employee_id
     *
     * @param string $technical_contact_employee_id technical_contact_employee_id
     *
     * @return self
     */
    public function setTechnicalContactEmployeeId($technical_contact_employee_id)
    {
        if (is_null($technical_contact_employee_id)) {
            throw new \InvalidArgumentException('non-nullable technical_contact_employee_id cannot be null');
        }
        $this->container['technical_contact_employee_id'] = $technical_contact_employee_id;

        return $this;
    }

    /**
     * Gets customer_service_contact_employee_id
     *
     * @return string
     */
    public function getCustomerServiceContactEmployeeId()
    {
        return $this->container['customer_service_contact_employee_id'];
    }

    /**
     * Sets customer_service_contact_employee_id
     *
     * @param string $customer_service_contact_employee_id customer_service_contact_employee_id
     *
     * @return self
     */
    public function setCustomerServiceContactEmployeeId($customer_service_contact_employee_id)
    {
        if (is_null($customer_service_contact_employee_id)) {
            throw new \InvalidArgumentException('non-nullable customer_service_contact_employee_id cannot be null');
        }
        $this->container['customer_service_contact_employee_id'] = $customer_service_contact_employee_id;

        return $this;
    }

    /**
     * Gets stripe_customer_id
     *
     * @return string
     */
    public function getStripeCustomerId()
    {
        return $this->container['stripe_customer_id'];
    }

    /**
     * Sets stripe_customer_id
     *
     * @param string $stripe_customer_id stripe_customer_id
     *
     * @return self
     */
    public function setStripeCustomerId($stripe_customer_id)
    {
        if (is_null($stripe_customer_id)) {
            throw new \InvalidArgumentException('non-nullable stripe_customer_id cannot be null');
        }
        $this->container['stripe_customer_id'] = $stripe_customer_id;

        return $this;
    }

    /**
     * Gets is_payment_method_provided
     *
     * @return bool
     */
    public function getIsPaymentMethodProvided()
    {
        return $this->container['is_payment_method_provided'];
    }

    /**
     * Sets is_payment_method_provided
     *
     * @param bool $is_payment_method_provided is_payment_method_provided
     *
     * @return self
     */
    public function setIsPaymentMethodProvided($is_payment_method_provided)
    {
        if (is_null($is_payment_method_provided)) {
            throw new \InvalidArgumentException('non-nullable is_payment_method_provided cannot be null');
        }
        $this->container['is_payment_method_provided'] = $is_payment_method_provided;

        return $this;
    }

    /**
     * Gets plan_nickname
     *
     * @return string
     */
    public function getPlanNickname()
    {
        return $this->container['plan_nickname'];
    }

    /**
     * Sets plan_nickname
     *
     * @param string $plan_nickname plan_nickname
     *
     * @return self
     */
    public function setPlanNickname($plan_nickname)
    {
        if (is_null($plan_nickname)) {
            throw new \InvalidArgumentException('non-nullable plan_nickname cannot be null');
        }
        $this->container['plan_nickname'] = $plan_nickname;

        return $this;
    }

    /**
     * Gets max_sms_count
     *
     * @return float
     */
    public function getMaxSmsCount()
    {
        return $this->container['max_sms_count'];
    }

    /**
     * Sets max_sms_count
     *
     * @param float $max_sms_count max_sms_count
     *
     * @return self
     */
    public function setMaxSmsCount($max_sms_count)
    {
        if (is_null($max_sms_count)) {
            throw new \InvalidArgumentException('non-nullable max_sms_count cannot be null');
        }
        $this->container['max_sms_count'] = $max_sms_count;

        return $this;
    }

    /**
     * Gets is_sms_agreement
     *
     * @return bool|null
     */
    public function getIsSmsAgreement()
    {
        return $this->container['is_sms_agreement'];
    }

    /**
     * Sets is_sms_agreement
     *
     * @param bool|null $is_sms_agreement is_sms_agreement
     *
     * @return self
     */
    public function setIsSmsAgreement($is_sms_agreement)
    {
        if (is_null($is_sms_agreement)) {
            throw new \InvalidArgumentException('non-nullable is_sms_agreement cannot be null');
        }
        $this->container['is_sms_agreement'] = $is_sms_agreement;

        return $this;
    }

    /**
     * Gets is_white_labeled
     *
     * @return bool|null
     */
    public function getIsWhiteLabeled()
    {
        return $this->container['is_white_labeled'];
    }

    /**
     * Sets is_white_labeled
     *
     * @param bool|null $is_white_labeled is_white_labeled
     *
     * @return self
     */
    public function setIsWhiteLabeled($is_white_labeled)
    {
        if (is_null($is_white_labeled)) {
            throw new \InvalidArgumentException('non-nullable is_white_labeled cannot be null');
        }
        $this->container['is_white_labeled'] = $is_white_labeled;

        return $this;
    }

    /**
     * Gets is_featured
     *
     * @return bool|null
     */
    public function getIsFeatured()
    {
        return $this->container['is_featured'];
    }

    /**
     * Sets is_featured
     *
     * @param bool|null $is_featured is_featured
     *
     * @return self
     */
    public function setIsFeatured($is_featured)
    {
        if (is_null($is_featured)) {
            throw new \InvalidArgumentException('non-nullable is_featured cannot be null');
        }
        $this->container['is_featured'] = $is_featured;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


