<?php
/**
 * PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.524
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID Class Doc Comment
 *
 * @category Class
 * @description From T, pick a set of properties whose keys are in the union K
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Pick_VSPaymentDesignCreateParams.Exclude_keyofVSPaymentDesignCreateParams.backgroundImageURL-or-companyLogoURL-or-employeeID__';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'border_color' => 'string',
        'border_style_type' => 'string',
        'border_size' => 'string',
        'border_radius' => 'int',
        'font_color' => 'string',
        'font_type' => 'string',
        'abbreviation' => 'string',
        'acronym' => 'string',
        'icon' => 'string',
        'design_name' => 'string',
        'display_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'border_color' => null,
        'border_style_type' => null,
        'border_size' => null,
        'border_radius' => 'int32',
        'font_color' => null,
        'font_type' => null,
        'abbreviation' => null,
        'acronym' => null,
        'icon' => null,
        'design_name' => null,
        'display_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'border_color' => 'borderColor',
        'border_style_type' => 'borderStyleType',
        'border_size' => 'borderSize',
        'border_radius' => 'borderRadius',
        'font_color' => 'fontColor',
        'font_type' => 'fontType',
        'abbreviation' => 'abbreviation',
        'acronym' => 'acronym',
        'icon' => 'icon',
        'design_name' => 'designName',
        'display_name' => 'displayName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'border_color' => 'setBorderColor',
        'border_style_type' => 'setBorderStyleType',
        'border_size' => 'setBorderSize',
        'border_radius' => 'setBorderRadius',
        'font_color' => 'setFontColor',
        'font_type' => 'setFontType',
        'abbreviation' => 'setAbbreviation',
        'acronym' => 'setAcronym',
        'icon' => 'setIcon',
        'design_name' => 'setDesignName',
        'display_name' => 'setDisplayName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'border_color' => 'getBorderColor',
        'border_style_type' => 'getBorderStyleType',
        'border_size' => 'getBorderSize',
        'border_radius' => 'getBorderRadius',
        'font_color' => 'getFontColor',
        'font_type' => 'getFontType',
        'abbreviation' => 'getAbbreviation',
        'acronym' => 'getAcronym',
        'icon' => 'getIcon',
        'design_name' => 'getDesignName',
        'display_name' => 'getDisplayName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['border_color'] = $data['border_color'] ?? null;
        $this->container['border_style_type'] = $data['border_style_type'] ?? null;
        $this->container['border_size'] = $data['border_size'] ?? null;
        $this->container['border_radius'] = $data['border_radius'] ?? null;
        $this->container['font_color'] = $data['font_color'] ?? null;
        $this->container['font_type'] = $data['font_type'] ?? null;
        $this->container['abbreviation'] = $data['abbreviation'] ?? null;
        $this->container['acronym'] = $data['acronym'] ?? null;
        $this->container['icon'] = $data['icon'] ?? null;
        $this->container['design_name'] = $data['design_name'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['border_color'] === null) {
            $invalidProperties[] = "'border_color' can't be null";
        }
        if (!preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $this->container['border_color'])) {
            $invalidProperties[] = "invalid value for 'border_color', must be conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.";
        }

        if ($this->container['border_style_type'] === null) {
            $invalidProperties[] = "'border_style_type' can't be null";
        }
        if ($this->container['border_size'] === null) {
            $invalidProperties[] = "'border_size' can't be null";
        }
        if ((mb_strlen($this->container['border_size']) < 1)) {
            $invalidProperties[] = "invalid value for 'border_size', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['border_radius'] === null) {
            $invalidProperties[] = "'border_radius' can't be null";
        }
        if (($this->container['border_radius'] > 20)) {
            $invalidProperties[] = "invalid value for 'border_radius', must be smaller than or equal to 20.";
        }

        if (($this->container['border_radius'] < 0)) {
            $invalidProperties[] = "invalid value for 'border_radius', must be bigger than or equal to 0.";
        }

        if ($this->container['font_color'] === null) {
            $invalidProperties[] = "'font_color' can't be null";
        }
        if (!preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $this->container['font_color'])) {
            $invalidProperties[] = "invalid value for 'font_color', must be conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.";
        }

        if ($this->container['font_type'] === null) {
            $invalidProperties[] = "'font_type' can't be null";
        }
        if ((mb_strlen($this->container['font_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'font_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['abbreviation'] === null) {
            $invalidProperties[] = "'abbreviation' can't be null";
        }
        if ((mb_strlen($this->container['abbreviation']) < 1)) {
            $invalidProperties[] = "invalid value for 'abbreviation', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['acronym'] === null) {
            $invalidProperties[] = "'acronym' can't be null";
        }
        if ((mb_strlen($this->container['acronym']) < 1)) {
            $invalidProperties[] = "invalid value for 'acronym', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['icon'] === null) {
            $invalidProperties[] = "'icon' can't be null";
        }
        if ((mb_strlen($this->container['icon']) < 1)) {
            $invalidProperties[] = "invalid value for 'icon', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['design_name'] === null) {
            $invalidProperties[] = "'design_name' can't be null";
        }
        if ((mb_strlen($this->container['design_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'design_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ((mb_strlen($this->container['display_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets border_color
     *
     * @return string
     */
    public function getBorderColor()
    {
        return $this->container['border_color'];
    }

    /**
     * Sets border_color
     *
     * @param string $border_color border_color
     *
     * @return self
     */
    public function setBorderColor($border_color)
    {

        if ((!preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $border_color))) {
            throw new \InvalidArgumentException("invalid value for $border_color when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.");
        }

        $this->container['border_color'] = $border_color;

        return $this;
    }

    /**
     * Gets border_style_type
     *
     * @return string
     */
    public function getBorderStyleType()
    {
        return $this->container['border_style_type'];
    }

    /**
     * Sets border_style_type
     *
     * @param string $border_style_type border_style_type
     *
     * @return self
     */
    public function setBorderStyleType($border_style_type)
    {
        $this->container['border_style_type'] = $border_style_type;

        return $this;
    }

    /**
     * Gets border_size
     *
     * @return string
     */
    public function getBorderSize()
    {
        return $this->container['border_size'];
    }

    /**
     * Sets border_size
     *
     * @param string $border_size border_size
     *
     * @return self
     */
    public function setBorderSize($border_size)
    {

        if ((mb_strlen($border_size) < 1)) {
            throw new \InvalidArgumentException('invalid length for $border_size when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must be bigger than or equal to 1.');
        }

        $this->container['border_size'] = $border_size;

        return $this;
    }

    /**
     * Gets border_radius
     *
     * @return int
     */
    public function getBorderRadius()
    {
        return $this->container['border_radius'];
    }

    /**
     * Sets border_radius
     *
     * @param int $border_radius border_radius
     *
     * @return self
     */
    public function setBorderRadius($border_radius)
    {

        if (($border_radius > 20)) {
            throw new \InvalidArgumentException('invalid value for $border_radius when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must be smaller than or equal to 20.');
        }
        if (($border_radius < 0)) {
            throw new \InvalidArgumentException('invalid value for $border_radius when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must be bigger than or equal to 0.');
        }

        $this->container['border_radius'] = $border_radius;

        return $this;
    }

    /**
     * Gets font_color
     *
     * @return string
     */
    public function getFontColor()
    {
        return $this->container['font_color'];
    }

    /**
     * Sets font_color
     *
     * @param string $font_color font_color
     *
     * @return self
     */
    public function setFontColor($font_color)
    {

        if ((!preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $font_color))) {
            throw new \InvalidArgumentException("invalid value for $font_color when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.");
        }

        $this->container['font_color'] = $font_color;

        return $this;
    }

    /**
     * Gets font_type
     *
     * @return string
     */
    public function getFontType()
    {
        return $this->container['font_type'];
    }

    /**
     * Sets font_type
     *
     * @param string $font_type font_type
     *
     * @return self
     */
    public function setFontType($font_type)
    {

        if ((mb_strlen($font_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $font_type when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must be bigger than or equal to 1.');
        }

        $this->container['font_type'] = $font_type;

        return $this;
    }

    /**
     * Gets abbreviation
     *
     * @return string
     */
    public function getAbbreviation()
    {
        return $this->container['abbreviation'];
    }

    /**
     * Sets abbreviation
     *
     * @param string $abbreviation abbreviation
     *
     * @return self
     */
    public function setAbbreviation($abbreviation)
    {

        if ((mb_strlen($abbreviation) < 1)) {
            throw new \InvalidArgumentException('invalid length for $abbreviation when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must be bigger than or equal to 1.');
        }

        $this->container['abbreviation'] = $abbreviation;

        return $this;
    }

    /**
     * Gets acronym
     *
     * @return string
     */
    public function getAcronym()
    {
        return $this->container['acronym'];
    }

    /**
     * Sets acronym
     *
     * @param string $acronym acronym
     *
     * @return self
     */
    public function setAcronym($acronym)
    {

        if ((mb_strlen($acronym) < 1)) {
            throw new \InvalidArgumentException('invalid length for $acronym when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must be bigger than or equal to 1.');
        }

        $this->container['acronym'] = $acronym;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {

        if ((mb_strlen($icon) < 1)) {
            throw new \InvalidArgumentException('invalid length for $icon when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must be bigger than or equal to 1.');
        }

        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets design_name
     *
     * @return string
     */
    public function getDesignName()
    {
        return $this->container['design_name'];
    }

    /**
     * Sets design_name
     *
     * @param string $design_name design_name
     *
     * @return self
     */
    public function setDesignName($design_name)
    {

        if ((mb_strlen($design_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $design_name when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must be bigger than or equal to 1.');
        }

        $this->container['design_name'] = $design_name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {

        if ((mb_strlen($display_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling PickVSPaymentDesignCreateParamsExcludeKeyofVSPaymentDesignCreateParamsBackgroundImageURLOrCompanyLogoURLOrEmployeeID., must be bigger than or equal to 1.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


