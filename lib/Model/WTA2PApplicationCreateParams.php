<?php
/**
 * WTA2PApplicationCreateParams
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.535
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WTA2PApplicationCreateParams Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class WTA2PApplicationCreateParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WTA2PApplicationCreateParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_name' => 'string',
        'business_type' => '\OpenAPI\Client\Model\BusinessType',
        'business_classification' => '\OpenAPI\Client\Model\BusinessClassification',
        'business_industry' => '\OpenAPI\Client\Model\BusinessIndustry',
        'tax_id_type' => '\OpenAPI\Client\Model\BusinessRegistrationIdentifier',
        'tax_id' => 'string',
        'website_url' => 'string',
        'social_media_url' => 'string',
        'regions_of_operation' => '\OpenAPI\Client\Model\BusinessRegionsOfOperation[]',
        'messaging_volume_high' => 'bool',
        'address1' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'job_title' => 'string',
        'job_position' => '\OpenAPI\Client\Model\JobPosition',
        'phone_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_name' => null,
        'business_type' => null,
        'business_classification' => null,
        'business_industry' => null,
        'tax_id_type' => null,
        'tax_id' => null,
        'website_url' => null,
        'social_media_url' => null,
        'regions_of_operation' => null,
        'messaging_volume_high' => null,
        'address1' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'country' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'job_title' => null,
        'job_position' => null,
        'phone_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_name' => 'businessName',
        'business_type' => 'businessType',
        'business_classification' => 'businessClassification',
        'business_industry' => 'businessIndustry',
        'tax_id_type' => 'taxIDType',
        'tax_id' => 'taxID',
        'website_url' => 'websiteURL',
        'social_media_url' => 'socialMediaURL',
        'regions_of_operation' => 'regionsOfOperation',
        'messaging_volume_high' => 'messagingVolumeHigh',
        'address1' => 'address1',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'job_title' => 'jobTitle',
        'job_position' => 'jobPosition',
        'phone_number' => 'phoneNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_name' => 'setBusinessName',
        'business_type' => 'setBusinessType',
        'business_classification' => 'setBusinessClassification',
        'business_industry' => 'setBusinessIndustry',
        'tax_id_type' => 'setTaxIdType',
        'tax_id' => 'setTaxId',
        'website_url' => 'setWebsiteUrl',
        'social_media_url' => 'setSocialMediaUrl',
        'regions_of_operation' => 'setRegionsOfOperation',
        'messaging_volume_high' => 'setMessagingVolumeHigh',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'job_title' => 'setJobTitle',
        'job_position' => 'setJobPosition',
        'phone_number' => 'setPhoneNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_name' => 'getBusinessName',
        'business_type' => 'getBusinessType',
        'business_classification' => 'getBusinessClassification',
        'business_industry' => 'getBusinessIndustry',
        'tax_id_type' => 'getTaxIdType',
        'tax_id' => 'getTaxId',
        'website_url' => 'getWebsiteUrl',
        'social_media_url' => 'getSocialMediaUrl',
        'regions_of_operation' => 'getRegionsOfOperation',
        'messaging_volume_high' => 'getMessagingVolumeHigh',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'job_title' => 'getJobTitle',
        'job_position' => 'getJobPosition',
        'phone_number' => 'getPhoneNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_name'] = $data['business_name'] ?? null;
        $this->container['business_type'] = $data['business_type'] ?? null;
        $this->container['business_classification'] = $data['business_classification'] ?? null;
        $this->container['business_industry'] = $data['business_industry'] ?? null;
        $this->container['tax_id_type'] = $data['tax_id_type'] ?? null;
        $this->container['tax_id'] = $data['tax_id'] ?? null;
        $this->container['website_url'] = $data['website_url'] ?? null;
        $this->container['social_media_url'] = $data['social_media_url'] ?? null;
        $this->container['regions_of_operation'] = $data['regions_of_operation'] ?? null;
        $this->container['messaging_volume_high'] = $data['messaging_volume_high'] ?? null;
        $this->container['address1'] = $data['address1'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['job_title'] = $data['job_title'] ?? null;
        $this->container['job_position'] = $data['job_position'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_name'] === null) {
            $invalidProperties[] = "'business_name' can't be null";
        }
        if ((mb_strlen($this->container['business_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'business_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['business_type'] === null) {
            $invalidProperties[] = "'business_type' can't be null";
        }
        if ($this->container['business_classification'] === null) {
            $invalidProperties[] = "'business_classification' can't be null";
        }
        if ($this->container['business_industry'] === null) {
            $invalidProperties[] = "'business_industry' can't be null";
        }
        if ($this->container['tax_id_type'] === null) {
            $invalidProperties[] = "'tax_id_type' can't be null";
        }
        if ($this->container['tax_id'] === null) {
            $invalidProperties[] = "'tax_id' can't be null";
        }
        if ((mb_strlen($this->container['tax_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['website_url'] === null) {
            $invalidProperties[] = "'website_url' can't be null";
        }
        if ((mb_strlen($this->container['website_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'website_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['social_media_url'] === null) {
            $invalidProperties[] = "'social_media_url' can't be null";
        }
        if ((mb_strlen($this->container['social_media_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'social_media_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['regions_of_operation'] === null) {
            $invalidProperties[] = "'regions_of_operation' can't be null";
        }
        if ($this->container['messaging_volume_high'] === null) {
            $invalidProperties[] = "'messaging_volume_high' can't be null";
        }
        if ($this->container['address1'] === null) {
            $invalidProperties[] = "'address1' can't be null";
        }
        if ($this->container['address2'] === null) {
            $invalidProperties[] = "'address2' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['job_title'] === null) {
            $invalidProperties[] = "'job_title' can't be null";
        }
        if ($this->container['job_position'] === null) {
            $invalidProperties[] = "'job_position' can't be null";
        }
        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_name
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string $business_name business_name
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {

        if ((mb_strlen($business_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $business_name when calling WTA2PApplicationCreateParams., must be bigger than or equal to 1.');
        }

        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return \OpenAPI\Client\Model\BusinessType
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param \OpenAPI\Client\Model\BusinessType $business_type business_type
     *
     * @return self
     */
    public function setBusinessType($business_type)
    {
        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets business_classification
     *
     * @return \OpenAPI\Client\Model\BusinessClassification
     */
    public function getBusinessClassification()
    {
        return $this->container['business_classification'];
    }

    /**
     * Sets business_classification
     *
     * @param \OpenAPI\Client\Model\BusinessClassification $business_classification business_classification
     *
     * @return self
     */
    public function setBusinessClassification($business_classification)
    {
        $this->container['business_classification'] = $business_classification;

        return $this;
    }

    /**
     * Gets business_industry
     *
     * @return \OpenAPI\Client\Model\BusinessIndustry
     */
    public function getBusinessIndustry()
    {
        return $this->container['business_industry'];
    }

    /**
     * Sets business_industry
     *
     * @param \OpenAPI\Client\Model\BusinessIndustry $business_industry business_industry
     *
     * @return self
     */
    public function setBusinessIndustry($business_industry)
    {
        $this->container['business_industry'] = $business_industry;

        return $this;
    }

    /**
     * Gets tax_id_type
     *
     * @return \OpenAPI\Client\Model\BusinessRegistrationIdentifier
     */
    public function getTaxIdType()
    {
        return $this->container['tax_id_type'];
    }

    /**
     * Sets tax_id_type
     *
     * @param \OpenAPI\Client\Model\BusinessRegistrationIdentifier $tax_id_type tax_id_type
     *
     * @return self
     */
    public function setTaxIdType($tax_id_type)
    {
        $this->container['tax_id_type'] = $tax_id_type;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {

        if ((mb_strlen($tax_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_id when calling WTA2PApplicationCreateParams., must be bigger than or equal to 1.');
        }

        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url website_url
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {

        if ((mb_strlen($website_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling WTA2PApplicationCreateParams., must be bigger than or equal to 1.');
        }

        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets social_media_url
     *
     * @return string
     */
    public function getSocialMediaUrl()
    {
        return $this->container['social_media_url'];
    }

    /**
     * Sets social_media_url
     *
     * @param string $social_media_url social_media_url
     *
     * @return self
     */
    public function setSocialMediaUrl($social_media_url)
    {

        if ((mb_strlen($social_media_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $social_media_url when calling WTA2PApplicationCreateParams., must be bigger than or equal to 1.');
        }

        $this->container['social_media_url'] = $social_media_url;

        return $this;
    }

    /**
     * Gets regions_of_operation
     *
     * @return \OpenAPI\Client\Model\BusinessRegionsOfOperation[]
     */
    public function getRegionsOfOperation()
    {
        return $this->container['regions_of_operation'];
    }

    /**
     * Sets regions_of_operation
     *
     * @param \OpenAPI\Client\Model\BusinessRegionsOfOperation[] $regions_of_operation regions_of_operation
     *
     * @return self
     */
    public function setRegionsOfOperation($regions_of_operation)
    {


        $this->container['regions_of_operation'] = $regions_of_operation;

        return $this;
    }

    /**
     * Gets messaging_volume_high
     *
     * @return bool
     */
    public function getMessagingVolumeHigh()
    {
        return $this->container['messaging_volume_high'];
    }

    /**
     * Sets messaging_volume_high
     *
     * @param bool $messaging_volume_high messaging_volume_high
     *
     * @return self
     */
    public function setMessagingVolumeHigh($messaging_volume_high)
    {
        $this->container['messaging_volume_high'] = $messaging_volume_high;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 address1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 address2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title job_title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets job_position
     *
     * @return \OpenAPI\Client\Model\JobPosition
     */
    public function getJobPosition()
    {
        return $this->container['job_position'];
    }

    /**
     * Sets job_position
     *
     * @param \OpenAPI\Client\Model\JobPosition $job_position job_position
     *
     * @return self
     */
    public function setJobPosition($job_position)
    {
        $this->container['job_position'] = $job_position;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


