<?php
/**
 * WTAuthenticationRegister
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WTAuthenticationRegister Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WTAuthenticationRegister implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WTAuthenticationRegister';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'password' => 'string',
        'hear_about_us' => 'string',
        'hear_about_us_details' => 'string',
        'company_name' => 'string',
        'merchant_type' => 'string',
        'street_address1' => 'string',
        'street_address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'country' => 'string',
        'phone_number' => 'string',
        'ein' => 'string',
        'ga_client_id' => 'string',
        'ga_measurement_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'password' => null,
        'hear_about_us' => null,
        'hear_about_us_details' => null,
        'company_name' => null,
        'merchant_type' => null,
        'street_address1' => null,
        'street_address2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'country' => null,
        'phone_number' => null,
        'ein' => null,
        'ga_client_id' => null,
        'ga_measurement_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'first_name' => false,
        'last_name' => false,
        'email' => false,
        'password' => false,
        'hear_about_us' => false,
        'hear_about_us_details' => false,
        'company_name' => false,
        'merchant_type' => false,
        'street_address1' => false,
        'street_address2' => false,
        'city' => false,
        'state' => false,
        'zip' => false,
        'country' => false,
        'phone_number' => false,
        'ein' => false,
        'ga_client_id' => false,
        'ga_measurement_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'password' => 'password',
        'hear_about_us' => 'hearAboutUs',
        'hear_about_us_details' => 'hearAboutUsDetails',
        'company_name' => 'companyName',
        'merchant_type' => 'merchantType',
        'street_address1' => 'streetAddress1',
        'street_address2' => 'streetAddress2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'country' => 'country',
        'phone_number' => 'phoneNumber',
        'ein' => 'ein',
        'ga_client_id' => 'ga_client_id',
        'ga_measurement_id' => 'ga_measurement_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'password' => 'setPassword',
        'hear_about_us' => 'setHearAboutUs',
        'hear_about_us_details' => 'setHearAboutUsDetails',
        'company_name' => 'setCompanyName',
        'merchant_type' => 'setMerchantType',
        'street_address1' => 'setStreetAddress1',
        'street_address2' => 'setStreetAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'phone_number' => 'setPhoneNumber',
        'ein' => 'setEin',
        'ga_client_id' => 'setGaClientId',
        'ga_measurement_id' => 'setGaMeasurementId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'password' => 'getPassword',
        'hear_about_us' => 'getHearAboutUs',
        'hear_about_us_details' => 'getHearAboutUsDetails',
        'company_name' => 'getCompanyName',
        'merchant_type' => 'getMerchantType',
        'street_address1' => 'getStreetAddress1',
        'street_address2' => 'getStreetAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'phone_number' => 'getPhoneNumber',
        'ein' => 'getEin',
        'ga_client_id' => 'getGaClientId',
        'ga_measurement_id' => 'getGaMeasurementId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('hear_about_us', $data ?? [], null);
        $this->setIfExists('hear_about_us_details', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('merchant_type', $data ?? [], null);
        $this->setIfExists('street_address1', $data ?? [], null);
        $this->setIfExists('street_address2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('ein', $data ?? [], null);
        $this->setIfExists('ga_client_id', $data ?? [], null);
        $this->setIfExists('ga_measurement_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) > 100)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['hear_about_us']) && (mb_strlen($this->container['hear_about_us']) > 100)) {
            $invalidProperties[] = "invalid value for 'hear_about_us', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['hear_about_us_details']) && (mb_strlen($this->container['hear_about_us_details']) > 100)) {
            $invalidProperties[] = "invalid value for 'hear_about_us_details', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ((mb_strlen($this->container['company_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['merchant_type'] === null) {
            $invalidProperties[] = "'merchant_type' can't be null";
        }
        if ((mb_strlen($this->container['merchant_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'merchant_type', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['street_address1'] === null) {
            $invalidProperties[] = "'street_address1' can't be null";
        }
        if ((mb_strlen($this->container['street_address1']) > 200)) {
            $invalidProperties[] = "invalid value for 'street_address1', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['street_address2'] === null) {
            $invalidProperties[] = "'street_address2' can't be null";
        }
        if ((mb_strlen($this->container['street_address2']) > 200)) {
            $invalidProperties[] = "invalid value for 'street_address2', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 100)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ((mb_strlen($this->container['state']) > 100)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ((mb_strlen($this->container['zip']) > 100)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ((mb_strlen($this->container['country']) > 100)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ((mb_strlen($this->container['phone_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['ein']) && (mb_strlen($this->container['ein']) > 100)) {
            $invalidProperties[] = "invalid value for 'ein', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        if ((mb_strlen($password) > 100)) {
            throw new \InvalidArgumentException('invalid length for $password when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets hear_about_us
     *
     * @return string|null
     */
    public function getHearAboutUs()
    {
        return $this->container['hear_about_us'];
    }

    /**
     * Sets hear_about_us
     *
     * @param string|null $hear_about_us hear_about_us
     *
     * @return self
     */
    public function setHearAboutUs($hear_about_us)
    {
        if (is_null($hear_about_us)) {
            throw new \InvalidArgumentException('non-nullable hear_about_us cannot be null');
        }
        if ((mb_strlen($hear_about_us) > 100)) {
            throw new \InvalidArgumentException('invalid length for $hear_about_us when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['hear_about_us'] = $hear_about_us;

        return $this;
    }

    /**
     * Gets hear_about_us_details
     *
     * @return string|null
     */
    public function getHearAboutUsDetails()
    {
        return $this->container['hear_about_us_details'];
    }

    /**
     * Sets hear_about_us_details
     *
     * @param string|null $hear_about_us_details hear_about_us_details
     *
     * @return self
     */
    public function setHearAboutUsDetails($hear_about_us_details)
    {
        if (is_null($hear_about_us_details)) {
            throw new \InvalidArgumentException('non-nullable hear_about_us_details cannot be null');
        }
        if ((mb_strlen($hear_about_us_details) > 100)) {
            throw new \InvalidArgumentException('invalid length for $hear_about_us_details when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['hear_about_us_details'] = $hear_about_us_details;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        if ((mb_strlen($company_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets merchant_type
     *
     * @return string
     */
    public function getMerchantType()
    {
        return $this->container['merchant_type'];
    }

    /**
     * Sets merchant_type
     *
     * @param string $merchant_type merchant_type
     *
     * @return self
     */
    public function setMerchantType($merchant_type)
    {
        if (is_null($merchant_type)) {
            throw new \InvalidArgumentException('non-nullable merchant_type cannot be null');
        }
        if ((mb_strlen($merchant_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $merchant_type when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['merchant_type'] = $merchant_type;

        return $this;
    }

    /**
     * Gets street_address1
     *
     * @return string
     */
    public function getStreetAddress1()
    {
        return $this->container['street_address1'];
    }

    /**
     * Sets street_address1
     *
     * @param string $street_address1 street_address1
     *
     * @return self
     */
    public function setStreetAddress1($street_address1)
    {
        if (is_null($street_address1)) {
            throw new \InvalidArgumentException('non-nullable street_address1 cannot be null');
        }
        if ((mb_strlen($street_address1) > 200)) {
            throw new \InvalidArgumentException('invalid length for $street_address1 when calling WTAuthenticationRegister., must be smaller than or equal to 200.');
        }

        $this->container['street_address1'] = $street_address1;

        return $this;
    }

    /**
     * Gets street_address2
     *
     * @return string
     */
    public function getStreetAddress2()
    {
        return $this->container['street_address2'];
    }

    /**
     * Sets street_address2
     *
     * @param string $street_address2 street_address2
     *
     * @return self
     */
    public function setStreetAddress2($street_address2)
    {
        if (is_null($street_address2)) {
            throw new \InvalidArgumentException('non-nullable street_address2 cannot be null');
        }
        if ((mb_strlen($street_address2) > 200)) {
            throw new \InvalidArgumentException('invalid length for $street_address2 when calling WTAuthenticationRegister., must be smaller than or equal to 200.');
        }

        $this->container['street_address2'] = $street_address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $city when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        if ((mb_strlen($state) > 100)) {
            throw new \InvalidArgumentException('invalid length for $state when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        if ((mb_strlen($zip) > 100)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 100)) {
            throw new \InvalidArgumentException('invalid length for $country when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        if ((mb_strlen($phone_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets ein
     *
     * @return string|null
     */
    public function getEin()
    {
        return $this->container['ein'];
    }

    /**
     * Sets ein
     *
     * @param string|null $ein ein
     *
     * @return self
     */
    public function setEin($ein)
    {
        if (is_null($ein)) {
            throw new \InvalidArgumentException('non-nullable ein cannot be null');
        }
        if ((mb_strlen($ein) > 100)) {
            throw new \InvalidArgumentException('invalid length for $ein when calling WTAuthenticationRegister., must be smaller than or equal to 100.');
        }

        $this->container['ein'] = $ein;

        return $this;
    }

    /**
     * Gets ga_client_id
     *
     * @return string|null
     */
    public function getGaClientId()
    {
        return $this->container['ga_client_id'];
    }

    /**
     * Sets ga_client_id
     *
     * @param string|null $ga_client_id ga_client_id
     *
     * @return self
     */
    public function setGaClientId($ga_client_id)
    {
        if (is_null($ga_client_id)) {
            throw new \InvalidArgumentException('non-nullable ga_client_id cannot be null');
        }
        $this->container['ga_client_id'] = $ga_client_id;

        return $this;
    }

    /**
     * Gets ga_measurement_id
     *
     * @return string|null
     */
    public function getGaMeasurementId()
    {
        return $this->container['ga_measurement_id'];
    }

    /**
     * Sets ga_measurement_id
     *
     * @param string|null $ga_measurement_id ga_measurement_id
     *
     * @return self
     */
    public function setGaMeasurementId($ga_measurement_id)
    {
        if (is_null($ga_measurement_id)) {
            throw new \InvalidArgumentException('non-nullable ga_measurement_id cannot be null');
        }
        $this->container['ga_measurement_id'] = $ga_measurement_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


