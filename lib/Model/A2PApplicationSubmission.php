<?php
/**
 * A2PApplicationSubmission
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * A2PApplicationSubmission Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class A2PApplicationSubmission implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'A2PApplicationSubmission';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_twilio_terms_read' => 'bool',
        'is_privacy_policy_on_website' => 'bool',
        'is_tos_on_website' => 'bool',
        'is_stop_understood' => 'bool',
        'is_manual_read' => 'bool',
        'is_ctia_short_code_read' => 'bool',
        'is_standards_understood' => 'bool',
        'is_short_code_understood' => 'bool',
        'is_opt_in_out_understood' => 'bool',
        'is_short_code_transfer_understood' => 'bool',
        'is_pricing_understood' => 'bool',
        'is_short_code_timeline_understood' => 'bool',
        'business_name' => 'string',
        'business_type' => '\OpenAPI\Client\Model\BusinessType',
        'business_classification' => '\OpenAPI\Client\Model\BusinessClassification',
        'business_industry' => '\OpenAPI\Client\Model\BusinessIndustry',
        'tax_id_type' => '\OpenAPI\Client\Model\BusinessRegistrationIdentifier',
        'tax_id' => 'string',
        'website_url' => 'string',
        'social_media_url' => 'string',
        'regions_of_operation' => '\OpenAPI\Client\Model\BusinessRegionsOfOperation[]',
        'stock_exchange' => '\OpenAPI\Client\Model\BusinessStockExchanges',
        'stock_ticker' => 'string',
        'messaging_volume_high' => 'bool',
        'address1' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'job_title' => 'string',
        'job_position' => '\OpenAPI\Client\Model\JobPosition',
        'phone_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_twilio_terms_read' => null,
        'is_privacy_policy_on_website' => null,
        'is_tos_on_website' => null,
        'is_stop_understood' => null,
        'is_manual_read' => null,
        'is_ctia_short_code_read' => null,
        'is_standards_understood' => null,
        'is_short_code_understood' => null,
        'is_opt_in_out_understood' => null,
        'is_short_code_transfer_understood' => null,
        'is_pricing_understood' => null,
        'is_short_code_timeline_understood' => null,
        'business_name' => null,
        'business_type' => null,
        'business_classification' => null,
        'business_industry' => null,
        'tax_id_type' => null,
        'tax_id' => null,
        'website_url' => null,
        'social_media_url' => null,
        'regions_of_operation' => null,
        'stock_exchange' => null,
        'stock_ticker' => null,
        'messaging_volume_high' => null,
        'address1' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'country' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'job_title' => null,
        'job_position' => null,
        'phone_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_twilio_terms_read' => false,
        'is_privacy_policy_on_website' => false,
        'is_tos_on_website' => false,
        'is_stop_understood' => false,
        'is_manual_read' => false,
        'is_ctia_short_code_read' => false,
        'is_standards_understood' => false,
        'is_short_code_understood' => false,
        'is_opt_in_out_understood' => false,
        'is_short_code_transfer_understood' => false,
        'is_pricing_understood' => false,
        'is_short_code_timeline_understood' => false,
        'business_name' => false,
        'business_type' => false,
        'business_classification' => false,
        'business_industry' => false,
        'tax_id_type' => false,
        'tax_id' => false,
        'website_url' => false,
        'social_media_url' => false,
        'regions_of_operation' => false,
        'stock_exchange' => false,
        'stock_ticker' => false,
        'messaging_volume_high' => false,
        'address1' => false,
        'address2' => false,
        'city' => false,
        'state' => false,
        'postal_code' => false,
        'country' => false,
        'first_name' => false,
        'last_name' => false,
        'email' => false,
        'job_title' => false,
        'job_position' => false,
        'phone_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_twilio_terms_read' => 'isTwilioTermsRead',
        'is_privacy_policy_on_website' => 'isPrivacyPolicyOnWebsite',
        'is_tos_on_website' => 'isTosOnWebsite',
        'is_stop_understood' => 'isStopUnderstood',
        'is_manual_read' => 'isManualRead',
        'is_ctia_short_code_read' => 'isCtiaShortCodeRead',
        'is_standards_understood' => 'isStandardsUnderstood',
        'is_short_code_understood' => 'isShortCodeUnderstood',
        'is_opt_in_out_understood' => 'isOptInOutUnderstood',
        'is_short_code_transfer_understood' => 'isShortCodeTransferUnderstood',
        'is_pricing_understood' => 'isPricingUnderstood',
        'is_short_code_timeline_understood' => 'isShortCodeTimelineUnderstood',
        'business_name' => 'businessName',
        'business_type' => 'businessType',
        'business_classification' => 'businessClassification',
        'business_industry' => 'businessIndustry',
        'tax_id_type' => 'taxIDType',
        'tax_id' => 'taxID',
        'website_url' => 'websiteURL',
        'social_media_url' => 'socialMediaURL',
        'regions_of_operation' => 'regionsOfOperation',
        'stock_exchange' => 'stockExchange',
        'stock_ticker' => 'stockTicker',
        'messaging_volume_high' => 'messagingVolumeHigh',
        'address1' => 'address1',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'job_title' => 'jobTitle',
        'job_position' => 'jobPosition',
        'phone_number' => 'phoneNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_twilio_terms_read' => 'setIsTwilioTermsRead',
        'is_privacy_policy_on_website' => 'setIsPrivacyPolicyOnWebsite',
        'is_tos_on_website' => 'setIsTosOnWebsite',
        'is_stop_understood' => 'setIsStopUnderstood',
        'is_manual_read' => 'setIsManualRead',
        'is_ctia_short_code_read' => 'setIsCtiaShortCodeRead',
        'is_standards_understood' => 'setIsStandardsUnderstood',
        'is_short_code_understood' => 'setIsShortCodeUnderstood',
        'is_opt_in_out_understood' => 'setIsOptInOutUnderstood',
        'is_short_code_transfer_understood' => 'setIsShortCodeTransferUnderstood',
        'is_pricing_understood' => 'setIsPricingUnderstood',
        'is_short_code_timeline_understood' => 'setIsShortCodeTimelineUnderstood',
        'business_name' => 'setBusinessName',
        'business_type' => 'setBusinessType',
        'business_classification' => 'setBusinessClassification',
        'business_industry' => 'setBusinessIndustry',
        'tax_id_type' => 'setTaxIdType',
        'tax_id' => 'setTaxId',
        'website_url' => 'setWebsiteUrl',
        'social_media_url' => 'setSocialMediaUrl',
        'regions_of_operation' => 'setRegionsOfOperation',
        'stock_exchange' => 'setStockExchange',
        'stock_ticker' => 'setStockTicker',
        'messaging_volume_high' => 'setMessagingVolumeHigh',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'job_title' => 'setJobTitle',
        'job_position' => 'setJobPosition',
        'phone_number' => 'setPhoneNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_twilio_terms_read' => 'getIsTwilioTermsRead',
        'is_privacy_policy_on_website' => 'getIsPrivacyPolicyOnWebsite',
        'is_tos_on_website' => 'getIsTosOnWebsite',
        'is_stop_understood' => 'getIsStopUnderstood',
        'is_manual_read' => 'getIsManualRead',
        'is_ctia_short_code_read' => 'getIsCtiaShortCodeRead',
        'is_standards_understood' => 'getIsStandardsUnderstood',
        'is_short_code_understood' => 'getIsShortCodeUnderstood',
        'is_opt_in_out_understood' => 'getIsOptInOutUnderstood',
        'is_short_code_transfer_understood' => 'getIsShortCodeTransferUnderstood',
        'is_pricing_understood' => 'getIsPricingUnderstood',
        'is_short_code_timeline_understood' => 'getIsShortCodeTimelineUnderstood',
        'business_name' => 'getBusinessName',
        'business_type' => 'getBusinessType',
        'business_classification' => 'getBusinessClassification',
        'business_industry' => 'getBusinessIndustry',
        'tax_id_type' => 'getTaxIdType',
        'tax_id' => 'getTaxId',
        'website_url' => 'getWebsiteUrl',
        'social_media_url' => 'getSocialMediaUrl',
        'regions_of_operation' => 'getRegionsOfOperation',
        'stock_exchange' => 'getStockExchange',
        'stock_ticker' => 'getStockTicker',
        'messaging_volume_high' => 'getMessagingVolumeHigh',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'job_title' => 'getJobTitle',
        'job_position' => 'getJobPosition',
        'phone_number' => 'getPhoneNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_twilio_terms_read', $data ?? [], null);
        $this->setIfExists('is_privacy_policy_on_website', $data ?? [], null);
        $this->setIfExists('is_tos_on_website', $data ?? [], null);
        $this->setIfExists('is_stop_understood', $data ?? [], null);
        $this->setIfExists('is_manual_read', $data ?? [], null);
        $this->setIfExists('is_ctia_short_code_read', $data ?? [], null);
        $this->setIfExists('is_standards_understood', $data ?? [], null);
        $this->setIfExists('is_short_code_understood', $data ?? [], null);
        $this->setIfExists('is_opt_in_out_understood', $data ?? [], null);
        $this->setIfExists('is_short_code_transfer_understood', $data ?? [], null);
        $this->setIfExists('is_pricing_understood', $data ?? [], null);
        $this->setIfExists('is_short_code_timeline_understood', $data ?? [], null);
        $this->setIfExists('business_name', $data ?? [], null);
        $this->setIfExists('business_type', $data ?? [], null);
        $this->setIfExists('business_classification', $data ?? [], null);
        $this->setIfExists('business_industry', $data ?? [], null);
        $this->setIfExists('tax_id_type', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('website_url', $data ?? [], null);
        $this->setIfExists('social_media_url', $data ?? [], null);
        $this->setIfExists('regions_of_operation', $data ?? [], null);
        $this->setIfExists('stock_exchange', $data ?? [], null);
        $this->setIfExists('stock_ticker', $data ?? [], null);
        $this->setIfExists('messaging_volume_high', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('job_position', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_twilio_terms_read'] === null) {
            $invalidProperties[] = "'is_twilio_terms_read' can't be null";
        }
        if ($this->container['is_privacy_policy_on_website'] === null) {
            $invalidProperties[] = "'is_privacy_policy_on_website' can't be null";
        }
        if ($this->container['is_tos_on_website'] === null) {
            $invalidProperties[] = "'is_tos_on_website' can't be null";
        }
        if ($this->container['is_stop_understood'] === null) {
            $invalidProperties[] = "'is_stop_understood' can't be null";
        }
        if ($this->container['is_manual_read'] === null) {
            $invalidProperties[] = "'is_manual_read' can't be null";
        }
        if ($this->container['is_ctia_short_code_read'] === null) {
            $invalidProperties[] = "'is_ctia_short_code_read' can't be null";
        }
        if ($this->container['is_standards_understood'] === null) {
            $invalidProperties[] = "'is_standards_understood' can't be null";
        }
        if ($this->container['is_short_code_understood'] === null) {
            $invalidProperties[] = "'is_short_code_understood' can't be null";
        }
        if ($this->container['is_opt_in_out_understood'] === null) {
            $invalidProperties[] = "'is_opt_in_out_understood' can't be null";
        }
        if ($this->container['is_short_code_transfer_understood'] === null) {
            $invalidProperties[] = "'is_short_code_transfer_understood' can't be null";
        }
        if ($this->container['is_pricing_understood'] === null) {
            $invalidProperties[] = "'is_pricing_understood' can't be null";
        }
        if ($this->container['is_short_code_timeline_understood'] === null) {
            $invalidProperties[] = "'is_short_code_timeline_understood' can't be null";
        }
        if ($this->container['business_name'] === null) {
            $invalidProperties[] = "'business_name' can't be null";
        }
        if ((mb_strlen($this->container['business_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'business_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['business_type'] === null) {
            $invalidProperties[] = "'business_type' can't be null";
        }
        if ($this->container['business_classification'] === null) {
            $invalidProperties[] = "'business_classification' can't be null";
        }
        if ($this->container['business_industry'] === null) {
            $invalidProperties[] = "'business_industry' can't be null";
        }
        if ($this->container['tax_id_type'] === null) {
            $invalidProperties[] = "'tax_id_type' can't be null";
        }
        if ($this->container['tax_id'] === null) {
            $invalidProperties[] = "'tax_id' can't be null";
        }
        if ((mb_strlen($this->container['tax_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['website_url'] === null) {
            $invalidProperties[] = "'website_url' can't be null";
        }
        if ((mb_strlen($this->container['website_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'website_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['social_media_url'] === null) {
            $invalidProperties[] = "'social_media_url' can't be null";
        }
        if ((mb_strlen($this->container['social_media_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'social_media_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['regions_of_operation'] === null) {
            $invalidProperties[] = "'regions_of_operation' can't be null";
        }
        if (!is_null($this->container['stock_ticker']) && (mb_strlen($this->container['stock_ticker']) < 0)) {
            $invalidProperties[] = "invalid value for 'stock_ticker', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['messaging_volume_high'] === null) {
            $invalidProperties[] = "'messaging_volume_high' can't be null";
        }
        if ($this->container['address1'] === null) {
            $invalidProperties[] = "'address1' can't be null";
        }
        if ((mb_strlen($this->container['address1']) < 1)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) < 3)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ((mb_strlen($this->container['postal_code']) < 4)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 4.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ((mb_strlen($this->container['country']) < 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) < 6)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 6.";
        }

        if ($this->container['job_title'] === null) {
            $invalidProperties[] = "'job_title' can't be null";
        }
        if ((mb_strlen($this->container['job_title']) < 2)) {
            $invalidProperties[] = "invalid value for 'job_title', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['job_position'] === null) {
            $invalidProperties[] = "'job_position' can't be null";
        }
        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ((mb_strlen($this->container['phone_number']) < 7)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 7.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_twilio_terms_read
     *
     * @return bool
     */
    public function getIsTwilioTermsRead()
    {
        return $this->container['is_twilio_terms_read'];
    }

    /**
     * Sets is_twilio_terms_read
     *
     * @param bool $is_twilio_terms_read is_twilio_terms_read
     *
     * @return self
     */
    public function setIsTwilioTermsRead($is_twilio_terms_read)
    {
        if (is_null($is_twilio_terms_read)) {
            throw new \InvalidArgumentException('non-nullable is_twilio_terms_read cannot be null');
        }
        $this->container['is_twilio_terms_read'] = $is_twilio_terms_read;

        return $this;
    }

    /**
     * Gets is_privacy_policy_on_website
     *
     * @return bool
     */
    public function getIsPrivacyPolicyOnWebsite()
    {
        return $this->container['is_privacy_policy_on_website'];
    }

    /**
     * Sets is_privacy_policy_on_website
     *
     * @param bool $is_privacy_policy_on_website is_privacy_policy_on_website
     *
     * @return self
     */
    public function setIsPrivacyPolicyOnWebsite($is_privacy_policy_on_website)
    {
        if (is_null($is_privacy_policy_on_website)) {
            throw new \InvalidArgumentException('non-nullable is_privacy_policy_on_website cannot be null');
        }
        $this->container['is_privacy_policy_on_website'] = $is_privacy_policy_on_website;

        return $this;
    }

    /**
     * Gets is_tos_on_website
     *
     * @return bool
     */
    public function getIsTosOnWebsite()
    {
        return $this->container['is_tos_on_website'];
    }

    /**
     * Sets is_tos_on_website
     *
     * @param bool $is_tos_on_website is_tos_on_website
     *
     * @return self
     */
    public function setIsTosOnWebsite($is_tos_on_website)
    {
        if (is_null($is_tos_on_website)) {
            throw new \InvalidArgumentException('non-nullable is_tos_on_website cannot be null');
        }
        $this->container['is_tos_on_website'] = $is_tos_on_website;

        return $this;
    }

    /**
     * Gets is_stop_understood
     *
     * @return bool
     */
    public function getIsStopUnderstood()
    {
        return $this->container['is_stop_understood'];
    }

    /**
     * Sets is_stop_understood
     *
     * @param bool $is_stop_understood is_stop_understood
     *
     * @return self
     */
    public function setIsStopUnderstood($is_stop_understood)
    {
        if (is_null($is_stop_understood)) {
            throw new \InvalidArgumentException('non-nullable is_stop_understood cannot be null');
        }
        $this->container['is_stop_understood'] = $is_stop_understood;

        return $this;
    }

    /**
     * Gets is_manual_read
     *
     * @return bool
     */
    public function getIsManualRead()
    {
        return $this->container['is_manual_read'];
    }

    /**
     * Sets is_manual_read
     *
     * @param bool $is_manual_read is_manual_read
     *
     * @return self
     */
    public function setIsManualRead($is_manual_read)
    {
        if (is_null($is_manual_read)) {
            throw new \InvalidArgumentException('non-nullable is_manual_read cannot be null');
        }
        $this->container['is_manual_read'] = $is_manual_read;

        return $this;
    }

    /**
     * Gets is_ctia_short_code_read
     *
     * @return bool
     */
    public function getIsCtiaShortCodeRead()
    {
        return $this->container['is_ctia_short_code_read'];
    }

    /**
     * Sets is_ctia_short_code_read
     *
     * @param bool $is_ctia_short_code_read is_ctia_short_code_read
     *
     * @return self
     */
    public function setIsCtiaShortCodeRead($is_ctia_short_code_read)
    {
        if (is_null($is_ctia_short_code_read)) {
            throw new \InvalidArgumentException('non-nullable is_ctia_short_code_read cannot be null');
        }
        $this->container['is_ctia_short_code_read'] = $is_ctia_short_code_read;

        return $this;
    }

    /**
     * Gets is_standards_understood
     *
     * @return bool
     */
    public function getIsStandardsUnderstood()
    {
        return $this->container['is_standards_understood'];
    }

    /**
     * Sets is_standards_understood
     *
     * @param bool $is_standards_understood is_standards_understood
     *
     * @return self
     */
    public function setIsStandardsUnderstood($is_standards_understood)
    {
        if (is_null($is_standards_understood)) {
            throw new \InvalidArgumentException('non-nullable is_standards_understood cannot be null');
        }
        $this->container['is_standards_understood'] = $is_standards_understood;

        return $this;
    }

    /**
     * Gets is_short_code_understood
     *
     * @return bool
     */
    public function getIsShortCodeUnderstood()
    {
        return $this->container['is_short_code_understood'];
    }

    /**
     * Sets is_short_code_understood
     *
     * @param bool $is_short_code_understood is_short_code_understood
     *
     * @return self
     */
    public function setIsShortCodeUnderstood($is_short_code_understood)
    {
        if (is_null($is_short_code_understood)) {
            throw new \InvalidArgumentException('non-nullable is_short_code_understood cannot be null');
        }
        $this->container['is_short_code_understood'] = $is_short_code_understood;

        return $this;
    }

    /**
     * Gets is_opt_in_out_understood
     *
     * @return bool
     */
    public function getIsOptInOutUnderstood()
    {
        return $this->container['is_opt_in_out_understood'];
    }

    /**
     * Sets is_opt_in_out_understood
     *
     * @param bool $is_opt_in_out_understood is_opt_in_out_understood
     *
     * @return self
     */
    public function setIsOptInOutUnderstood($is_opt_in_out_understood)
    {
        if (is_null($is_opt_in_out_understood)) {
            throw new \InvalidArgumentException('non-nullable is_opt_in_out_understood cannot be null');
        }
        $this->container['is_opt_in_out_understood'] = $is_opt_in_out_understood;

        return $this;
    }

    /**
     * Gets is_short_code_transfer_understood
     *
     * @return bool
     */
    public function getIsShortCodeTransferUnderstood()
    {
        return $this->container['is_short_code_transfer_understood'];
    }

    /**
     * Sets is_short_code_transfer_understood
     *
     * @param bool $is_short_code_transfer_understood is_short_code_transfer_understood
     *
     * @return self
     */
    public function setIsShortCodeTransferUnderstood($is_short_code_transfer_understood)
    {
        if (is_null($is_short_code_transfer_understood)) {
            throw new \InvalidArgumentException('non-nullable is_short_code_transfer_understood cannot be null');
        }
        $this->container['is_short_code_transfer_understood'] = $is_short_code_transfer_understood;

        return $this;
    }

    /**
     * Gets is_pricing_understood
     *
     * @return bool
     */
    public function getIsPricingUnderstood()
    {
        return $this->container['is_pricing_understood'];
    }

    /**
     * Sets is_pricing_understood
     *
     * @param bool $is_pricing_understood is_pricing_understood
     *
     * @return self
     */
    public function setIsPricingUnderstood($is_pricing_understood)
    {
        if (is_null($is_pricing_understood)) {
            throw new \InvalidArgumentException('non-nullable is_pricing_understood cannot be null');
        }
        $this->container['is_pricing_understood'] = $is_pricing_understood;

        return $this;
    }

    /**
     * Gets is_short_code_timeline_understood
     *
     * @return bool
     */
    public function getIsShortCodeTimelineUnderstood()
    {
        return $this->container['is_short_code_timeline_understood'];
    }

    /**
     * Sets is_short_code_timeline_understood
     *
     * @param bool $is_short_code_timeline_understood is_short_code_timeline_understood
     *
     * @return self
     */
    public function setIsShortCodeTimelineUnderstood($is_short_code_timeline_understood)
    {
        if (is_null($is_short_code_timeline_understood)) {
            throw new \InvalidArgumentException('non-nullable is_short_code_timeline_understood cannot be null');
        }
        $this->container['is_short_code_timeline_understood'] = $is_short_code_timeline_understood;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string $business_name business_name
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {
        if (is_null($business_name)) {
            throw new \InvalidArgumentException('non-nullable business_name cannot be null');
        }

        if ((mb_strlen($business_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $business_name when calling A2PApplicationSubmission., must be bigger than or equal to 1.');
        }

        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return \OpenAPI\Client\Model\BusinessType
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param \OpenAPI\Client\Model\BusinessType $business_type business_type
     *
     * @return self
     */
    public function setBusinessType($business_type)
    {
        if (is_null($business_type)) {
            throw new \InvalidArgumentException('non-nullable business_type cannot be null');
        }
        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets business_classification
     *
     * @return \OpenAPI\Client\Model\BusinessClassification
     */
    public function getBusinessClassification()
    {
        return $this->container['business_classification'];
    }

    /**
     * Sets business_classification
     *
     * @param \OpenAPI\Client\Model\BusinessClassification $business_classification business_classification
     *
     * @return self
     */
    public function setBusinessClassification($business_classification)
    {
        if (is_null($business_classification)) {
            throw new \InvalidArgumentException('non-nullable business_classification cannot be null');
        }
        $this->container['business_classification'] = $business_classification;

        return $this;
    }

    /**
     * Gets business_industry
     *
     * @return \OpenAPI\Client\Model\BusinessIndustry
     */
    public function getBusinessIndustry()
    {
        return $this->container['business_industry'];
    }

    /**
     * Sets business_industry
     *
     * @param \OpenAPI\Client\Model\BusinessIndustry $business_industry business_industry
     *
     * @return self
     */
    public function setBusinessIndustry($business_industry)
    {
        if (is_null($business_industry)) {
            throw new \InvalidArgumentException('non-nullable business_industry cannot be null');
        }
        $this->container['business_industry'] = $business_industry;

        return $this;
    }

    /**
     * Gets tax_id_type
     *
     * @return \OpenAPI\Client\Model\BusinessRegistrationIdentifier
     */
    public function getTaxIdType()
    {
        return $this->container['tax_id_type'];
    }

    /**
     * Sets tax_id_type
     *
     * @param \OpenAPI\Client\Model\BusinessRegistrationIdentifier $tax_id_type tax_id_type
     *
     * @return self
     */
    public function setTaxIdType($tax_id_type)
    {
        if (is_null($tax_id_type)) {
            throw new \InvalidArgumentException('non-nullable tax_id_type cannot be null');
        }
        $this->container['tax_id_type'] = $tax_id_type;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            throw new \InvalidArgumentException('non-nullable tax_id cannot be null');
        }

        if ((mb_strlen($tax_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_id when calling A2PApplicationSubmission., must be bigger than or equal to 1.');
        }

        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url website_url
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {
        if (is_null($website_url)) {
            throw new \InvalidArgumentException('non-nullable website_url cannot be null');
        }

        if ((mb_strlen($website_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling A2PApplicationSubmission., must be bigger than or equal to 1.');
        }

        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets social_media_url
     *
     * @return string
     */
    public function getSocialMediaUrl()
    {
        return $this->container['social_media_url'];
    }

    /**
     * Sets social_media_url
     *
     * @param string $social_media_url social_media_url
     *
     * @return self
     */
    public function setSocialMediaUrl($social_media_url)
    {
        if (is_null($social_media_url)) {
            throw new \InvalidArgumentException('non-nullable social_media_url cannot be null');
        }

        if ((mb_strlen($social_media_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $social_media_url when calling A2PApplicationSubmission., must be bigger than or equal to 1.');
        }

        $this->container['social_media_url'] = $social_media_url;

        return $this;
    }

    /**
     * Gets regions_of_operation
     *
     * @return \OpenAPI\Client\Model\BusinessRegionsOfOperation[]
     */
    public function getRegionsOfOperation()
    {
        return $this->container['regions_of_operation'];
    }

    /**
     * Sets regions_of_operation
     *
     * @param \OpenAPI\Client\Model\BusinessRegionsOfOperation[] $regions_of_operation regions_of_operation
     *
     * @return self
     */
    public function setRegionsOfOperation($regions_of_operation)
    {
        if (is_null($regions_of_operation)) {
            throw new \InvalidArgumentException('non-nullable regions_of_operation cannot be null');
        }


        $this->container['regions_of_operation'] = $regions_of_operation;

        return $this;
    }

    /**
     * Gets stock_exchange
     *
     * @return \OpenAPI\Client\Model\BusinessStockExchanges|null
     */
    public function getStockExchange()
    {
        return $this->container['stock_exchange'];
    }

    /**
     * Sets stock_exchange
     *
     * @param \OpenAPI\Client\Model\BusinessStockExchanges|null $stock_exchange stock_exchange
     *
     * @return self
     */
    public function setStockExchange($stock_exchange)
    {
        if (is_null($stock_exchange)) {
            throw new \InvalidArgumentException('non-nullable stock_exchange cannot be null');
        }
        $this->container['stock_exchange'] = $stock_exchange;

        return $this;
    }

    /**
     * Gets stock_ticker
     *
     * @return string|null
     */
    public function getStockTicker()
    {
        return $this->container['stock_ticker'];
    }

    /**
     * Sets stock_ticker
     *
     * @param string|null $stock_ticker stock_ticker
     *
     * @return self
     */
    public function setStockTicker($stock_ticker)
    {
        if (is_null($stock_ticker)) {
            throw new \InvalidArgumentException('non-nullable stock_ticker cannot be null');
        }

        if ((mb_strlen($stock_ticker) < 0)) {
            throw new \InvalidArgumentException('invalid length for $stock_ticker when calling A2PApplicationSubmission., must be bigger than or equal to 0.');
        }

        $this->container['stock_ticker'] = $stock_ticker;

        return $this;
    }

    /**
     * Gets messaging_volume_high
     *
     * @return bool
     */
    public function getMessagingVolumeHigh()
    {
        return $this->container['messaging_volume_high'];
    }

    /**
     * Sets messaging_volume_high
     *
     * @param bool $messaging_volume_high messaging_volume_high
     *
     * @return self
     */
    public function setMessagingVolumeHigh($messaging_volume_high)
    {
        if (is_null($messaging_volume_high)) {
            throw new \InvalidArgumentException('non-nullable messaging_volume_high cannot be null');
        }


        $this->container['messaging_volume_high'] = $messaging_volume_high;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 address1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (is_null($address1)) {
            throw new \InvalidArgumentException('non-nullable address1 cannot be null');
        }

        if ((mb_strlen($address1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling A2PApplicationSubmission., must be bigger than or equal to 1.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 address2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (is_null($address2)) {
            throw new \InvalidArgumentException('non-nullable address2 cannot be null');
        }

        if ((mb_strlen($address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling A2PApplicationSubmission., must be bigger than or equal to 0.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        if ((mb_strlen($city) < 3)) {
            throw new \InvalidArgumentException('invalid length for $city when calling A2PApplicationSubmission., must be bigger than or equal to 3.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling A2PApplicationSubmission., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }

        if ((mb_strlen($postal_code) < 4)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling A2PApplicationSubmission., must be bigger than or equal to 4.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }

        if ((mb_strlen($country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $country when calling A2PApplicationSubmission., must be bigger than or equal to 2.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }

        if ((mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling A2PApplicationSubmission., must be bigger than or equal to 1.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }

        if ((mb_strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling A2PApplicationSubmission., must be bigger than or equal to 1.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        if ((mb_strlen($email) < 6)) {
            throw new \InvalidArgumentException('invalid length for $email when calling A2PApplicationSubmission., must be bigger than or equal to 6.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title job_title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }

        if ((mb_strlen($job_title) < 2)) {
            throw new \InvalidArgumentException('invalid length for $job_title when calling A2PApplicationSubmission., must be bigger than or equal to 2.');
        }

        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets job_position
     *
     * @return \OpenAPI\Client\Model\JobPosition
     */
    public function getJobPosition()
    {
        return $this->container['job_position'];
    }

    /**
     * Sets job_position
     *
     * @param \OpenAPI\Client\Model\JobPosition $job_position job_position
     *
     * @return self
     */
    public function setJobPosition($job_position)
    {
        if (is_null($job_position)) {
            throw new \InvalidArgumentException('non-nullable job_position cannot be null');
        }
        $this->container['job_position'] = $job_position;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }

        if ((mb_strlen($phone_number) < 7)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling A2PApplicationSubmission., must be bigger than or equal to 7.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


