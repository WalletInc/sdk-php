<?php
/**
 * OptInListSubscriber
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.524
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OptInListSubscriber Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OptInListSubscriber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OptInListSubscriber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'opt_in_list_id' => 'string',
        'opt_in_source_id' => 'string',
        'is_subscribed' => 'bool',
        'is_pending_age21_verification' => 'bool',
        'mobile_phone_number' => 'string',
        'referring_url' => 'string',
        'id' => 'string',
        'merchant_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'is_active' => 'bool',
        'opted_status' => 'bool',
        'source' => '\OpenAPI\Client\Model\SSOptInSource'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'opt_in_list_id' => null,
        'opt_in_source_id' => null,
        'is_subscribed' => null,
        'is_pending_age21_verification' => null,
        'mobile_phone_number' => null,
        'referring_url' => null,
        'id' => null,
        'merchant_id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'is_active' => null,
        'opted_status' => null,
        'source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'opt_in_list_id' => 'optInListID',
        'opt_in_source_id' => 'optInSourceID',
        'is_subscribed' => 'isSubscribed',
        'is_pending_age21_verification' => 'isPendingAge21Verification',
        'mobile_phone_number' => 'mobilePhoneNumber',
        'referring_url' => 'referringURL',
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'is_active' => 'isActive',
        'opted_status' => 'optedStatus',
        'source' => 'Source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'opt_in_list_id' => 'setOptInListId',
        'opt_in_source_id' => 'setOptInSourceId',
        'is_subscribed' => 'setIsSubscribed',
        'is_pending_age21_verification' => 'setIsPendingAge21Verification',
        'mobile_phone_number' => 'setMobilePhoneNumber',
        'referring_url' => 'setReferringUrl',
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'is_active' => 'setIsActive',
        'opted_status' => 'setOptedStatus',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'opt_in_list_id' => 'getOptInListId',
        'opt_in_source_id' => 'getOptInSourceId',
        'is_subscribed' => 'getIsSubscribed',
        'is_pending_age21_verification' => 'getIsPendingAge21Verification',
        'mobile_phone_number' => 'getMobilePhoneNumber',
        'referring_url' => 'getReferringUrl',
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'is_active' => 'getIsActive',
        'opted_status' => 'getOptedStatus',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['opt_in_list_id'] = $data['opt_in_list_id'] ?? null;
        $this->container['opt_in_source_id'] = $data['opt_in_source_id'] ?? null;
        $this->container['is_subscribed'] = $data['is_subscribed'] ?? null;
        $this->container['is_pending_age21_verification'] = $data['is_pending_age21_verification'] ?? null;
        $this->container['mobile_phone_number'] = $data['mobile_phone_number'] ?? null;
        $this->container['referring_url'] = $data['referring_url'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['opted_status'] = $data['opted_status'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['opt_in_list_id'] === null) {
            $invalidProperties[] = "'opt_in_list_id' can't be null";
        }
        if ((mb_strlen($this->container['opt_in_list_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'opt_in_list_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['opt_in_list_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'opt_in_list_id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['opt_in_list_id'])) {
            $invalidProperties[] = "invalid value for 'opt_in_list_id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['opt_in_source_id'] === null) {
            $invalidProperties[] = "'opt_in_source_id' can't be null";
        }
        if ($this->container['is_subscribed'] === null) {
            $invalidProperties[] = "'is_subscribed' can't be null";
        }
        if ($this->container['is_pending_age21_verification'] === null) {
            $invalidProperties[] = "'is_pending_age21_verification' can't be null";
        }
        if ($this->container['mobile_phone_number'] === null) {
            $invalidProperties[] = "'mobile_phone_number' can't be null";
        }
        if ($this->container['referring_url'] === null) {
            $invalidProperties[] = "'referring_url' can't be null";
        }
        if ((mb_strlen($this->container['referring_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'referring_url', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 12)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 12.";
        }

        if ((mb_strlen($this->container['id']) < 10)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 10.";
        }

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ((mb_strlen($this->container['merchant_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['merchant_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['merchant_id'])) {
            $invalidProperties[] = "invalid value for 'merchant_id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets opt_in_list_id
     *
     * @return string
     */
    public function getOptInListId()
    {
        return $this->container['opt_in_list_id'];
    }

    /**
     * Sets opt_in_list_id
     *
     * @param string $opt_in_list_id opt_in_list_id
     *
     * @return self
     */
    public function setOptInListId($opt_in_list_id)
    {
        if ((mb_strlen($opt_in_list_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $opt_in_list_id when calling OptInListSubscriber., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($opt_in_list_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $opt_in_list_id when calling OptInListSubscriber., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", $opt_in_list_id))) {
            throw new \InvalidArgumentException("invalid value for $opt_in_list_id when calling OptInListSubscriber., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['opt_in_list_id'] = $opt_in_list_id;

        return $this;
    }

    /**
     * Gets opt_in_source_id
     *
     * @return string
     */
    public function getOptInSourceId()
    {
        return $this->container['opt_in_source_id'];
    }

    /**
     * Sets opt_in_source_id
     *
     * @param string $opt_in_source_id opt_in_source_id
     *
     * @return self
     */
    public function setOptInSourceId($opt_in_source_id)
    {
        $this->container['opt_in_source_id'] = $opt_in_source_id;

        return $this;
    }

    /**
     * Gets is_subscribed
     *
     * @return bool
     */
    public function getIsSubscribed()
    {
        return $this->container['is_subscribed'];
    }

    /**
     * Sets is_subscribed
     *
     * @param bool $is_subscribed is_subscribed
     *
     * @return self
     */
    public function setIsSubscribed($is_subscribed)
    {
        $this->container['is_subscribed'] = $is_subscribed;

        return $this;
    }

    /**
     * Gets is_pending_age21_verification
     *
     * @return bool
     */
    public function getIsPendingAge21Verification()
    {
        return $this->container['is_pending_age21_verification'];
    }

    /**
     * Sets is_pending_age21_verification
     *
     * @param bool $is_pending_age21_verification is_pending_age21_verification
     *
     * @return self
     */
    public function setIsPendingAge21Verification($is_pending_age21_verification)
    {
        $this->container['is_pending_age21_verification'] = $is_pending_age21_verification;

        return $this;
    }

    /**
     * Gets mobile_phone_number
     *
     * @return string
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobile_phone_number'];
    }

    /**
     * Sets mobile_phone_number
     *
     * @param string $mobile_phone_number mobile_phone_number
     *
     * @return self
     */
    public function setMobilePhoneNumber($mobile_phone_number)
    {
        $this->container['mobile_phone_number'] = $mobile_phone_number;

        return $this;
    }

    /**
     * Gets referring_url
     *
     * @return string
     */
    public function getReferringUrl()
    {
        return $this->container['referring_url'];
    }

    /**
     * Sets referring_url
     *
     * @param string $referring_url referring_url
     *
     * @return self
     */
    public function setReferringUrl($referring_url)
    {

        if ((mb_strlen($referring_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $referring_url when calling OptInListSubscriber., must be bigger than or equal to 0.');
        }

        $this->container['referring_url'] = $referring_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 12)) {
            throw new \InvalidArgumentException('invalid length for $id when calling OptInListSubscriber., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $id when calling OptInListSubscriber., must be bigger than or equal to 10.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if ((mb_strlen($merchant_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling OptInListSubscriber., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($merchant_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling OptInListSubscriber., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", $merchant_id))) {
            throw new \InvalidArgumentException("invalid value for $merchant_id when calling OptInListSubscriber., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets opted_status
     *
     * @return bool|null
     */
    public function getOptedStatus()
    {
        return $this->container['opted_status'];
    }

    /**
     * Sets opted_status
     *
     * @param bool|null $opted_status opted_status
     *
     * @return self
     */
    public function setOptedStatus($opted_status)
    {
        $this->container['opted_status'] = $opted_status;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \OpenAPI\Client\Model\SSOptInSource|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \OpenAPI\Client\Model\SSOptInSource|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


