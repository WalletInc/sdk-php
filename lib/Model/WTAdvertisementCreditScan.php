<?php
/**
 * WTAdvertisementCreditScan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WTAdvertisementCreditScan Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WTAdvertisementCreditScan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WTAdvertisementCreditScan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => '\OpenAPI\Client\Model\WTWalletPageViewId',
        'transaction_type' => '\OpenAPI\Client\Model\PickVSStaticVoucherExcludeKeyofVSStaticVoucherRedeemedAtOrRefundedAtOrLastViewedAtTransactionType',
        'register_id' => '\OpenAPI\Client\Model\PickVSStaticVoucherExcludeKeyofVSStaticVoucherRedeemedAtOrRefundedAtOrLastViewedAtRegisterID',
        'redeemed_source' => 'string',
        'redeemed_transaction_id' => 'string',
        'redeemed_amount' => 'int',
        'is_redeemed' => 'bool',
        'refunded_transaction_id' => 'string',
        'refunded_amount' => 'int',
        'status' => '\OpenAPI\Client\Model\Status',
        'authorized_against_check_number' => 'string',
        'authorized_amount' => 'int',
        'merchant_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'is_active' => 'bool',
        'advertisement_credit_id' => 'string',
        'redeemed_amount_decimal' => 'string',
        'redeemed_amount_string' => 'string',
        'authorized_amount_decimal' => 'string',
        'authorized_amount_string' => 'string',
        'date_time_redeemed' => '\DateTime',
        'date_time_refunded' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'transaction_type' => null,
        'register_id' => null,
        'redeemed_source' => null,
        'redeemed_transaction_id' => null,
        'redeemed_amount' => 'int32',
        'is_redeemed' => null,
        'refunded_transaction_id' => null,
        'refunded_amount' => 'int32',
        'status' => null,
        'authorized_against_check_number' => null,
        'authorized_amount' => 'int32',
        'merchant_id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'is_active' => null,
        'advertisement_credit_id' => null,
        'redeemed_amount_decimal' => null,
        'redeemed_amount_string' => null,
        'authorized_amount_decimal' => null,
        'authorized_amount_string' => null,
        'date_time_redeemed' => 'date-time',
        'date_time_refunded' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'transaction_type' => false,
        'register_id' => false,
        'redeemed_source' => false,
        'redeemed_transaction_id' => false,
        'redeemed_amount' => false,
        'is_redeemed' => false,
        'refunded_transaction_id' => false,
        'refunded_amount' => false,
        'status' => false,
        'authorized_against_check_number' => false,
        'authorized_amount' => false,
        'merchant_id' => false,
        'created_at' => false,
        'updated_at' => false,
        'is_active' => false,
        'advertisement_credit_id' => false,
        'redeemed_amount_decimal' => false,
        'redeemed_amount_string' => false,
        'authorized_amount_decimal' => false,
        'authorized_amount_string' => false,
        'date_time_redeemed' => true,
        'date_time_refunded' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'transaction_type' => 'transactionType',
        'register_id' => 'registerID',
        'redeemed_source' => 'redeemedSource',
        'redeemed_transaction_id' => 'redeemedTransactionID',
        'redeemed_amount' => 'redeemedAmount',
        'is_redeemed' => 'isRedeemed',
        'refunded_transaction_id' => 'refundedTransactionID',
        'refunded_amount' => 'refundedAmount',
        'status' => 'status',
        'authorized_against_check_number' => 'authorizedAgainstCheckNumber',
        'authorized_amount' => 'authorizedAmount',
        'merchant_id' => 'merchantID',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'is_active' => 'isActive',
        'advertisement_credit_id' => 'advertisementCreditID',
        'redeemed_amount_decimal' => 'redeemedAmount_decimal',
        'redeemed_amount_string' => 'redeemedAmount_string',
        'authorized_amount_decimal' => 'authorizedAmount_decimal',
        'authorized_amount_string' => 'authorizedAmount_string',
        'date_time_redeemed' => 'dateTimeRedeemed',
        'date_time_refunded' => 'dateTimeRefunded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'transaction_type' => 'setTransactionType',
        'register_id' => 'setRegisterId',
        'redeemed_source' => 'setRedeemedSource',
        'redeemed_transaction_id' => 'setRedeemedTransactionId',
        'redeemed_amount' => 'setRedeemedAmount',
        'is_redeemed' => 'setIsRedeemed',
        'refunded_transaction_id' => 'setRefundedTransactionId',
        'refunded_amount' => 'setRefundedAmount',
        'status' => 'setStatus',
        'authorized_against_check_number' => 'setAuthorizedAgainstCheckNumber',
        'authorized_amount' => 'setAuthorizedAmount',
        'merchant_id' => 'setMerchantId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'is_active' => 'setIsActive',
        'advertisement_credit_id' => 'setAdvertisementCreditId',
        'redeemed_amount_decimal' => 'setRedeemedAmountDecimal',
        'redeemed_amount_string' => 'setRedeemedAmountString',
        'authorized_amount_decimal' => 'setAuthorizedAmountDecimal',
        'authorized_amount_string' => 'setAuthorizedAmountString',
        'date_time_redeemed' => 'setDateTimeRedeemed',
        'date_time_refunded' => 'setDateTimeRefunded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'transaction_type' => 'getTransactionType',
        'register_id' => 'getRegisterId',
        'redeemed_source' => 'getRedeemedSource',
        'redeemed_transaction_id' => 'getRedeemedTransactionId',
        'redeemed_amount' => 'getRedeemedAmount',
        'is_redeemed' => 'getIsRedeemed',
        'refunded_transaction_id' => 'getRefundedTransactionId',
        'refunded_amount' => 'getRefundedAmount',
        'status' => 'getStatus',
        'authorized_against_check_number' => 'getAuthorizedAgainstCheckNumber',
        'authorized_amount' => 'getAuthorizedAmount',
        'merchant_id' => 'getMerchantId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'is_active' => 'getIsActive',
        'advertisement_credit_id' => 'getAdvertisementCreditId',
        'redeemed_amount_decimal' => 'getRedeemedAmountDecimal',
        'redeemed_amount_string' => 'getRedeemedAmountString',
        'authorized_amount_decimal' => 'getAuthorizedAmountDecimal',
        'authorized_amount_string' => 'getAuthorizedAmountString',
        'date_time_redeemed' => 'getDateTimeRedeemed',
        'date_time_refunded' => 'getDateTimeRefunded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('register_id', $data ?? [], null);
        $this->setIfExists('redeemed_source', $data ?? [], null);
        $this->setIfExists('redeemed_transaction_id', $data ?? [], null);
        $this->setIfExists('redeemed_amount', $data ?? [], null);
        $this->setIfExists('is_redeemed', $data ?? [], null);
        $this->setIfExists('refunded_transaction_id', $data ?? [], null);
        $this->setIfExists('refunded_amount', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('authorized_against_check_number', $data ?? [], null);
        $this->setIfExists('authorized_amount', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('advertisement_credit_id', $data ?? [], null);
        $this->setIfExists('redeemed_amount_decimal', $data ?? [], null);
        $this->setIfExists('redeemed_amount_string', $data ?? [], null);
        $this->setIfExists('authorized_amount_decimal', $data ?? [], null);
        $this->setIfExists('authorized_amount_string', $data ?? [], null);
        $this->setIfExists('date_time_redeemed', $data ?? [], null);
        $this->setIfExists('date_time_refunded', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        if ($this->container['register_id'] === null) {
            $invalidProperties[] = "'register_id' can't be null";
        }
        if ($this->container['redeemed_source'] === null) {
            $invalidProperties[] = "'redeemed_source' can't be null";
        }
        if ($this->container['redeemed_transaction_id'] === null) {
            $invalidProperties[] = "'redeemed_transaction_id' can't be null";
        }
        if ($this->container['redeemed_amount'] === null) {
            $invalidProperties[] = "'redeemed_amount' can't be null";
        }
        if (($this->container['redeemed_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'redeemed_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['is_redeemed'] === null) {
            $invalidProperties[] = "'is_redeemed' can't be null";
        }
        if ($this->container['refunded_transaction_id'] === null) {
            $invalidProperties[] = "'refunded_transaction_id' can't be null";
        }
        if ($this->container['refunded_amount'] === null) {
            $invalidProperties[] = "'refunded_amount' can't be null";
        }
        if (($this->container['refunded_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'refunded_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['authorized_against_check_number'] === null) {
            $invalidProperties[] = "'authorized_against_check_number' can't be null";
        }
        if ($this->container['authorized_amount'] === null) {
            $invalidProperties[] = "'authorized_amount' can't be null";
        }
        if (($this->container['authorized_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'authorized_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ((mb_strlen($this->container['merchant_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['merchant_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['merchant_id'])) {
            $invalidProperties[] = "invalid value for 'merchant_id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['advertisement_credit_id'] === null) {
            $invalidProperties[] = "'advertisement_credit_id' can't be null";
        }
        if ((mb_strlen($this->container['advertisement_credit_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'advertisement_credit_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['advertisement_credit_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'advertisement_credit_id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['advertisement_credit_id'])) {
            $invalidProperties[] = "invalid value for 'advertisement_credit_id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['redeemed_amount_decimal'] === null) {
            $invalidProperties[] = "'redeemed_amount_decimal' can't be null";
        }
        if ($this->container['redeemed_amount_string'] === null) {
            $invalidProperties[] = "'redeemed_amount_string' can't be null";
        }
        if ($this->container['authorized_amount_decimal'] === null) {
            $invalidProperties[] = "'authorized_amount_decimal' can't be null";
        }
        if ($this->container['authorized_amount_string'] === null) {
            $invalidProperties[] = "'authorized_amount_string' can't be null";
        }
        if ($this->container['date_time_redeemed'] === null) {
            $invalidProperties[] = "'date_time_redeemed' can't be null";
        }
        if ($this->container['date_time_refunded'] === null) {
            $invalidProperties[] = "'date_time_refunded' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \OpenAPI\Client\Model\WTWalletPageViewId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \OpenAPI\Client\Model\WTWalletPageViewId $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return \OpenAPI\Client\Model\PickVSStaticVoucherExcludeKeyofVSStaticVoucherRedeemedAtOrRefundedAtOrLastViewedAtTransactionType
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param \OpenAPI\Client\Model\PickVSStaticVoucherExcludeKeyofVSStaticVoucherRedeemedAtOrRefundedAtOrLastViewedAtTransactionType $transaction_type transaction_type
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets register_id
     *
     * @return \OpenAPI\Client\Model\PickVSStaticVoucherExcludeKeyofVSStaticVoucherRedeemedAtOrRefundedAtOrLastViewedAtRegisterID
     */
    public function getRegisterId()
    {
        return $this->container['register_id'];
    }

    /**
     * Sets register_id
     *
     * @param \OpenAPI\Client\Model\PickVSStaticVoucherExcludeKeyofVSStaticVoucherRedeemedAtOrRefundedAtOrLastViewedAtRegisterID $register_id register_id
     *
     * @return self
     */
    public function setRegisterId($register_id)
    {
        if (is_null($register_id)) {
            throw new \InvalidArgumentException('non-nullable register_id cannot be null');
        }
        $this->container['register_id'] = $register_id;

        return $this;
    }

    /**
     * Gets redeemed_source
     *
     * @return string
     */
    public function getRedeemedSource()
    {
        return $this->container['redeemed_source'];
    }

    /**
     * Sets redeemed_source
     *
     * @param string $redeemed_source redeemed_source
     *
     * @return self
     */
    public function setRedeemedSource($redeemed_source)
    {
        if (is_null($redeemed_source)) {
            throw new \InvalidArgumentException('non-nullable redeemed_source cannot be null');
        }
        $this->container['redeemed_source'] = $redeemed_source;

        return $this;
    }

    /**
     * Gets redeemed_transaction_id
     *
     * @return string
     */
    public function getRedeemedTransactionId()
    {
        return $this->container['redeemed_transaction_id'];
    }

    /**
     * Sets redeemed_transaction_id
     *
     * @param string $redeemed_transaction_id redeemed_transaction_id
     *
     * @return self
     */
    public function setRedeemedTransactionId($redeemed_transaction_id)
    {
        if (is_null($redeemed_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable redeemed_transaction_id cannot be null');
        }
        $this->container['redeemed_transaction_id'] = $redeemed_transaction_id;

        return $this;
    }

    /**
     * Gets redeemed_amount
     *
     * @return int
     */
    public function getRedeemedAmount()
    {
        return $this->container['redeemed_amount'];
    }

    /**
     * Sets redeemed_amount
     *
     * @param int $redeemed_amount redeemed_amount
     *
     * @return self
     */
    public function setRedeemedAmount($redeemed_amount)
    {
        if (is_null($redeemed_amount)) {
            throw new \InvalidArgumentException('non-nullable redeemed_amount cannot be null');
        }

        if (($redeemed_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $redeemed_amount when calling WTAdvertisementCreditScan., must be bigger than or equal to 0.');
        }

        $this->container['redeemed_amount'] = $redeemed_amount;

        return $this;
    }

    /**
     * Gets is_redeemed
     *
     * @return bool
     */
    public function getIsRedeemed()
    {
        return $this->container['is_redeemed'];
    }

    /**
     * Sets is_redeemed
     *
     * @param bool $is_redeemed is_redeemed
     *
     * @return self
     */
    public function setIsRedeemed($is_redeemed)
    {
        if (is_null($is_redeemed)) {
            throw new \InvalidArgumentException('non-nullable is_redeemed cannot be null');
        }
        $this->container['is_redeemed'] = $is_redeemed;

        return $this;
    }

    /**
     * Gets refunded_transaction_id
     *
     * @return string
     */
    public function getRefundedTransactionId()
    {
        return $this->container['refunded_transaction_id'];
    }

    /**
     * Sets refunded_transaction_id
     *
     * @param string $refunded_transaction_id refunded_transaction_id
     *
     * @return self
     */
    public function setRefundedTransactionId($refunded_transaction_id)
    {
        if (is_null($refunded_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable refunded_transaction_id cannot be null');
        }
        $this->container['refunded_transaction_id'] = $refunded_transaction_id;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return int
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param int $refunded_amount refunded_amount
     *
     * @return self
     */
    public function setRefundedAmount($refunded_amount)
    {
        if (is_null($refunded_amount)) {
            throw new \InvalidArgumentException('non-nullable refunded_amount cannot be null');
        }

        if (($refunded_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $refunded_amount when calling WTAdvertisementCreditScan., must be bigger than or equal to 0.');
        }

        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\Status
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\Status $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets authorized_against_check_number
     *
     * @return string
     */
    public function getAuthorizedAgainstCheckNumber()
    {
        return $this->container['authorized_against_check_number'];
    }

    /**
     * Sets authorized_against_check_number
     *
     * @param string $authorized_against_check_number authorized_against_check_number
     *
     * @return self
     */
    public function setAuthorizedAgainstCheckNumber($authorized_against_check_number)
    {
        if (is_null($authorized_against_check_number)) {
            throw new \InvalidArgumentException('non-nullable authorized_against_check_number cannot be null');
        }
        $this->container['authorized_against_check_number'] = $authorized_against_check_number;

        return $this;
    }

    /**
     * Gets authorized_amount
     *
     * @return int
     */
    public function getAuthorizedAmount()
    {
        return $this->container['authorized_amount'];
    }

    /**
     * Sets authorized_amount
     *
     * @param int $authorized_amount authorized_amount
     *
     * @return self
     */
    public function setAuthorizedAmount($authorized_amount)
    {
        if (is_null($authorized_amount)) {
            throw new \InvalidArgumentException('non-nullable authorized_amount cannot be null');
        }

        if (($authorized_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $authorized_amount when calling WTAdvertisementCreditScan., must be bigger than or equal to 0.');
        }

        $this->container['authorized_amount'] = $authorized_amount;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        if ((mb_strlen($merchant_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling WTAdvertisementCreditScan., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($merchant_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling WTAdvertisementCreditScan., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($merchant_id)))) {
            throw new \InvalidArgumentException("invalid value for \$merchant_id when calling WTAdvertisementCreditScan., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets advertisement_credit_id
     *
     * @return string
     */
    public function getAdvertisementCreditId()
    {
        return $this->container['advertisement_credit_id'];
    }

    /**
     * Sets advertisement_credit_id
     *
     * @param string $advertisement_credit_id advertisement_credit_id
     *
     * @return self
     */
    public function setAdvertisementCreditId($advertisement_credit_id)
    {
        if (is_null($advertisement_credit_id)) {
            throw new \InvalidArgumentException('non-nullable advertisement_credit_id cannot be null');
        }
        if ((mb_strlen($advertisement_credit_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $advertisement_credit_id when calling WTAdvertisementCreditScan., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($advertisement_credit_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $advertisement_credit_id when calling WTAdvertisementCreditScan., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($advertisement_credit_id)))) {
            throw new \InvalidArgumentException("invalid value for \$advertisement_credit_id when calling WTAdvertisementCreditScan., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['advertisement_credit_id'] = $advertisement_credit_id;

        return $this;
    }

    /**
     * Gets redeemed_amount_decimal
     *
     * @return string
     */
    public function getRedeemedAmountDecimal()
    {
        return $this->container['redeemed_amount_decimal'];
    }

    /**
     * Sets redeemed_amount_decimal
     *
     * @param string $redeemed_amount_decimal redeemed_amount_decimal
     *
     * @return self
     */
    public function setRedeemedAmountDecimal($redeemed_amount_decimal)
    {
        if (is_null($redeemed_amount_decimal)) {
            throw new \InvalidArgumentException('non-nullable redeemed_amount_decimal cannot be null');
        }
        $this->container['redeemed_amount_decimal'] = $redeemed_amount_decimal;

        return $this;
    }

    /**
     * Gets redeemed_amount_string
     *
     * @return string
     */
    public function getRedeemedAmountString()
    {
        return $this->container['redeemed_amount_string'];
    }

    /**
     * Sets redeemed_amount_string
     *
     * @param string $redeemed_amount_string redeemed_amount_string
     *
     * @return self
     */
    public function setRedeemedAmountString($redeemed_amount_string)
    {
        if (is_null($redeemed_amount_string)) {
            throw new \InvalidArgumentException('non-nullable redeemed_amount_string cannot be null');
        }
        $this->container['redeemed_amount_string'] = $redeemed_amount_string;

        return $this;
    }

    /**
     * Gets authorized_amount_decimal
     *
     * @return string
     */
    public function getAuthorizedAmountDecimal()
    {
        return $this->container['authorized_amount_decimal'];
    }

    /**
     * Sets authorized_amount_decimal
     *
     * @param string $authorized_amount_decimal authorized_amount_decimal
     *
     * @return self
     */
    public function setAuthorizedAmountDecimal($authorized_amount_decimal)
    {
        if (is_null($authorized_amount_decimal)) {
            throw new \InvalidArgumentException('non-nullable authorized_amount_decimal cannot be null');
        }
        $this->container['authorized_amount_decimal'] = $authorized_amount_decimal;

        return $this;
    }

    /**
     * Gets authorized_amount_string
     *
     * @return string
     */
    public function getAuthorizedAmountString()
    {
        return $this->container['authorized_amount_string'];
    }

    /**
     * Sets authorized_amount_string
     *
     * @param string $authorized_amount_string authorized_amount_string
     *
     * @return self
     */
    public function setAuthorizedAmountString($authorized_amount_string)
    {
        if (is_null($authorized_amount_string)) {
            throw new \InvalidArgumentException('non-nullable authorized_amount_string cannot be null');
        }
        $this->container['authorized_amount_string'] = $authorized_amount_string;

        return $this;
    }

    /**
     * Gets date_time_redeemed
     *
     * @return \DateTime
     */
    public function getDateTimeRedeemed()
    {
        return $this->container['date_time_redeemed'];
    }

    /**
     * Sets date_time_redeemed
     *
     * @param \DateTime $date_time_redeemed date_time_redeemed
     *
     * @return self
     */
    public function setDateTimeRedeemed($date_time_redeemed)
    {
        if (is_null($date_time_redeemed)) {
            array_push($this->openAPINullablesSetToNull, 'date_time_redeemed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_time_redeemed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_time_redeemed'] = $date_time_redeemed;

        return $this;
    }

    /**
     * Gets date_time_refunded
     *
     * @return \DateTime
     */
    public function getDateTimeRefunded()
    {
        return $this->container['date_time_refunded'];
    }

    /**
     * Sets date_time_refunded
     *
     * @param \DateTime $date_time_refunded date_time_refunded
     *
     * @return self
     */
    public function setDateTimeRefunded($date_time_refunded)
    {
        if (is_null($date_time_refunded)) {
            array_push($this->openAPINullablesSetToNull, 'date_time_refunded');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_time_refunded', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_time_refunded'] = $date_time_refunded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


