<?php
/**
 * WalletConfiguration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WalletConfiguration Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WalletConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WalletConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'header_background_color' => 'string',
        'header_button_color' => 'string',
        'left_menu_header_background_color' => 'string',
        'left_menu_header_font_color' => 'string',
        'left_menu_section_background_color' => 'string',
        'left_menu_section_font_color' => 'string',
        'company_logo_url' => 'string',
        'header_image_url' => 'string',
        'header_custom_icon' => 'string',
        'welcome_message' => 'string',
        'is_apple_enabled' => 'bool',
        'is_google_enabled' => 'bool',
        'is_samsung_enabled' => 'bool',
        'is_ad_credits' => 'bool',
        'is_static_vouchers' => 'bool',
        'is_dynamic_vouchers' => 'bool',
        'is_membership_tier' => 'bool',
        'is_membership_points' => 'bool',
        'is_membership_level' => 'bool',
        'is_gift_cards' => 'bool',
        'is_gift_certificates' => 'bool',
        'is_promotions' => 'bool',
        'is_merchant_credit' => 'bool',
        'is_tickets' => 'bool',
        'is_news_articles' => 'bool',
        'is_performances' => 'bool',
        'is_messages' => 'bool',
        'is_call' => 'bool',
        'is_representatives' => 'bool',
        'is_products' => 'bool',
        'is_services' => 'bool',
        'is_room_rates' => 'bool',
        'is_amenities' => 'bool',
        'is_gaming' => 'bool',
        'is_dining' => 'bool',
        'is_lounges' => 'bool',
        'is_map_directions' => 'bool',
        'is_link_book' => 'bool',
        'is_image_grid' => 'bool',
        'is_videos' => 'bool',
        'is_transaction_history' => 'bool',
        'is_profile' => 'bool',
        'is_settings' => 'bool',
        'is_chat_room' => 'bool',
        'is_sms_opt_in' => 'bool',
        'sms_opt_in_source_id' => '\OpenAPI\Client\Model\WalletConfigurationSmsOptInSourceID',
        'is_email_subscriber' => 'bool',
        'google_analytics_id' => 'string',
        'facebook_pixel_id' => 'string',
        'public_chat_room_channel_id' => 'float',
        'vanity_handle' => 'string',
        'vanity_page_wallet_prefix' => 'string',
        'merchant_credit_payment_design_id' => 'string',
        'custom_domain' => 'string',
        'is_claimed' => 'bool',
        'mobile_app_icon_url' => 'string',
        'is_age_gate' => 'bool',
        'age_gate_minimum' => 'float',
        'social_instagram_url' => 'string',
        'social_facebook_url' => 'string',
        'social_you_tube_url' => 'string',
        'social_twitter_url' => 'string',
        'social_linked_in_url' => 'string',
        'primary_phone_number' => 'string',
        'primary_whats_app' => 'string',
        'primary_email_address' => 'string',
        'id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'merchant_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'header_background_color' => null,
        'header_button_color' => null,
        'left_menu_header_background_color' => null,
        'left_menu_header_font_color' => null,
        'left_menu_section_background_color' => null,
        'left_menu_section_font_color' => null,
        'company_logo_url' => null,
        'header_image_url' => null,
        'header_custom_icon' => null,
        'welcome_message' => null,
        'is_apple_enabled' => null,
        'is_google_enabled' => null,
        'is_samsung_enabled' => null,
        'is_ad_credits' => null,
        'is_static_vouchers' => null,
        'is_dynamic_vouchers' => null,
        'is_membership_tier' => null,
        'is_membership_points' => null,
        'is_membership_level' => null,
        'is_gift_cards' => null,
        'is_gift_certificates' => null,
        'is_promotions' => null,
        'is_merchant_credit' => null,
        'is_tickets' => null,
        'is_news_articles' => null,
        'is_performances' => null,
        'is_messages' => null,
        'is_call' => null,
        'is_representatives' => null,
        'is_products' => null,
        'is_services' => null,
        'is_room_rates' => null,
        'is_amenities' => null,
        'is_gaming' => null,
        'is_dining' => null,
        'is_lounges' => null,
        'is_map_directions' => null,
        'is_link_book' => null,
        'is_image_grid' => null,
        'is_videos' => null,
        'is_transaction_history' => null,
        'is_profile' => null,
        'is_settings' => null,
        'is_chat_room' => null,
        'is_sms_opt_in' => null,
        'sms_opt_in_source_id' => null,
        'is_email_subscriber' => null,
        'google_analytics_id' => null,
        'facebook_pixel_id' => null,
        'public_chat_room_channel_id' => 'double',
        'vanity_handle' => null,
        'vanity_page_wallet_prefix' => null,
        'merchant_credit_payment_design_id' => null,
        'custom_domain' => null,
        'is_claimed' => null,
        'mobile_app_icon_url' => null,
        'is_age_gate' => null,
        'age_gate_minimum' => 'double',
        'social_instagram_url' => null,
        'social_facebook_url' => null,
        'social_you_tube_url' => null,
        'social_twitter_url' => null,
        'social_linked_in_url' => null,
        'primary_phone_number' => null,
        'primary_whats_app' => null,
        'primary_email_address' => null,
        'id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'merchant_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'header_background_color' => false,
        'header_button_color' => false,
        'left_menu_header_background_color' => false,
        'left_menu_header_font_color' => false,
        'left_menu_section_background_color' => false,
        'left_menu_section_font_color' => false,
        'company_logo_url' => false,
        'header_image_url' => false,
        'header_custom_icon' => false,
        'welcome_message' => false,
        'is_apple_enabled' => false,
        'is_google_enabled' => false,
        'is_samsung_enabled' => false,
        'is_ad_credits' => false,
        'is_static_vouchers' => false,
        'is_dynamic_vouchers' => false,
        'is_membership_tier' => false,
        'is_membership_points' => false,
        'is_membership_level' => false,
        'is_gift_cards' => false,
        'is_gift_certificates' => false,
        'is_promotions' => false,
        'is_merchant_credit' => false,
        'is_tickets' => false,
        'is_news_articles' => false,
        'is_performances' => false,
        'is_messages' => false,
        'is_call' => false,
        'is_representatives' => false,
        'is_products' => false,
        'is_services' => false,
        'is_room_rates' => false,
        'is_amenities' => false,
        'is_gaming' => false,
        'is_dining' => false,
        'is_lounges' => false,
        'is_map_directions' => false,
        'is_link_book' => false,
        'is_image_grid' => false,
        'is_videos' => false,
        'is_transaction_history' => false,
        'is_profile' => false,
        'is_settings' => false,
        'is_chat_room' => false,
        'is_sms_opt_in' => false,
        'sms_opt_in_source_id' => false,
        'is_email_subscriber' => false,
        'google_analytics_id' => false,
        'facebook_pixel_id' => false,
        'public_chat_room_channel_id' => false,
        'vanity_handle' => false,
        'vanity_page_wallet_prefix' => false,
        'merchant_credit_payment_design_id' => false,
        'custom_domain' => false,
        'is_claimed' => false,
        'mobile_app_icon_url' => false,
        'is_age_gate' => false,
        'age_gate_minimum' => false,
        'social_instagram_url' => false,
        'social_facebook_url' => false,
        'social_you_tube_url' => false,
        'social_twitter_url' => false,
        'social_linked_in_url' => false,
        'primary_phone_number' => false,
        'primary_whats_app' => false,
        'primary_email_address' => false,
        'id' => false,
        'created_at' => false,
        'updated_at' => false,
        'merchant_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'header_background_color' => 'headerBackgroundColor',
        'header_button_color' => 'headerButtonColor',
        'left_menu_header_background_color' => 'leftMenuHeaderBackgroundColor',
        'left_menu_header_font_color' => 'leftMenuHeaderFontColor',
        'left_menu_section_background_color' => 'leftMenuSectionBackgroundColor',
        'left_menu_section_font_color' => 'leftMenuSectionFontColor',
        'company_logo_url' => 'companyLogoURL',
        'header_image_url' => 'headerImageURL',
        'header_custom_icon' => 'headerCustomIcon',
        'welcome_message' => 'welcomeMessage',
        'is_apple_enabled' => 'isAppleEnabled',
        'is_google_enabled' => 'isGoogleEnabled',
        'is_samsung_enabled' => 'isSamsungEnabled',
        'is_ad_credits' => 'isAdCredits',
        'is_static_vouchers' => 'isStaticVouchers',
        'is_dynamic_vouchers' => 'isDynamicVouchers',
        'is_membership_tier' => 'isMembershipTier',
        'is_membership_points' => 'isMembershipPoints',
        'is_membership_level' => 'isMembershipLevel',
        'is_gift_cards' => 'isGiftCards',
        'is_gift_certificates' => 'isGiftCertificates',
        'is_promotions' => 'isPromotions',
        'is_merchant_credit' => 'isMerchantCredit',
        'is_tickets' => 'isTickets',
        'is_news_articles' => 'isNewsArticles',
        'is_performances' => 'isPerformances',
        'is_messages' => 'isMessages',
        'is_call' => 'isCall',
        'is_representatives' => 'isRepresentatives',
        'is_products' => 'isProducts',
        'is_services' => 'isServices',
        'is_room_rates' => 'isRoomRates',
        'is_amenities' => 'isAmenities',
        'is_gaming' => 'isGaming',
        'is_dining' => 'isDining',
        'is_lounges' => 'isLounges',
        'is_map_directions' => 'isMapDirections',
        'is_link_book' => 'isLinkBook',
        'is_image_grid' => 'isImageGrid',
        'is_videos' => 'isVideos',
        'is_transaction_history' => 'isTransactionHistory',
        'is_profile' => 'isProfile',
        'is_settings' => 'isSettings',
        'is_chat_room' => 'isChatRoom',
        'is_sms_opt_in' => 'isSmsOptIn',
        'sms_opt_in_source_id' => 'smsOptInSourceID',
        'is_email_subscriber' => 'isEmailSubscriber',
        'google_analytics_id' => 'googleAnalyticsID',
        'facebook_pixel_id' => 'facebookPixelID',
        'public_chat_room_channel_id' => 'publicChatRoomChannelID',
        'vanity_handle' => 'vanityHandle',
        'vanity_page_wallet_prefix' => 'vanityPageWalletPrefix',
        'merchant_credit_payment_design_id' => 'merchantCreditPaymentDesignID',
        'custom_domain' => 'customDomain',
        'is_claimed' => 'isClaimed',
        'mobile_app_icon_url' => 'mobileAppIconURL',
        'is_age_gate' => 'isAgeGate',
        'age_gate_minimum' => 'ageGateMinimum',
        'social_instagram_url' => 'socialInstagramURL',
        'social_facebook_url' => 'socialFacebookURL',
        'social_you_tube_url' => 'socialYouTubeURL',
        'social_twitter_url' => 'socialTwitterURL',
        'social_linked_in_url' => 'socialLinkedInURL',
        'primary_phone_number' => 'primaryPhoneNumber',
        'primary_whats_app' => 'primaryWhatsApp',
        'primary_email_address' => 'primaryEmailAddress',
        'id' => 'id',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'merchant_id' => 'merchantID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'header_background_color' => 'setHeaderBackgroundColor',
        'header_button_color' => 'setHeaderButtonColor',
        'left_menu_header_background_color' => 'setLeftMenuHeaderBackgroundColor',
        'left_menu_header_font_color' => 'setLeftMenuHeaderFontColor',
        'left_menu_section_background_color' => 'setLeftMenuSectionBackgroundColor',
        'left_menu_section_font_color' => 'setLeftMenuSectionFontColor',
        'company_logo_url' => 'setCompanyLogoUrl',
        'header_image_url' => 'setHeaderImageUrl',
        'header_custom_icon' => 'setHeaderCustomIcon',
        'welcome_message' => 'setWelcomeMessage',
        'is_apple_enabled' => 'setIsAppleEnabled',
        'is_google_enabled' => 'setIsGoogleEnabled',
        'is_samsung_enabled' => 'setIsSamsungEnabled',
        'is_ad_credits' => 'setIsAdCredits',
        'is_static_vouchers' => 'setIsStaticVouchers',
        'is_dynamic_vouchers' => 'setIsDynamicVouchers',
        'is_membership_tier' => 'setIsMembershipTier',
        'is_membership_points' => 'setIsMembershipPoints',
        'is_membership_level' => 'setIsMembershipLevel',
        'is_gift_cards' => 'setIsGiftCards',
        'is_gift_certificates' => 'setIsGiftCertificates',
        'is_promotions' => 'setIsPromotions',
        'is_merchant_credit' => 'setIsMerchantCredit',
        'is_tickets' => 'setIsTickets',
        'is_news_articles' => 'setIsNewsArticles',
        'is_performances' => 'setIsPerformances',
        'is_messages' => 'setIsMessages',
        'is_call' => 'setIsCall',
        'is_representatives' => 'setIsRepresentatives',
        'is_products' => 'setIsProducts',
        'is_services' => 'setIsServices',
        'is_room_rates' => 'setIsRoomRates',
        'is_amenities' => 'setIsAmenities',
        'is_gaming' => 'setIsGaming',
        'is_dining' => 'setIsDining',
        'is_lounges' => 'setIsLounges',
        'is_map_directions' => 'setIsMapDirections',
        'is_link_book' => 'setIsLinkBook',
        'is_image_grid' => 'setIsImageGrid',
        'is_videos' => 'setIsVideos',
        'is_transaction_history' => 'setIsTransactionHistory',
        'is_profile' => 'setIsProfile',
        'is_settings' => 'setIsSettings',
        'is_chat_room' => 'setIsChatRoom',
        'is_sms_opt_in' => 'setIsSmsOptIn',
        'sms_opt_in_source_id' => 'setSmsOptInSourceId',
        'is_email_subscriber' => 'setIsEmailSubscriber',
        'google_analytics_id' => 'setGoogleAnalyticsId',
        'facebook_pixel_id' => 'setFacebookPixelId',
        'public_chat_room_channel_id' => 'setPublicChatRoomChannelId',
        'vanity_handle' => 'setVanityHandle',
        'vanity_page_wallet_prefix' => 'setVanityPageWalletPrefix',
        'merchant_credit_payment_design_id' => 'setMerchantCreditPaymentDesignId',
        'custom_domain' => 'setCustomDomain',
        'is_claimed' => 'setIsClaimed',
        'mobile_app_icon_url' => 'setMobileAppIconUrl',
        'is_age_gate' => 'setIsAgeGate',
        'age_gate_minimum' => 'setAgeGateMinimum',
        'social_instagram_url' => 'setSocialInstagramUrl',
        'social_facebook_url' => 'setSocialFacebookUrl',
        'social_you_tube_url' => 'setSocialYouTubeUrl',
        'social_twitter_url' => 'setSocialTwitterUrl',
        'social_linked_in_url' => 'setSocialLinkedInUrl',
        'primary_phone_number' => 'setPrimaryPhoneNumber',
        'primary_whats_app' => 'setPrimaryWhatsApp',
        'primary_email_address' => 'setPrimaryEmailAddress',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'merchant_id' => 'setMerchantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'header_background_color' => 'getHeaderBackgroundColor',
        'header_button_color' => 'getHeaderButtonColor',
        'left_menu_header_background_color' => 'getLeftMenuHeaderBackgroundColor',
        'left_menu_header_font_color' => 'getLeftMenuHeaderFontColor',
        'left_menu_section_background_color' => 'getLeftMenuSectionBackgroundColor',
        'left_menu_section_font_color' => 'getLeftMenuSectionFontColor',
        'company_logo_url' => 'getCompanyLogoUrl',
        'header_image_url' => 'getHeaderImageUrl',
        'header_custom_icon' => 'getHeaderCustomIcon',
        'welcome_message' => 'getWelcomeMessage',
        'is_apple_enabled' => 'getIsAppleEnabled',
        'is_google_enabled' => 'getIsGoogleEnabled',
        'is_samsung_enabled' => 'getIsSamsungEnabled',
        'is_ad_credits' => 'getIsAdCredits',
        'is_static_vouchers' => 'getIsStaticVouchers',
        'is_dynamic_vouchers' => 'getIsDynamicVouchers',
        'is_membership_tier' => 'getIsMembershipTier',
        'is_membership_points' => 'getIsMembershipPoints',
        'is_membership_level' => 'getIsMembershipLevel',
        'is_gift_cards' => 'getIsGiftCards',
        'is_gift_certificates' => 'getIsGiftCertificates',
        'is_promotions' => 'getIsPromotions',
        'is_merchant_credit' => 'getIsMerchantCredit',
        'is_tickets' => 'getIsTickets',
        'is_news_articles' => 'getIsNewsArticles',
        'is_performances' => 'getIsPerformances',
        'is_messages' => 'getIsMessages',
        'is_call' => 'getIsCall',
        'is_representatives' => 'getIsRepresentatives',
        'is_products' => 'getIsProducts',
        'is_services' => 'getIsServices',
        'is_room_rates' => 'getIsRoomRates',
        'is_amenities' => 'getIsAmenities',
        'is_gaming' => 'getIsGaming',
        'is_dining' => 'getIsDining',
        'is_lounges' => 'getIsLounges',
        'is_map_directions' => 'getIsMapDirections',
        'is_link_book' => 'getIsLinkBook',
        'is_image_grid' => 'getIsImageGrid',
        'is_videos' => 'getIsVideos',
        'is_transaction_history' => 'getIsTransactionHistory',
        'is_profile' => 'getIsProfile',
        'is_settings' => 'getIsSettings',
        'is_chat_room' => 'getIsChatRoom',
        'is_sms_opt_in' => 'getIsSmsOptIn',
        'sms_opt_in_source_id' => 'getSmsOptInSourceId',
        'is_email_subscriber' => 'getIsEmailSubscriber',
        'google_analytics_id' => 'getGoogleAnalyticsId',
        'facebook_pixel_id' => 'getFacebookPixelId',
        'public_chat_room_channel_id' => 'getPublicChatRoomChannelId',
        'vanity_handle' => 'getVanityHandle',
        'vanity_page_wallet_prefix' => 'getVanityPageWalletPrefix',
        'merchant_credit_payment_design_id' => 'getMerchantCreditPaymentDesignId',
        'custom_domain' => 'getCustomDomain',
        'is_claimed' => 'getIsClaimed',
        'mobile_app_icon_url' => 'getMobileAppIconUrl',
        'is_age_gate' => 'getIsAgeGate',
        'age_gate_minimum' => 'getAgeGateMinimum',
        'social_instagram_url' => 'getSocialInstagramUrl',
        'social_facebook_url' => 'getSocialFacebookUrl',
        'social_you_tube_url' => 'getSocialYouTubeUrl',
        'social_twitter_url' => 'getSocialTwitterUrl',
        'social_linked_in_url' => 'getSocialLinkedInUrl',
        'primary_phone_number' => 'getPrimaryPhoneNumber',
        'primary_whats_app' => 'getPrimaryWhatsApp',
        'primary_email_address' => 'getPrimaryEmailAddress',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'merchant_id' => 'getMerchantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('header_background_color', $data ?? [], null);
        $this->setIfExists('header_button_color', $data ?? [], null);
        $this->setIfExists('left_menu_header_background_color', $data ?? [], null);
        $this->setIfExists('left_menu_header_font_color', $data ?? [], null);
        $this->setIfExists('left_menu_section_background_color', $data ?? [], null);
        $this->setIfExists('left_menu_section_font_color', $data ?? [], null);
        $this->setIfExists('company_logo_url', $data ?? [], null);
        $this->setIfExists('header_image_url', $data ?? [], null);
        $this->setIfExists('header_custom_icon', $data ?? [], null);
        $this->setIfExists('welcome_message', $data ?? [], null);
        $this->setIfExists('is_apple_enabled', $data ?? [], null);
        $this->setIfExists('is_google_enabled', $data ?? [], null);
        $this->setIfExists('is_samsung_enabled', $data ?? [], null);
        $this->setIfExists('is_ad_credits', $data ?? [], null);
        $this->setIfExists('is_static_vouchers', $data ?? [], null);
        $this->setIfExists('is_dynamic_vouchers', $data ?? [], null);
        $this->setIfExists('is_membership_tier', $data ?? [], null);
        $this->setIfExists('is_membership_points', $data ?? [], null);
        $this->setIfExists('is_membership_level', $data ?? [], null);
        $this->setIfExists('is_gift_cards', $data ?? [], null);
        $this->setIfExists('is_gift_certificates', $data ?? [], null);
        $this->setIfExists('is_promotions', $data ?? [], null);
        $this->setIfExists('is_merchant_credit', $data ?? [], null);
        $this->setIfExists('is_tickets', $data ?? [], null);
        $this->setIfExists('is_news_articles', $data ?? [], null);
        $this->setIfExists('is_performances', $data ?? [], null);
        $this->setIfExists('is_messages', $data ?? [], null);
        $this->setIfExists('is_call', $data ?? [], null);
        $this->setIfExists('is_representatives', $data ?? [], null);
        $this->setIfExists('is_products', $data ?? [], null);
        $this->setIfExists('is_services', $data ?? [], null);
        $this->setIfExists('is_room_rates', $data ?? [], null);
        $this->setIfExists('is_amenities', $data ?? [], null);
        $this->setIfExists('is_gaming', $data ?? [], null);
        $this->setIfExists('is_dining', $data ?? [], null);
        $this->setIfExists('is_lounges', $data ?? [], null);
        $this->setIfExists('is_map_directions', $data ?? [], null);
        $this->setIfExists('is_link_book', $data ?? [], null);
        $this->setIfExists('is_image_grid', $data ?? [], null);
        $this->setIfExists('is_videos', $data ?? [], null);
        $this->setIfExists('is_transaction_history', $data ?? [], null);
        $this->setIfExists('is_profile', $data ?? [], null);
        $this->setIfExists('is_settings', $data ?? [], null);
        $this->setIfExists('is_chat_room', $data ?? [], null);
        $this->setIfExists('is_sms_opt_in', $data ?? [], null);
        $this->setIfExists('sms_opt_in_source_id', $data ?? [], null);
        $this->setIfExists('is_email_subscriber', $data ?? [], null);
        $this->setIfExists('google_analytics_id', $data ?? [], null);
        $this->setIfExists('facebook_pixel_id', $data ?? [], null);
        $this->setIfExists('public_chat_room_channel_id', $data ?? [], null);
        $this->setIfExists('vanity_handle', $data ?? [], null);
        $this->setIfExists('vanity_page_wallet_prefix', $data ?? [], null);
        $this->setIfExists('merchant_credit_payment_design_id', $data ?? [], null);
        $this->setIfExists('custom_domain', $data ?? [], null);
        $this->setIfExists('is_claimed', $data ?? [], null);
        $this->setIfExists('mobile_app_icon_url', $data ?? [], null);
        $this->setIfExists('is_age_gate', $data ?? [], null);
        $this->setIfExists('age_gate_minimum', $data ?? [], null);
        $this->setIfExists('social_instagram_url', $data ?? [], null);
        $this->setIfExists('social_facebook_url', $data ?? [], null);
        $this->setIfExists('social_you_tube_url', $data ?? [], null);
        $this->setIfExists('social_twitter_url', $data ?? [], null);
        $this->setIfExists('social_linked_in_url', $data ?? [], null);
        $this->setIfExists('primary_phone_number', $data ?? [], null);
        $this->setIfExists('primary_whats_app', $data ?? [], null);
        $this->setIfExists('primary_email_address', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['header_background_color'] === null) {
            $invalidProperties[] = "'header_background_color' can't be null";
        }
        if ($this->container['header_button_color'] === null) {
            $invalidProperties[] = "'header_button_color' can't be null";
        }
        if ($this->container['left_menu_header_background_color'] === null) {
            $invalidProperties[] = "'left_menu_header_background_color' can't be null";
        }
        if ($this->container['left_menu_header_font_color'] === null) {
            $invalidProperties[] = "'left_menu_header_font_color' can't be null";
        }
        if ($this->container['left_menu_section_background_color'] === null) {
            $invalidProperties[] = "'left_menu_section_background_color' can't be null";
        }
        if ($this->container['left_menu_section_font_color'] === null) {
            $invalidProperties[] = "'left_menu_section_font_color' can't be null";
        }
        if ($this->container['company_logo_url'] === null) {
            $invalidProperties[] = "'company_logo_url' can't be null";
        }
        if ($this->container['welcome_message'] === null) {
            $invalidProperties[] = "'welcome_message' can't be null";
        }
        if ($this->container['is_apple_enabled'] === null) {
            $invalidProperties[] = "'is_apple_enabled' can't be null";
        }
        if ($this->container['is_google_enabled'] === null) {
            $invalidProperties[] = "'is_google_enabled' can't be null";
        }
        if ($this->container['is_samsung_enabled'] === null) {
            $invalidProperties[] = "'is_samsung_enabled' can't be null";
        }
        if ($this->container['is_ad_credits'] === null) {
            $invalidProperties[] = "'is_ad_credits' can't be null";
        }
        if ($this->container['is_static_vouchers'] === null) {
            $invalidProperties[] = "'is_static_vouchers' can't be null";
        }
        if ($this->container['is_dynamic_vouchers'] === null) {
            $invalidProperties[] = "'is_dynamic_vouchers' can't be null";
        }
        if ($this->container['is_membership_tier'] === null) {
            $invalidProperties[] = "'is_membership_tier' can't be null";
        }
        if ($this->container['is_membership_points'] === null) {
            $invalidProperties[] = "'is_membership_points' can't be null";
        }
        if ($this->container['is_membership_level'] === null) {
            $invalidProperties[] = "'is_membership_level' can't be null";
        }
        if ($this->container['is_gift_cards'] === null) {
            $invalidProperties[] = "'is_gift_cards' can't be null";
        }
        if ($this->container['is_gift_certificates'] === null) {
            $invalidProperties[] = "'is_gift_certificates' can't be null";
        }
        if ($this->container['is_promotions'] === null) {
            $invalidProperties[] = "'is_promotions' can't be null";
        }
        if ($this->container['is_merchant_credit'] === null) {
            $invalidProperties[] = "'is_merchant_credit' can't be null";
        }
        if ($this->container['is_news_articles'] === null) {
            $invalidProperties[] = "'is_news_articles' can't be null";
        }
        if ($this->container['is_performances'] === null) {
            $invalidProperties[] = "'is_performances' can't be null";
        }
        if ($this->container['is_messages'] === null) {
            $invalidProperties[] = "'is_messages' can't be null";
        }
        if ($this->container['is_call'] === null) {
            $invalidProperties[] = "'is_call' can't be null";
        }
        if ($this->container['is_representatives'] === null) {
            $invalidProperties[] = "'is_representatives' can't be null";
        }
        if ($this->container['is_products'] === null) {
            $invalidProperties[] = "'is_products' can't be null";
        }
        if ($this->container['is_services'] === null) {
            $invalidProperties[] = "'is_services' can't be null";
        }
        if ($this->container['is_room_rates'] === null) {
            $invalidProperties[] = "'is_room_rates' can't be null";
        }
        if ($this->container['is_amenities'] === null) {
            $invalidProperties[] = "'is_amenities' can't be null";
        }
        if ($this->container['is_gaming'] === null) {
            $invalidProperties[] = "'is_gaming' can't be null";
        }
        if ($this->container['is_dining'] === null) {
            $invalidProperties[] = "'is_dining' can't be null";
        }
        if ($this->container['is_lounges'] === null) {
            $invalidProperties[] = "'is_lounges' can't be null";
        }
        if ($this->container['is_map_directions'] === null) {
            $invalidProperties[] = "'is_map_directions' can't be null";
        }
        if ($this->container['is_link_book'] === null) {
            $invalidProperties[] = "'is_link_book' can't be null";
        }
        if ($this->container['is_image_grid'] === null) {
            $invalidProperties[] = "'is_image_grid' can't be null";
        }
        if ($this->container['is_videos'] === null) {
            $invalidProperties[] = "'is_videos' can't be null";
        }
        if ($this->container['is_transaction_history'] === null) {
            $invalidProperties[] = "'is_transaction_history' can't be null";
        }
        if ($this->container['is_profile'] === null) {
            $invalidProperties[] = "'is_profile' can't be null";
        }
        if ($this->container['is_settings'] === null) {
            $invalidProperties[] = "'is_settings' can't be null";
        }
        if ($this->container['is_chat_room'] === null) {
            $invalidProperties[] = "'is_chat_room' can't be null";
        }
        if ($this->container['is_sms_opt_in'] === null) {
            $invalidProperties[] = "'is_sms_opt_in' can't be null";
        }
        if ($this->container['is_email_subscriber'] === null) {
            $invalidProperties[] = "'is_email_subscriber' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 10)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['id']) < 10)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ((mb_strlen($this->container['merchant_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['merchant_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['merchant_id'])) {
            $invalidProperties[] = "invalid value for 'merchant_id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets header_background_color
     *
     * @return string
     */
    public function getHeaderBackgroundColor()
    {
        return $this->container['header_background_color'];
    }

    /**
     * Sets header_background_color
     *
     * @param string $header_background_color header_background_color
     *
     * @return self
     */
    public function setHeaderBackgroundColor($header_background_color)
    {
        if (is_null($header_background_color)) {
            throw new \InvalidArgumentException('non-nullable header_background_color cannot be null');
        }
        $this->container['header_background_color'] = $header_background_color;

        return $this;
    }

    /**
     * Gets header_button_color
     *
     * @return string
     */
    public function getHeaderButtonColor()
    {
        return $this->container['header_button_color'];
    }

    /**
     * Sets header_button_color
     *
     * @param string $header_button_color header_button_color
     *
     * @return self
     */
    public function setHeaderButtonColor($header_button_color)
    {
        if (is_null($header_button_color)) {
            throw new \InvalidArgumentException('non-nullable header_button_color cannot be null');
        }
        $this->container['header_button_color'] = $header_button_color;

        return $this;
    }

    /**
     * Gets left_menu_header_background_color
     *
     * @return string
     */
    public function getLeftMenuHeaderBackgroundColor()
    {
        return $this->container['left_menu_header_background_color'];
    }

    /**
     * Sets left_menu_header_background_color
     *
     * @param string $left_menu_header_background_color left_menu_header_background_color
     *
     * @return self
     */
    public function setLeftMenuHeaderBackgroundColor($left_menu_header_background_color)
    {
        if (is_null($left_menu_header_background_color)) {
            throw new \InvalidArgumentException('non-nullable left_menu_header_background_color cannot be null');
        }
        $this->container['left_menu_header_background_color'] = $left_menu_header_background_color;

        return $this;
    }

    /**
     * Gets left_menu_header_font_color
     *
     * @return string
     */
    public function getLeftMenuHeaderFontColor()
    {
        return $this->container['left_menu_header_font_color'];
    }

    /**
     * Sets left_menu_header_font_color
     *
     * @param string $left_menu_header_font_color left_menu_header_font_color
     *
     * @return self
     */
    public function setLeftMenuHeaderFontColor($left_menu_header_font_color)
    {
        if (is_null($left_menu_header_font_color)) {
            throw new \InvalidArgumentException('non-nullable left_menu_header_font_color cannot be null');
        }
        $this->container['left_menu_header_font_color'] = $left_menu_header_font_color;

        return $this;
    }

    /**
     * Gets left_menu_section_background_color
     *
     * @return string
     */
    public function getLeftMenuSectionBackgroundColor()
    {
        return $this->container['left_menu_section_background_color'];
    }

    /**
     * Sets left_menu_section_background_color
     *
     * @param string $left_menu_section_background_color left_menu_section_background_color
     *
     * @return self
     */
    public function setLeftMenuSectionBackgroundColor($left_menu_section_background_color)
    {
        if (is_null($left_menu_section_background_color)) {
            throw new \InvalidArgumentException('non-nullable left_menu_section_background_color cannot be null');
        }
        $this->container['left_menu_section_background_color'] = $left_menu_section_background_color;

        return $this;
    }

    /**
     * Gets left_menu_section_font_color
     *
     * @return string
     */
    public function getLeftMenuSectionFontColor()
    {
        return $this->container['left_menu_section_font_color'];
    }

    /**
     * Sets left_menu_section_font_color
     *
     * @param string $left_menu_section_font_color left_menu_section_font_color
     *
     * @return self
     */
    public function setLeftMenuSectionFontColor($left_menu_section_font_color)
    {
        if (is_null($left_menu_section_font_color)) {
            throw new \InvalidArgumentException('non-nullable left_menu_section_font_color cannot be null');
        }
        $this->container['left_menu_section_font_color'] = $left_menu_section_font_color;

        return $this;
    }

    /**
     * Gets company_logo_url
     *
     * @return string
     */
    public function getCompanyLogoUrl()
    {
        return $this->container['company_logo_url'];
    }

    /**
     * Sets company_logo_url
     *
     * @param string $company_logo_url company_logo_url
     *
     * @return self
     */
    public function setCompanyLogoUrl($company_logo_url)
    {
        if (is_null($company_logo_url)) {
            throw new \InvalidArgumentException('non-nullable company_logo_url cannot be null');
        }
        $this->container['company_logo_url'] = $company_logo_url;

        return $this;
    }

    /**
     * Gets header_image_url
     *
     * @return string|null
     */
    public function getHeaderImageUrl()
    {
        return $this->container['header_image_url'];
    }

    /**
     * Sets header_image_url
     *
     * @param string|null $header_image_url header_image_url
     *
     * @return self
     */
    public function setHeaderImageUrl($header_image_url)
    {
        if (is_null($header_image_url)) {
            throw new \InvalidArgumentException('non-nullable header_image_url cannot be null');
        }
        $this->container['header_image_url'] = $header_image_url;

        return $this;
    }

    /**
     * Gets header_custom_icon
     *
     * @return string|null
     */
    public function getHeaderCustomIcon()
    {
        return $this->container['header_custom_icon'];
    }

    /**
     * Sets header_custom_icon
     *
     * @param string|null $header_custom_icon header_custom_icon
     *
     * @return self
     */
    public function setHeaderCustomIcon($header_custom_icon)
    {
        if (is_null($header_custom_icon)) {
            throw new \InvalidArgumentException('non-nullable header_custom_icon cannot be null');
        }
        $this->container['header_custom_icon'] = $header_custom_icon;

        return $this;
    }

    /**
     * Gets welcome_message
     *
     * @return string
     */
    public function getWelcomeMessage()
    {
        return $this->container['welcome_message'];
    }

    /**
     * Sets welcome_message
     *
     * @param string $welcome_message welcome_message
     *
     * @return self
     */
    public function setWelcomeMessage($welcome_message)
    {
        if (is_null($welcome_message)) {
            throw new \InvalidArgumentException('non-nullable welcome_message cannot be null');
        }
        $this->container['welcome_message'] = $welcome_message;

        return $this;
    }

    /**
     * Gets is_apple_enabled
     *
     * @return bool
     */
    public function getIsAppleEnabled()
    {
        return $this->container['is_apple_enabled'];
    }

    /**
     * Sets is_apple_enabled
     *
     * @param bool $is_apple_enabled is_apple_enabled
     *
     * @return self
     */
    public function setIsAppleEnabled($is_apple_enabled)
    {
        if (is_null($is_apple_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_apple_enabled cannot be null');
        }
        $this->container['is_apple_enabled'] = $is_apple_enabled;

        return $this;
    }

    /**
     * Gets is_google_enabled
     *
     * @return bool
     */
    public function getIsGoogleEnabled()
    {
        return $this->container['is_google_enabled'];
    }

    /**
     * Sets is_google_enabled
     *
     * @param bool $is_google_enabled is_google_enabled
     *
     * @return self
     */
    public function setIsGoogleEnabled($is_google_enabled)
    {
        if (is_null($is_google_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_google_enabled cannot be null');
        }
        $this->container['is_google_enabled'] = $is_google_enabled;

        return $this;
    }

    /**
     * Gets is_samsung_enabled
     *
     * @return bool
     */
    public function getIsSamsungEnabled()
    {
        return $this->container['is_samsung_enabled'];
    }

    /**
     * Sets is_samsung_enabled
     *
     * @param bool $is_samsung_enabled is_samsung_enabled
     *
     * @return self
     */
    public function setIsSamsungEnabled($is_samsung_enabled)
    {
        if (is_null($is_samsung_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_samsung_enabled cannot be null');
        }
        $this->container['is_samsung_enabled'] = $is_samsung_enabled;

        return $this;
    }

    /**
     * Gets is_ad_credits
     *
     * @return bool
     */
    public function getIsAdCredits()
    {
        return $this->container['is_ad_credits'];
    }

    /**
     * Sets is_ad_credits
     *
     * @param bool $is_ad_credits is_ad_credits
     *
     * @return self
     */
    public function setIsAdCredits($is_ad_credits)
    {
        if (is_null($is_ad_credits)) {
            throw new \InvalidArgumentException('non-nullable is_ad_credits cannot be null');
        }
        $this->container['is_ad_credits'] = $is_ad_credits;

        return $this;
    }

    /**
     * Gets is_static_vouchers
     *
     * @return bool
     */
    public function getIsStaticVouchers()
    {
        return $this->container['is_static_vouchers'];
    }

    /**
     * Sets is_static_vouchers
     *
     * @param bool $is_static_vouchers is_static_vouchers
     *
     * @return self
     */
    public function setIsStaticVouchers($is_static_vouchers)
    {
        if (is_null($is_static_vouchers)) {
            throw new \InvalidArgumentException('non-nullable is_static_vouchers cannot be null');
        }
        $this->container['is_static_vouchers'] = $is_static_vouchers;

        return $this;
    }

    /**
     * Gets is_dynamic_vouchers
     *
     * @return bool
     */
    public function getIsDynamicVouchers()
    {
        return $this->container['is_dynamic_vouchers'];
    }

    /**
     * Sets is_dynamic_vouchers
     *
     * @param bool $is_dynamic_vouchers is_dynamic_vouchers
     *
     * @return self
     */
    public function setIsDynamicVouchers($is_dynamic_vouchers)
    {
        if (is_null($is_dynamic_vouchers)) {
            throw new \InvalidArgumentException('non-nullable is_dynamic_vouchers cannot be null');
        }
        $this->container['is_dynamic_vouchers'] = $is_dynamic_vouchers;

        return $this;
    }

    /**
     * Gets is_membership_tier
     *
     * @return bool
     */
    public function getIsMembershipTier()
    {
        return $this->container['is_membership_tier'];
    }

    /**
     * Sets is_membership_tier
     *
     * @param bool $is_membership_tier is_membership_tier
     *
     * @return self
     */
    public function setIsMembershipTier($is_membership_tier)
    {
        if (is_null($is_membership_tier)) {
            throw new \InvalidArgumentException('non-nullable is_membership_tier cannot be null');
        }
        $this->container['is_membership_tier'] = $is_membership_tier;

        return $this;
    }

    /**
     * Gets is_membership_points
     *
     * @return bool
     */
    public function getIsMembershipPoints()
    {
        return $this->container['is_membership_points'];
    }

    /**
     * Sets is_membership_points
     *
     * @param bool $is_membership_points is_membership_points
     *
     * @return self
     */
    public function setIsMembershipPoints($is_membership_points)
    {
        if (is_null($is_membership_points)) {
            throw new \InvalidArgumentException('non-nullable is_membership_points cannot be null');
        }
        $this->container['is_membership_points'] = $is_membership_points;

        return $this;
    }

    /**
     * Gets is_membership_level
     *
     * @return bool
     */
    public function getIsMembershipLevel()
    {
        return $this->container['is_membership_level'];
    }

    /**
     * Sets is_membership_level
     *
     * @param bool $is_membership_level is_membership_level
     *
     * @return self
     */
    public function setIsMembershipLevel($is_membership_level)
    {
        if (is_null($is_membership_level)) {
            throw new \InvalidArgumentException('non-nullable is_membership_level cannot be null');
        }
        $this->container['is_membership_level'] = $is_membership_level;

        return $this;
    }

    /**
     * Gets is_gift_cards
     *
     * @return bool
     */
    public function getIsGiftCards()
    {
        return $this->container['is_gift_cards'];
    }

    /**
     * Sets is_gift_cards
     *
     * @param bool $is_gift_cards is_gift_cards
     *
     * @return self
     */
    public function setIsGiftCards($is_gift_cards)
    {
        if (is_null($is_gift_cards)) {
            throw new \InvalidArgumentException('non-nullable is_gift_cards cannot be null');
        }
        $this->container['is_gift_cards'] = $is_gift_cards;

        return $this;
    }

    /**
     * Gets is_gift_certificates
     *
     * @return bool
     */
    public function getIsGiftCertificates()
    {
        return $this->container['is_gift_certificates'];
    }

    /**
     * Sets is_gift_certificates
     *
     * @param bool $is_gift_certificates is_gift_certificates
     *
     * @return self
     */
    public function setIsGiftCertificates($is_gift_certificates)
    {
        if (is_null($is_gift_certificates)) {
            throw new \InvalidArgumentException('non-nullable is_gift_certificates cannot be null');
        }
        $this->container['is_gift_certificates'] = $is_gift_certificates;

        return $this;
    }

    /**
     * Gets is_promotions
     *
     * @return bool
     */
    public function getIsPromotions()
    {
        return $this->container['is_promotions'];
    }

    /**
     * Sets is_promotions
     *
     * @param bool $is_promotions is_promotions
     *
     * @return self
     */
    public function setIsPromotions($is_promotions)
    {
        if (is_null($is_promotions)) {
            throw new \InvalidArgumentException('non-nullable is_promotions cannot be null');
        }
        $this->container['is_promotions'] = $is_promotions;

        return $this;
    }

    /**
     * Gets is_merchant_credit
     *
     * @return bool
     */
    public function getIsMerchantCredit()
    {
        return $this->container['is_merchant_credit'];
    }

    /**
     * Sets is_merchant_credit
     *
     * @param bool $is_merchant_credit is_merchant_credit
     *
     * @return self
     */
    public function setIsMerchantCredit($is_merchant_credit)
    {
        if (is_null($is_merchant_credit)) {
            throw new \InvalidArgumentException('non-nullable is_merchant_credit cannot be null');
        }
        $this->container['is_merchant_credit'] = $is_merchant_credit;

        return $this;
    }

    /**
     * Gets is_tickets
     *
     * @return bool|null
     */
    public function getIsTickets()
    {
        return $this->container['is_tickets'];
    }

    /**
     * Sets is_tickets
     *
     * @param bool|null $is_tickets is_tickets
     *
     * @return self
     */
    public function setIsTickets($is_tickets)
    {
        if (is_null($is_tickets)) {
            throw new \InvalidArgumentException('non-nullable is_tickets cannot be null');
        }
        $this->container['is_tickets'] = $is_tickets;

        return $this;
    }

    /**
     * Gets is_news_articles
     *
     * @return bool
     */
    public function getIsNewsArticles()
    {
        return $this->container['is_news_articles'];
    }

    /**
     * Sets is_news_articles
     *
     * @param bool $is_news_articles is_news_articles
     *
     * @return self
     */
    public function setIsNewsArticles($is_news_articles)
    {
        if (is_null($is_news_articles)) {
            throw new \InvalidArgumentException('non-nullable is_news_articles cannot be null');
        }
        $this->container['is_news_articles'] = $is_news_articles;

        return $this;
    }

    /**
     * Gets is_performances
     *
     * @return bool
     */
    public function getIsPerformances()
    {
        return $this->container['is_performances'];
    }

    /**
     * Sets is_performances
     *
     * @param bool $is_performances is_performances
     *
     * @return self
     */
    public function setIsPerformances($is_performances)
    {
        if (is_null($is_performances)) {
            throw new \InvalidArgumentException('non-nullable is_performances cannot be null');
        }
        $this->container['is_performances'] = $is_performances;

        return $this;
    }

    /**
     * Gets is_messages
     *
     * @return bool
     */
    public function getIsMessages()
    {
        return $this->container['is_messages'];
    }

    /**
     * Sets is_messages
     *
     * @param bool $is_messages is_messages
     *
     * @return self
     */
    public function setIsMessages($is_messages)
    {
        if (is_null($is_messages)) {
            throw new \InvalidArgumentException('non-nullable is_messages cannot be null');
        }
        $this->container['is_messages'] = $is_messages;

        return $this;
    }

    /**
     * Gets is_call
     *
     * @return bool
     */
    public function getIsCall()
    {
        return $this->container['is_call'];
    }

    /**
     * Sets is_call
     *
     * @param bool $is_call is_call
     *
     * @return self
     */
    public function setIsCall($is_call)
    {
        if (is_null($is_call)) {
            throw new \InvalidArgumentException('non-nullable is_call cannot be null');
        }
        $this->container['is_call'] = $is_call;

        return $this;
    }

    /**
     * Gets is_representatives
     *
     * @return bool
     */
    public function getIsRepresentatives()
    {
        return $this->container['is_representatives'];
    }

    /**
     * Sets is_representatives
     *
     * @param bool $is_representatives is_representatives
     *
     * @return self
     */
    public function setIsRepresentatives($is_representatives)
    {
        if (is_null($is_representatives)) {
            throw new \InvalidArgumentException('non-nullable is_representatives cannot be null');
        }
        $this->container['is_representatives'] = $is_representatives;

        return $this;
    }

    /**
     * Gets is_products
     *
     * @return bool
     */
    public function getIsProducts()
    {
        return $this->container['is_products'];
    }

    /**
     * Sets is_products
     *
     * @param bool $is_products is_products
     *
     * @return self
     */
    public function setIsProducts($is_products)
    {
        if (is_null($is_products)) {
            throw new \InvalidArgumentException('non-nullable is_products cannot be null');
        }
        $this->container['is_products'] = $is_products;

        return $this;
    }

    /**
     * Gets is_services
     *
     * @return bool
     */
    public function getIsServices()
    {
        return $this->container['is_services'];
    }

    /**
     * Sets is_services
     *
     * @param bool $is_services is_services
     *
     * @return self
     */
    public function setIsServices($is_services)
    {
        if (is_null($is_services)) {
            throw new \InvalidArgumentException('non-nullable is_services cannot be null');
        }
        $this->container['is_services'] = $is_services;

        return $this;
    }

    /**
     * Gets is_room_rates
     *
     * @return bool
     */
    public function getIsRoomRates()
    {
        return $this->container['is_room_rates'];
    }

    /**
     * Sets is_room_rates
     *
     * @param bool $is_room_rates is_room_rates
     *
     * @return self
     */
    public function setIsRoomRates($is_room_rates)
    {
        if (is_null($is_room_rates)) {
            throw new \InvalidArgumentException('non-nullable is_room_rates cannot be null');
        }
        $this->container['is_room_rates'] = $is_room_rates;

        return $this;
    }

    /**
     * Gets is_amenities
     *
     * @return bool
     */
    public function getIsAmenities()
    {
        return $this->container['is_amenities'];
    }

    /**
     * Sets is_amenities
     *
     * @param bool $is_amenities is_amenities
     *
     * @return self
     */
    public function setIsAmenities($is_amenities)
    {
        if (is_null($is_amenities)) {
            throw new \InvalidArgumentException('non-nullable is_amenities cannot be null');
        }
        $this->container['is_amenities'] = $is_amenities;

        return $this;
    }

    /**
     * Gets is_gaming
     *
     * @return bool
     */
    public function getIsGaming()
    {
        return $this->container['is_gaming'];
    }

    /**
     * Sets is_gaming
     *
     * @param bool $is_gaming is_gaming
     *
     * @return self
     */
    public function setIsGaming($is_gaming)
    {
        if (is_null($is_gaming)) {
            throw new \InvalidArgumentException('non-nullable is_gaming cannot be null');
        }
        $this->container['is_gaming'] = $is_gaming;

        return $this;
    }

    /**
     * Gets is_dining
     *
     * @return bool
     */
    public function getIsDining()
    {
        return $this->container['is_dining'];
    }

    /**
     * Sets is_dining
     *
     * @param bool $is_dining is_dining
     *
     * @return self
     */
    public function setIsDining($is_dining)
    {
        if (is_null($is_dining)) {
            throw new \InvalidArgumentException('non-nullable is_dining cannot be null');
        }
        $this->container['is_dining'] = $is_dining;

        return $this;
    }

    /**
     * Gets is_lounges
     *
     * @return bool
     */
    public function getIsLounges()
    {
        return $this->container['is_lounges'];
    }

    /**
     * Sets is_lounges
     *
     * @param bool $is_lounges is_lounges
     *
     * @return self
     */
    public function setIsLounges($is_lounges)
    {
        if (is_null($is_lounges)) {
            throw new \InvalidArgumentException('non-nullable is_lounges cannot be null');
        }
        $this->container['is_lounges'] = $is_lounges;

        return $this;
    }

    /**
     * Gets is_map_directions
     *
     * @return bool
     */
    public function getIsMapDirections()
    {
        return $this->container['is_map_directions'];
    }

    /**
     * Sets is_map_directions
     *
     * @param bool $is_map_directions is_map_directions
     *
     * @return self
     */
    public function setIsMapDirections($is_map_directions)
    {
        if (is_null($is_map_directions)) {
            throw new \InvalidArgumentException('non-nullable is_map_directions cannot be null');
        }
        $this->container['is_map_directions'] = $is_map_directions;

        return $this;
    }

    /**
     * Gets is_link_book
     *
     * @return bool
     */
    public function getIsLinkBook()
    {
        return $this->container['is_link_book'];
    }

    /**
     * Sets is_link_book
     *
     * @param bool $is_link_book is_link_book
     *
     * @return self
     */
    public function setIsLinkBook($is_link_book)
    {
        if (is_null($is_link_book)) {
            throw new \InvalidArgumentException('non-nullable is_link_book cannot be null');
        }
        $this->container['is_link_book'] = $is_link_book;

        return $this;
    }

    /**
     * Gets is_image_grid
     *
     * @return bool
     */
    public function getIsImageGrid()
    {
        return $this->container['is_image_grid'];
    }

    /**
     * Sets is_image_grid
     *
     * @param bool $is_image_grid is_image_grid
     *
     * @return self
     */
    public function setIsImageGrid($is_image_grid)
    {
        if (is_null($is_image_grid)) {
            throw new \InvalidArgumentException('non-nullable is_image_grid cannot be null');
        }
        $this->container['is_image_grid'] = $is_image_grid;

        return $this;
    }

    /**
     * Gets is_videos
     *
     * @return bool
     */
    public function getIsVideos()
    {
        return $this->container['is_videos'];
    }

    /**
     * Sets is_videos
     *
     * @param bool $is_videos is_videos
     *
     * @return self
     */
    public function setIsVideos($is_videos)
    {
        if (is_null($is_videos)) {
            throw new \InvalidArgumentException('non-nullable is_videos cannot be null');
        }
        $this->container['is_videos'] = $is_videos;

        return $this;
    }

    /**
     * Gets is_transaction_history
     *
     * @return bool
     */
    public function getIsTransactionHistory()
    {
        return $this->container['is_transaction_history'];
    }

    /**
     * Sets is_transaction_history
     *
     * @param bool $is_transaction_history is_transaction_history
     *
     * @return self
     */
    public function setIsTransactionHistory($is_transaction_history)
    {
        if (is_null($is_transaction_history)) {
            throw new \InvalidArgumentException('non-nullable is_transaction_history cannot be null');
        }
        $this->container['is_transaction_history'] = $is_transaction_history;

        return $this;
    }

    /**
     * Gets is_profile
     *
     * @return bool
     */
    public function getIsProfile()
    {
        return $this->container['is_profile'];
    }

    /**
     * Sets is_profile
     *
     * @param bool $is_profile is_profile
     *
     * @return self
     */
    public function setIsProfile($is_profile)
    {
        if (is_null($is_profile)) {
            throw new \InvalidArgumentException('non-nullable is_profile cannot be null');
        }
        $this->container['is_profile'] = $is_profile;

        return $this;
    }

    /**
     * Gets is_settings
     *
     * @return bool
     */
    public function getIsSettings()
    {
        return $this->container['is_settings'];
    }

    /**
     * Sets is_settings
     *
     * @param bool $is_settings is_settings
     *
     * @return self
     */
    public function setIsSettings($is_settings)
    {
        if (is_null($is_settings)) {
            throw new \InvalidArgumentException('non-nullable is_settings cannot be null');
        }
        $this->container['is_settings'] = $is_settings;

        return $this;
    }

    /**
     * Gets is_chat_room
     *
     * @return bool
     */
    public function getIsChatRoom()
    {
        return $this->container['is_chat_room'];
    }

    /**
     * Sets is_chat_room
     *
     * @param bool $is_chat_room is_chat_room
     *
     * @return self
     */
    public function setIsChatRoom($is_chat_room)
    {
        if (is_null($is_chat_room)) {
            throw new \InvalidArgumentException('non-nullable is_chat_room cannot be null');
        }
        $this->container['is_chat_room'] = $is_chat_room;

        return $this;
    }

    /**
     * Gets is_sms_opt_in
     *
     * @return bool
     */
    public function getIsSmsOptIn()
    {
        return $this->container['is_sms_opt_in'];
    }

    /**
     * Sets is_sms_opt_in
     *
     * @param bool $is_sms_opt_in is_sms_opt_in
     *
     * @return self
     */
    public function setIsSmsOptIn($is_sms_opt_in)
    {
        if (is_null($is_sms_opt_in)) {
            throw new \InvalidArgumentException('non-nullable is_sms_opt_in cannot be null');
        }
        $this->container['is_sms_opt_in'] = $is_sms_opt_in;

        return $this;
    }

    /**
     * Gets sms_opt_in_source_id
     *
     * @return \OpenAPI\Client\Model\WalletConfigurationSmsOptInSourceID|null
     */
    public function getSmsOptInSourceId()
    {
        return $this->container['sms_opt_in_source_id'];
    }

    /**
     * Sets sms_opt_in_source_id
     *
     * @param \OpenAPI\Client\Model\WalletConfigurationSmsOptInSourceID|null $sms_opt_in_source_id sms_opt_in_source_id
     *
     * @return self
     */
    public function setSmsOptInSourceId($sms_opt_in_source_id)
    {
        if (is_null($sms_opt_in_source_id)) {
            throw new \InvalidArgumentException('non-nullable sms_opt_in_source_id cannot be null');
        }
        $this->container['sms_opt_in_source_id'] = $sms_opt_in_source_id;

        return $this;
    }

    /**
     * Gets is_email_subscriber
     *
     * @return bool
     */
    public function getIsEmailSubscriber()
    {
        return $this->container['is_email_subscriber'];
    }

    /**
     * Sets is_email_subscriber
     *
     * @param bool $is_email_subscriber is_email_subscriber
     *
     * @return self
     */
    public function setIsEmailSubscriber($is_email_subscriber)
    {
        if (is_null($is_email_subscriber)) {
            throw new \InvalidArgumentException('non-nullable is_email_subscriber cannot be null');
        }
        $this->container['is_email_subscriber'] = $is_email_subscriber;

        return $this;
    }

    /**
     * Gets google_analytics_id
     *
     * @return string|null
     */
    public function getGoogleAnalyticsId()
    {
        return $this->container['google_analytics_id'];
    }

    /**
     * Sets google_analytics_id
     *
     * @param string|null $google_analytics_id google_analytics_id
     *
     * @return self
     */
    public function setGoogleAnalyticsId($google_analytics_id)
    {
        if (is_null($google_analytics_id)) {
            throw new \InvalidArgumentException('non-nullable google_analytics_id cannot be null');
        }
        $this->container['google_analytics_id'] = $google_analytics_id;

        return $this;
    }

    /**
     * Gets facebook_pixel_id
     *
     * @return string|null
     */
    public function getFacebookPixelId()
    {
        return $this->container['facebook_pixel_id'];
    }

    /**
     * Sets facebook_pixel_id
     *
     * @param string|null $facebook_pixel_id facebook_pixel_id
     *
     * @return self
     */
    public function setFacebookPixelId($facebook_pixel_id)
    {
        if (is_null($facebook_pixel_id)) {
            throw new \InvalidArgumentException('non-nullable facebook_pixel_id cannot be null');
        }
        $this->container['facebook_pixel_id'] = $facebook_pixel_id;

        return $this;
    }

    /**
     * Gets public_chat_room_channel_id
     *
     * @return float|null
     */
    public function getPublicChatRoomChannelId()
    {
        return $this->container['public_chat_room_channel_id'];
    }

    /**
     * Sets public_chat_room_channel_id
     *
     * @param float|null $public_chat_room_channel_id public_chat_room_channel_id
     *
     * @return self
     */
    public function setPublicChatRoomChannelId($public_chat_room_channel_id)
    {
        if (is_null($public_chat_room_channel_id)) {
            throw new \InvalidArgumentException('non-nullable public_chat_room_channel_id cannot be null');
        }
        $this->container['public_chat_room_channel_id'] = $public_chat_room_channel_id;

        return $this;
    }

    /**
     * Gets vanity_handle
     *
     * @return string|null
     */
    public function getVanityHandle()
    {
        return $this->container['vanity_handle'];
    }

    /**
     * Sets vanity_handle
     *
     * @param string|null $vanity_handle vanity_handle
     *
     * @return self
     */
    public function setVanityHandle($vanity_handle)
    {
        if (is_null($vanity_handle)) {
            throw new \InvalidArgumentException('non-nullable vanity_handle cannot be null');
        }
        $this->container['vanity_handle'] = $vanity_handle;

        return $this;
    }

    /**
     * Gets vanity_page_wallet_prefix
     *
     * @return string|null
     */
    public function getVanityPageWalletPrefix()
    {
        return $this->container['vanity_page_wallet_prefix'];
    }

    /**
     * Sets vanity_page_wallet_prefix
     *
     * @param string|null $vanity_page_wallet_prefix vanity_page_wallet_prefix
     *
     * @return self
     */
    public function setVanityPageWalletPrefix($vanity_page_wallet_prefix)
    {
        if (is_null($vanity_page_wallet_prefix)) {
            throw new \InvalidArgumentException('non-nullable vanity_page_wallet_prefix cannot be null');
        }
        $this->container['vanity_page_wallet_prefix'] = $vanity_page_wallet_prefix;

        return $this;
    }

    /**
     * Gets merchant_credit_payment_design_id
     *
     * @return string|null
     */
    public function getMerchantCreditPaymentDesignId()
    {
        return $this->container['merchant_credit_payment_design_id'];
    }

    /**
     * Sets merchant_credit_payment_design_id
     *
     * @param string|null $merchant_credit_payment_design_id merchant_credit_payment_design_id
     *
     * @return self
     */
    public function setMerchantCreditPaymentDesignId($merchant_credit_payment_design_id)
    {
        if (is_null($merchant_credit_payment_design_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_credit_payment_design_id cannot be null');
        }
        $this->container['merchant_credit_payment_design_id'] = $merchant_credit_payment_design_id;

        return $this;
    }

    /**
     * Gets custom_domain
     *
     * @return string|null
     */
    public function getCustomDomain()
    {
        return $this->container['custom_domain'];
    }

    /**
     * Sets custom_domain
     *
     * @param string|null $custom_domain custom_domain
     *
     * @return self
     */
    public function setCustomDomain($custom_domain)
    {
        if (is_null($custom_domain)) {
            throw new \InvalidArgumentException('non-nullable custom_domain cannot be null');
        }
        $this->container['custom_domain'] = $custom_domain;

        return $this;
    }

    /**
     * Gets is_claimed
     *
     * @return bool|null
     */
    public function getIsClaimed()
    {
        return $this->container['is_claimed'];
    }

    /**
     * Sets is_claimed
     *
     * @param bool|null $is_claimed is_claimed
     *
     * @return self
     */
    public function setIsClaimed($is_claimed)
    {
        if (is_null($is_claimed)) {
            throw new \InvalidArgumentException('non-nullable is_claimed cannot be null');
        }
        $this->container['is_claimed'] = $is_claimed;

        return $this;
    }

    /**
     * Gets mobile_app_icon_url
     *
     * @return string|null
     */
    public function getMobileAppIconUrl()
    {
        return $this->container['mobile_app_icon_url'];
    }

    /**
     * Sets mobile_app_icon_url
     *
     * @param string|null $mobile_app_icon_url mobile_app_icon_url
     *
     * @return self
     */
    public function setMobileAppIconUrl($mobile_app_icon_url)
    {
        if (is_null($mobile_app_icon_url)) {
            throw new \InvalidArgumentException('non-nullable mobile_app_icon_url cannot be null');
        }
        $this->container['mobile_app_icon_url'] = $mobile_app_icon_url;

        return $this;
    }

    /**
     * Gets is_age_gate
     *
     * @return bool|null
     */
    public function getIsAgeGate()
    {
        return $this->container['is_age_gate'];
    }

    /**
     * Sets is_age_gate
     *
     * @param bool|null $is_age_gate is_age_gate
     *
     * @return self
     */
    public function setIsAgeGate($is_age_gate)
    {
        if (is_null($is_age_gate)) {
            throw new \InvalidArgumentException('non-nullable is_age_gate cannot be null');
        }
        $this->container['is_age_gate'] = $is_age_gate;

        return $this;
    }

    /**
     * Gets age_gate_minimum
     *
     * @return float|null
     */
    public function getAgeGateMinimum()
    {
        return $this->container['age_gate_minimum'];
    }

    /**
     * Sets age_gate_minimum
     *
     * @param float|null $age_gate_minimum age_gate_minimum
     *
     * @return self
     */
    public function setAgeGateMinimum($age_gate_minimum)
    {
        if (is_null($age_gate_minimum)) {
            throw new \InvalidArgumentException('non-nullable age_gate_minimum cannot be null');
        }
        $this->container['age_gate_minimum'] = $age_gate_minimum;

        return $this;
    }

    /**
     * Gets social_instagram_url
     *
     * @return string|null
     */
    public function getSocialInstagramUrl()
    {
        return $this->container['social_instagram_url'];
    }

    /**
     * Sets social_instagram_url
     *
     * @param string|null $social_instagram_url social_instagram_url
     *
     * @return self
     */
    public function setSocialInstagramUrl($social_instagram_url)
    {
        if (is_null($social_instagram_url)) {
            throw new \InvalidArgumentException('non-nullable social_instagram_url cannot be null');
        }
        $this->container['social_instagram_url'] = $social_instagram_url;

        return $this;
    }

    /**
     * Gets social_facebook_url
     *
     * @return string|null
     */
    public function getSocialFacebookUrl()
    {
        return $this->container['social_facebook_url'];
    }

    /**
     * Sets social_facebook_url
     *
     * @param string|null $social_facebook_url social_facebook_url
     *
     * @return self
     */
    public function setSocialFacebookUrl($social_facebook_url)
    {
        if (is_null($social_facebook_url)) {
            throw new \InvalidArgumentException('non-nullable social_facebook_url cannot be null');
        }
        $this->container['social_facebook_url'] = $social_facebook_url;

        return $this;
    }

    /**
     * Gets social_you_tube_url
     *
     * @return string|null
     */
    public function getSocialYouTubeUrl()
    {
        return $this->container['social_you_tube_url'];
    }

    /**
     * Sets social_you_tube_url
     *
     * @param string|null $social_you_tube_url social_you_tube_url
     *
     * @return self
     */
    public function setSocialYouTubeUrl($social_you_tube_url)
    {
        if (is_null($social_you_tube_url)) {
            throw new \InvalidArgumentException('non-nullable social_you_tube_url cannot be null');
        }
        $this->container['social_you_tube_url'] = $social_you_tube_url;

        return $this;
    }

    /**
     * Gets social_twitter_url
     *
     * @return string|null
     */
    public function getSocialTwitterUrl()
    {
        return $this->container['social_twitter_url'];
    }

    /**
     * Sets social_twitter_url
     *
     * @param string|null $social_twitter_url social_twitter_url
     *
     * @return self
     */
    public function setSocialTwitterUrl($social_twitter_url)
    {
        if (is_null($social_twitter_url)) {
            throw new \InvalidArgumentException('non-nullable social_twitter_url cannot be null');
        }
        $this->container['social_twitter_url'] = $social_twitter_url;

        return $this;
    }

    /**
     * Gets social_linked_in_url
     *
     * @return string|null
     */
    public function getSocialLinkedInUrl()
    {
        return $this->container['social_linked_in_url'];
    }

    /**
     * Sets social_linked_in_url
     *
     * @param string|null $social_linked_in_url social_linked_in_url
     *
     * @return self
     */
    public function setSocialLinkedInUrl($social_linked_in_url)
    {
        if (is_null($social_linked_in_url)) {
            throw new \InvalidArgumentException('non-nullable social_linked_in_url cannot be null');
        }
        $this->container['social_linked_in_url'] = $social_linked_in_url;

        return $this;
    }

    /**
     * Gets primary_phone_number
     *
     * @return string|null
     */
    public function getPrimaryPhoneNumber()
    {
        return $this->container['primary_phone_number'];
    }

    /**
     * Sets primary_phone_number
     *
     * @param string|null $primary_phone_number primary_phone_number
     *
     * @return self
     */
    public function setPrimaryPhoneNumber($primary_phone_number)
    {
        if (is_null($primary_phone_number)) {
            throw new \InvalidArgumentException('non-nullable primary_phone_number cannot be null');
        }
        $this->container['primary_phone_number'] = $primary_phone_number;

        return $this;
    }

    /**
     * Gets primary_whats_app
     *
     * @return string|null
     */
    public function getPrimaryWhatsApp()
    {
        return $this->container['primary_whats_app'];
    }

    /**
     * Sets primary_whats_app
     *
     * @param string|null $primary_whats_app primary_whats_app
     *
     * @return self
     */
    public function setPrimaryWhatsApp($primary_whats_app)
    {
        if (is_null($primary_whats_app)) {
            throw new \InvalidArgumentException('non-nullable primary_whats_app cannot be null');
        }
        $this->container['primary_whats_app'] = $primary_whats_app;

        return $this;
    }

    /**
     * Gets primary_email_address
     *
     * @return string|null
     */
    public function getPrimaryEmailAddress()
    {
        return $this->container['primary_email_address'];
    }

    /**
     * Sets primary_email_address
     *
     * @param string|null $primary_email_address primary_email_address
     *
     * @return self
     */
    public function setPrimaryEmailAddress($primary_email_address)
    {
        if (is_null($primary_email_address)) {
            throw new \InvalidArgumentException('non-nullable primary_email_address cannot be null');
        }
        $this->container['primary_email_address'] = $primary_email_address;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if ((mb_strlen($id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $id when calling WalletConfiguration., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $id when calling WalletConfiguration., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling WalletConfiguration., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        if ((mb_strlen($merchant_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling WalletConfiguration., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($merchant_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling WalletConfiguration., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($merchant_id)))) {
            throw new \InvalidArgumentException("invalid value for \$merchant_id when calling WalletConfiguration., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


