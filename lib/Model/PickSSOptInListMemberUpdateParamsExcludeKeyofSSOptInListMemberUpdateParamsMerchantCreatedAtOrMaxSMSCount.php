<?php
/**
 * PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCount
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.600
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCount Class Doc Comment
 *
 * @category Class
 * @description From T, pick a set of properties whose keys are in the union K
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Pick_SSOptInListMemberUpdateParams.Exclude_keyofSSOptInListMemberUpdateParams.merchantCreatedAt-or-maxSMSCount__';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'caller_name' => 'string',
        'caller_type' => 'string',
        'opt_in_list_id' => 'string',
        'opt_in_source_id' => '\OpenAPI\Client\Model\PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCountOptInSourceID',
        'is_subscribed' => 'bool',
        'is_pending_age21_verification' => 'bool',
        'mobile_phone_number' => 'string',
        'referring_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'caller_name' => null,
        'caller_type' => null,
        'opt_in_list_id' => null,
        'opt_in_source_id' => null,
        'is_subscribed' => null,
        'is_pending_age21_verification' => null,
        'mobile_phone_number' => null,
        'referring_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'caller_name' => false,
        'caller_type' => false,
        'opt_in_list_id' => false,
        'opt_in_source_id' => false,
        'is_subscribed' => false,
        'is_pending_age21_verification' => false,
        'mobile_phone_number' => false,
        'referring_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'caller_name' => 'callerName',
        'caller_type' => 'callerType',
        'opt_in_list_id' => 'optInListID',
        'opt_in_source_id' => 'optInSourceID',
        'is_subscribed' => 'isSubscribed',
        'is_pending_age21_verification' => 'isPendingAge21Verification',
        'mobile_phone_number' => 'mobilePhoneNumber',
        'referring_url' => 'referringURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'caller_name' => 'setCallerName',
        'caller_type' => 'setCallerType',
        'opt_in_list_id' => 'setOptInListId',
        'opt_in_source_id' => 'setOptInSourceId',
        'is_subscribed' => 'setIsSubscribed',
        'is_pending_age21_verification' => 'setIsPendingAge21Verification',
        'mobile_phone_number' => 'setMobilePhoneNumber',
        'referring_url' => 'setReferringUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'caller_name' => 'getCallerName',
        'caller_type' => 'getCallerType',
        'opt_in_list_id' => 'getOptInListId',
        'opt_in_source_id' => 'getOptInSourceId',
        'is_subscribed' => 'getIsSubscribed',
        'is_pending_age21_verification' => 'getIsPendingAge21Verification',
        'mobile_phone_number' => 'getMobilePhoneNumber',
        'referring_url' => 'getReferringUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('caller_name', $data ?? [], null);
        $this->setIfExists('caller_type', $data ?? [], null);
        $this->setIfExists('opt_in_list_id', $data ?? [], null);
        $this->setIfExists('opt_in_source_id', $data ?? [], null);
        $this->setIfExists('is_subscribed', $data ?? [], null);
        $this->setIfExists('is_pending_age21_verification', $data ?? [], null);
        $this->setIfExists('mobile_phone_number', $data ?? [], null);
        $this->setIfExists('referring_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['opt_in_list_id'] === null) {
            $invalidProperties[] = "'opt_in_list_id' can't be null";
        }
        if ((mb_strlen($this->container['opt_in_list_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'opt_in_list_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['opt_in_list_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'opt_in_list_id', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[a-zA-Z0-9]+$/", $this->container['opt_in_list_id'])) {
            $invalidProperties[] = "invalid value for 'opt_in_list_id', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        if ($this->container['opt_in_source_id'] === null) {
            $invalidProperties[] = "'opt_in_source_id' can't be null";
        }
        if ($this->container['is_subscribed'] === null) {
            $invalidProperties[] = "'is_subscribed' can't be null";
        }
        if ($this->container['is_pending_age21_verification'] === null) {
            $invalidProperties[] = "'is_pending_age21_verification' can't be null";
        }
        if ($this->container['mobile_phone_number'] === null) {
            $invalidProperties[] = "'mobile_phone_number' can't be null";
        }
        if ($this->container['referring_url'] === null) {
            $invalidProperties[] = "'referring_url' can't be null";
        }
        if ((mb_strlen($this->container['referring_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'referring_url', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets caller_name
     *
     * @return string|null
     */
    public function getCallerName()
    {
        return $this->container['caller_name'];
    }

    /**
     * Sets caller_name
     *
     * @param string|null $caller_name caller_name
     *
     * @return self
     */
    public function setCallerName($caller_name)
    {
        if (is_null($caller_name)) {
            throw new \InvalidArgumentException('non-nullable caller_name cannot be null');
        }
        $this->container['caller_name'] = $caller_name;

        return $this;
    }

    /**
     * Gets caller_type
     *
     * @return string|null
     */
    public function getCallerType()
    {
        return $this->container['caller_type'];
    }

    /**
     * Sets caller_type
     *
     * @param string|null $caller_type caller_type
     *
     * @return self
     */
    public function setCallerType($caller_type)
    {
        if (is_null($caller_type)) {
            throw new \InvalidArgumentException('non-nullable caller_type cannot be null');
        }
        $this->container['caller_type'] = $caller_type;

        return $this;
    }

    /**
     * Gets opt_in_list_id
     *
     * @return string
     */
    public function getOptInListId()
    {
        return $this->container['opt_in_list_id'];
    }

    /**
     * Sets opt_in_list_id
     *
     * @param string $opt_in_list_id opt_in_list_id
     *
     * @return self
     */
    public function setOptInListId($opt_in_list_id)
    {
        if (is_null($opt_in_list_id)) {
            throw new \InvalidArgumentException('non-nullable opt_in_list_id cannot be null');
        }
        if ((mb_strlen($opt_in_list_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $opt_in_list_id when calling PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCount., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($opt_in_list_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $opt_in_list_id when calling PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCount., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($opt_in_list_id)))) {
            throw new \InvalidArgumentException("invalid value for \$opt_in_list_id when calling PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCount., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['opt_in_list_id'] = $opt_in_list_id;

        return $this;
    }

    /**
     * Gets opt_in_source_id
     *
     * @return \OpenAPI\Client\Model\PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCountOptInSourceID
     */
    public function getOptInSourceId()
    {
        return $this->container['opt_in_source_id'];
    }

    /**
     * Sets opt_in_source_id
     *
     * @param \OpenAPI\Client\Model\PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCountOptInSourceID $opt_in_source_id opt_in_source_id
     *
     * @return self
     */
    public function setOptInSourceId($opt_in_source_id)
    {
        if (is_null($opt_in_source_id)) {
            throw new \InvalidArgumentException('non-nullable opt_in_source_id cannot be null');
        }
        $this->container['opt_in_source_id'] = $opt_in_source_id;

        return $this;
    }

    /**
     * Gets is_subscribed
     *
     * @return bool
     */
    public function getIsSubscribed()
    {
        return $this->container['is_subscribed'];
    }

    /**
     * Sets is_subscribed
     *
     * @param bool $is_subscribed is_subscribed
     *
     * @return self
     */
    public function setIsSubscribed($is_subscribed)
    {
        if (is_null($is_subscribed)) {
            throw new \InvalidArgumentException('non-nullable is_subscribed cannot be null');
        }
        $this->container['is_subscribed'] = $is_subscribed;

        return $this;
    }

    /**
     * Gets is_pending_age21_verification
     *
     * @return bool
     */
    public function getIsPendingAge21Verification()
    {
        return $this->container['is_pending_age21_verification'];
    }

    /**
     * Sets is_pending_age21_verification
     *
     * @param bool $is_pending_age21_verification is_pending_age21_verification
     *
     * @return self
     */
    public function setIsPendingAge21Verification($is_pending_age21_verification)
    {
        if (is_null($is_pending_age21_verification)) {
            throw new \InvalidArgumentException('non-nullable is_pending_age21_verification cannot be null');
        }
        $this->container['is_pending_age21_verification'] = $is_pending_age21_verification;

        return $this;
    }

    /**
     * Gets mobile_phone_number
     *
     * @return string
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobile_phone_number'];
    }

    /**
     * Sets mobile_phone_number
     *
     * @param string $mobile_phone_number mobile_phone_number
     *
     * @return self
     */
    public function setMobilePhoneNumber($mobile_phone_number)
    {
        if (is_null($mobile_phone_number)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone_number cannot be null');
        }
        $this->container['mobile_phone_number'] = $mobile_phone_number;

        return $this;
    }

    /**
     * Gets referring_url
     *
     * @return string
     */
    public function getReferringUrl()
    {
        return $this->container['referring_url'];
    }

    /**
     * Sets referring_url
     *
     * @param string $referring_url referring_url
     *
     * @return self
     */
    public function setReferringUrl($referring_url)
    {
        if (is_null($referring_url)) {
            throw new \InvalidArgumentException('non-nullable referring_url cannot be null');
        }

        if ((mb_strlen($referring_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $referring_url when calling PickSSOptInListMemberUpdateParamsExcludeKeyofSSOptInListMemberUpdateParamsMerchantCreatedAtOrMaxSMSCount., must be bigger than or equal to 0.');
        }

        $this->container['referring_url'] = $referring_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


