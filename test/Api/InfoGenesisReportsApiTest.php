<?php
/**
 * InfoGenesisReportsApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wallet-api
 *
 * API
 *
 * The version of the OpenAPI document: 2.1.514
 * Contact: development@wallet.inc
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * InfoGenesisReportsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InfoGenesisReportsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for countAdCreditsRedemptions
     *
     * Count redeemed ad credits.
     *
     */
    public function testCountAdCreditsRedemptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countAdCreditsRefunds
     *
     * Count refunded ad credits.
     *
     */
    public function testCountAdCreditsRefunds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countDynamicVoucherRedemptions
     *
     * Count dynamic voucher redemptions.
     *
     */
    public function testCountDynamicVoucherRedemptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countDynamicVoucherRefunds
     *
     * Count dynamic voucher refunds.
     *
     */
    public function testCountDynamicVoucherRefunds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countMembershipPointsRedemptions
     *
     * Count redeemed membership points.
     *
     */
    public function testCountMembershipPointsRedemptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countMembershipPointsRefunds
     *
     * Count refunded membership points.
     *
     */
    public function testCountMembershipPointsRefunds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countMembershipTierRedemptions
     *
     * Count tier redemptions.
     *
     */
    public function testCountMembershipTierRedemptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countMembershipTierRefunds
     *
     * Count tier refunds.
     *
     */
    public function testCountMembershipTierRefunds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countMerchantCreditRedemptions
     *
     * Count redeemed merchant credits.
     *
     */
    public function testCountMerchantCreditRedemptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countMerchantCreditRefunds
     *
     * Count refunded merchant credits.
     *
     */
    public function testCountMerchantCreditRefunds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countStaticVoucherRedemptions
     *
     * Count static voucher redemptions.
     *
     */
    public function testCountStaticVoucherRedemptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for countStaticVoucherRefunds
     *
     * Count static voucher refunds.
     *
     */
    public function testCountStaticVoucherRefunds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisAuthorizations
     *
     * Fetch InfoGenesis authorizations.
     *
     */
    public function testFetchInfoGenesisAuthorizations()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisCampaignData
     *
     * Fetch campaign information.
     *
     */
    public function testFetchInfoGenesisCampaignData()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisLookupRequests
     *
     * Fetch InfoGenesis lookup requests.
     *
     */
    public function testFetchInfoGenesisLookupRequests()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisLookupRequestsErrors
     *
     * Fetch InfoGenesis lookup request errors.
     *
     */
    public function testFetchInfoGenesisLookupRequestsErrors()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisRedeemedStaticVouchers
     *
     * Fetch redeemed static vouchers.
     *
     */
    public function testFetchInfoGenesisRedeemedStaticVouchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisRedeemedUniquePostingIDs
     *
     * Fetch redeemed InfoGenesis unique posting IDs.
     *
     */
    public function testFetchInfoGenesisRedeemedUniquePostingIDs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisRedemptions
     *
     * Fetch InfoGenesis redemptions.
     *
     */
    public function testFetchInfoGenesisRedemptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisRefundedRoutingIDs
     *
     * Fetch refunded InfoGenesis unique posting IDs.
     *
     */
    public function testFetchInfoGenesisRefundedRoutingIDs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisRefundedStaticVouchers
     *
     * Fetch refunded static vouchers.
     *
     */
    public function testFetchInfoGenesisRefundedStaticVouchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisRefunds
     *
     * Fetch InfoGenesis refunds.
     *
     */
    public function testFetchInfoGenesisRefunds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisRequest
     *
     * Fetch InfoGenesis request with transaction ID.
     *
     */
    public function testFetchInfoGenesisRequest()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisRequests
     *
     * Fetch InfoGenesis requests with routing IDs.
     *
     */
    public function testFetchInfoGenesisRequests()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisResponseErrors
     *
     * Fetch InfoGenesis response errors.
     *
     */
    public function testFetchInfoGenesisResponseErrors()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisResponses
     *
     * Fetch InfoGenesis responses with routing IDs.
     *
     */
    public function testFetchInfoGenesisResponses()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchInfoGenesisTransactionsWithUniquePostingIDs
     *
     * Fetch InfoGenesis transactions.
     *
     */
    public function testFetchInfoGenesisTransactionsWithUniquePostingIDs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
